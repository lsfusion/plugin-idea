// This is a generated file. Not intended for manual editing.
package com.lsfusion.lang.psi;

import com.intellij.psi.tree.IElementType;
import com.intellij.extapi.psi.ASTWrapperPsiElement;
import com.intellij.psi.PsiElement;
import com.intellij.lang.ASTNode;
import com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory;
import com.lsfusion.lang.psi.impl.*;

public interface LSFTypes {

  IElementType ABSTRACT_ACTION_PROPERTY_DEFINITION = LSFElementTypeFactory.create("ABSTRACT_ACTION_PROPERTY_DEFINITION");
  IElementType ABSTRACT_CASE_ADD_OPTION = LSFElementTypeFactory.create("ABSTRACT_CASE_ADD_OPTION");
  IElementType ABSTRACT_EXCLUSIVE_OVERRIDE_OPTION = LSFElementTypeFactory.create("ABSTRACT_EXCLUSIVE_OVERRIDE_OPTION");
  IElementType ABSTRACT_PROPERTY_DEFINITION = LSFElementTypeFactory.create("ABSTRACT_PROPERTY_DEFINITION");
  IElementType ACTION_CASE_BRANCH_BODY = LSFElementTypeFactory.create("ACTION_CASE_BRANCH_BODY");
  IElementType ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ACTION_STATEMENT = LSFStubElementTypeFactory.create("ACTION_STATEMENT");
  IElementType ACTION_UNFRIENDLY_PD = LSFElementTypeFactory.create("ACTION_UNFRIENDLY_PD");
  IElementType ACTION_USAGE = LSFElementTypeFactory.create("ACTION_USAGE");
  IElementType ACTION_USAGE_WRAPPER = LSFElementTypeFactory.create("ACTION_USAGE_WRAPPER");
  IElementType ACTIVATE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("ACTIVATE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ACTIVE_FORM_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("ACTIVE_FORM_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ACTIVE_TAB_PROPERTY_DEFINITION = LSFElementTypeFactory.create("ACTIVE_TAB_PROPERTY_DEFINITION");
  IElementType ADDITIVE_ORPE = LSFElementTypeFactory.create("ADDITIVE_ORPE");
  IElementType ADDITIVE_PE = LSFElementTypeFactory.create("ADDITIVE_PE");
  IElementType AGGR_PARAM_PROP_DECLARE = LSFStubElementTypeFactory.create("AGGR_PARAM_PROP_DECLARE");
  IElementType AGGR_PROPERTY_DEFINITION = LSFElementTypeFactory.create("AGGR_PROPERTY_DEFINITION");
  IElementType AGGR_SETTING = LSFElementTypeFactory.create("AGGR_SETTING");
  IElementType ALIASED_PROPERTY_EXPRESSION = LSFElementTypeFactory.create("ALIASED_PROPERTY_EXPRESSION");
  IElementType ALIAS_USAGE = LSFElementTypeFactory.create("ALIAS_USAGE");
  IElementType ALIGNMENT_LITERAL = LSFElementTypeFactory.create("ALIGNMENT_LITERAL");
  IElementType AND_PE = LSFElementTypeFactory.create("AND_PE");
  IElementType APPLY_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("APPLY_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ASPECT_AFTER = LSFElementTypeFactory.create("ASPECT_AFTER");
  IElementType ASPECT_BEFORE = LSFElementTypeFactory.create("ASPECT_BEFORE");
  IElementType ASPECT_STATEMENT = LSFElementTypeFactory.create("ASPECT_STATEMENT");
  IElementType ASSIGN_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("ASSIGN_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ASYNC_UPDATE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("ASYNC_UPDATE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType AS_EDIT_ACTION_SETTING = LSFElementTypeFactory.create("AS_EDIT_ACTION_SETTING");
  IElementType AUTOREFRESH_LITERAL = LSFElementTypeFactory.create("AUTOREFRESH_LITERAL");
  IElementType AUTOSET_SETTING = LSFElementTypeFactory.create("AUTOSET_SETTING");
  IElementType BASE_EVENT = LSFElementTypeFactory.create("BASE_EVENT");
  IElementType BASE_EVENT_NOT_PE = LSFStubElementTypeFactory.create("BASE_EVENT_NOT_PE");
  IElementType BASE_EVENT_PE = LSFStubElementTypeFactory.create("BASE_EVENT_PE");
  IElementType BOOLEAN_LITERAL = LSFElementTypeFactory.create("BOOLEAN_LITERAL");
  IElementType BORDER_POSITION = LSFElementTypeFactory.create("BORDER_POSITION");
  IElementType BOUNDS_DOUBLE_LITERAL = LSFElementTypeFactory.create("BOUNDS_DOUBLE_LITERAL");
  IElementType BOUNDS_INT_LITERAL = LSFElementTypeFactory.create("BOUNDS_INT_LITERAL");
  IElementType BRACKETED_CLASS_NAME_LIST = LSFElementTypeFactory.create("BRACKETED_CLASS_NAME_LIST");
  IElementType BREAK_ACTION_OPERATOR = LSFElementTypeFactory.create("BREAK_ACTION_OPERATOR");
  IElementType BUILT_IN_CLASS_NAME = LSFElementTypeFactory.create("BUILT_IN_CLASS_NAME");
  IElementType CANCEL_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("CANCEL_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType CASE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("CASE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType CASE_BRANCH_BODY = LSFElementTypeFactory.create("CASE_BRANCH_BODY");
  IElementType CASE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("CASE_PROPERTY_DEFINITION");
  IElementType CAST_PROPERTY_DEFINITION = LSFElementTypeFactory.create("CAST_PROPERTY_DEFINITION");
  IElementType CHANGE_CLASS_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("CHANGE_CLASS_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType CHANGE_CLASS_WHERE = LSFElementTypeFactory.create("CHANGE_CLASS_WHERE");
  IElementType CHANGE_INPUT = LSFElementTypeFactory.create("CHANGE_INPUT");
  IElementType CHANGE_INPUT_PROPERTY_CUSTOM_VIEW = LSFElementTypeFactory.create("CHANGE_INPUT_PROPERTY_CUSTOM_VIEW");
  IElementType CHANGE_KEY_SETTING = LSFElementTypeFactory.create("CHANGE_KEY_SETTING");
  IElementType CHANGE_MOUSE_SETTING = LSFElementTypeFactory.create("CHANGE_MOUSE_SETTING");
  IElementType CHANGE_PROPERTY_BODY = LSFElementTypeFactory.create("CHANGE_PROPERTY_BODY");
  IElementType CHANGE_PROPERTY_CUSTOM_VIEW = LSFElementTypeFactory.create("CHANGE_PROPERTY_CUSTOM_VIEW");
  IElementType CHAR_WIDTH_SETTING = LSFElementTypeFactory.create("CHAR_WIDTH_SETTING");
  IElementType CLASS_DECL = LSFStubElementTypeFactory.create("CLASS_DECL");
  IElementType CLASS_NAME = LSFElementTypeFactory.create("CLASS_NAME");
  IElementType CLASS_NAME_LIST = LSFElementTypeFactory.create("CLASS_NAME_LIST");
  IElementType CLASS_OR_EXPRESSION = LSFElementTypeFactory.create("CLASS_OR_EXPRESSION");
  IElementType CLASS_PARAM_DECLARE = LSFElementTypeFactory.create("CLASS_PARAM_DECLARE");
  IElementType CLASS_PARAM_DECLARE_LIST = LSFElementTypeFactory.create("CLASS_PARAM_DECLARE_LIST");
  IElementType CLASS_PARENTS_LIST = LSFElementTypeFactory.create("CLASS_PARENTS_LIST");
  IElementType CLASS_STATEMENT = LSFStubElementTypeFactory.create("CLASS_STATEMENT");
  IElementType CLASS_VIEW_TYPE = LSFElementTypeFactory.create("CLASS_VIEW_TYPE");
  IElementType CLOSE_FORM_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("CLOSE_FORM_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType CODE_LITERAL = LSFElementTypeFactory.create("CODE_LITERAL");
  IElementType COLLAPSE_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("COLLAPSE_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType COLOR_LITERAL = LSFElementTypeFactory.create("COLOR_LITERAL");
  IElementType COMPLEX_SETTING = LSFElementTypeFactory.create("COMPLEX_SETTING");
  IElementType COMPONENT_BLOCK_STATEMENT = LSFElementTypeFactory.create("COMPONENT_BLOCK_STATEMENT");
  IElementType COMPONENT_BODY = LSFElementTypeFactory.create("COMPONENT_BODY");
  IElementType COMPONENT_DECL = LSFElementTypeFactory.create("COMPONENT_DECL");
  IElementType COMPONENT_ID = LSFElementTypeFactory.create("COMPONENT_ID");
  IElementType COMPONENT_INSERT_POSITION = LSFElementTypeFactory.create("COMPONENT_INSERT_POSITION");
  IElementType COMPONENT_PROPERTY_VALUE = LSFElementTypeFactory.create("COMPONENT_PROPERTY_VALUE");
  IElementType COMPONENT_SELECTOR = LSFElementTypeFactory.create("COMPONENT_SELECTOR");
  IElementType COMPONENT_STATEMENT = LSFElementTypeFactory.create("COMPONENT_STATEMENT");
  IElementType COMPONENT_STUB_STATEMENT = LSFElementTypeFactory.create("COMPONENT_STUB_STATEMENT");
  IElementType COMPONENT_USAGE = LSFElementTypeFactory.create("COMPONENT_USAGE");
  IElementType COMPOUND_ID = LSFElementTypeFactory.create("COMPOUND_ID");
  IElementType CONCAT_PROPERTY_DEFINITION = LSFElementTypeFactory.create("CONCAT_PROPERTY_DEFINITION");
  IElementType CONFIRM_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("CONFIRM_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType CONFIRM_SETTING = LSFElementTypeFactory.create("CONFIRM_SETTING");
  IElementType CONSTRAINT_FILTER = LSFElementTypeFactory.create("CONSTRAINT_FILTER");
  IElementType CONSTRAINT_STATEMENT = LSFElementTypeFactory.create("CONSTRAINT_STATEMENT");
  IElementType CONTAINER_TYPE_LITERAL = LSFElementTypeFactory.create("CONTAINER_TYPE_LITERAL");
  IElementType CONTEXT_ACTION = LSFElementTypeFactory.create("CONTEXT_ACTION");
  IElementType CONTEXT_ACTIONS = LSFElementTypeFactory.create("CONTEXT_ACTIONS");
  IElementType CONTEXT_FILTERS_CLAUSE = LSFElementTypeFactory.create("CONTEXT_FILTERS_CLAUSE");
  IElementType CONTEXT_MENU_EVENT_TYPE = LSFElementTypeFactory.create("CONTEXT_MENU_EVENT_TYPE");
  IElementType CONTINUE_ACTION_OPERATOR = LSFElementTypeFactory.create("CONTINUE_ACTION_OPERATOR");
  IElementType CUSTOM_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("CUSTOM_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType CUSTOM_CLASS_USAGE = LSFElementTypeFactory.create("CUSTOM_CLASS_USAGE");
  IElementType CUSTOM_CLASS_USAGE_WRAPPER = LSFElementTypeFactory.create("CUSTOM_CLASS_USAGE_WRAPPER");
  IElementType CUSTOM_FORM_DESIGN_OPTION = LSFElementTypeFactory.create("CUSTOM_FORM_DESIGN_OPTION");
  IElementType CUSTOM_HEADER_LITERAL = LSFElementTypeFactory.create("CUSTOM_HEADER_LITERAL");
  IElementType CUSTOM_VIEW_SETTING = LSFElementTypeFactory.create("CUSTOM_VIEW_SETTING");
  IElementType DATA_PROPERTY_DEFINITION = LSFElementTypeFactory.create("DATA_PROPERTY_DEFINITION");
  IElementType DATA_PROPERTY_SESSION_MODIFIER = LSFElementTypeFactory.create("DATA_PROPERTY_SESSION_MODIFIER");
  IElementType DATE_LITERAL = LSFElementTypeFactory.create("DATE_LITERAL");
  IElementType DATE_TIME_LITERAL = LSFElementTypeFactory.create("DATE_TIME_LITERAL");
  IElementType DEFAULT_COMPARE_SETTING = LSFElementTypeFactory.create("DEFAULT_COMPARE_SETTING");
  IElementType DELETE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("DELETE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType DESIGN_CALC_PROPERTY_OBJECT = LSFElementTypeFactory.create("DESIGN_CALC_PROPERTY_OBJECT");
  IElementType DESIGN_HEADER = LSFElementTypeFactory.create("DESIGN_HEADER");
  IElementType DESIGN_STATEMENT = LSFStubElementTypeFactory.create("DESIGN_STATEMENT");
  IElementType DIALOG_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("DIALOG_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType DIMENSION_LITERAL = LSFElementTypeFactory.create("DIMENSION_LITERAL");
  IElementType DOCK_POSITION = LSFElementTypeFactory.create("DOCK_POSITION");
  IElementType DOUBLE_LITERAL = LSFElementTypeFactory.create("DOUBLE_LITERAL");
  IElementType DO_INPUT_BODY = LSFElementTypeFactory.create("DO_INPUT_BODY");
  IElementType DO_MAIN_BODY = LSFElementTypeFactory.create("DO_MAIN_BODY");
  IElementType DRAW_ROOT = LSFElementTypeFactory.create("DRAW_ROOT");
  IElementType DRILL_DOWN_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("DRILL_DOWN_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ECHO_SYMBOLS_SETTING = LSFElementTypeFactory.create("ECHO_SYMBOLS_SETTING");
  IElementType EDIT_FORM_DECLARATION = LSFElementTypeFactory.create("EDIT_FORM_DECLARATION");
  IElementType EMAIL_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EMAIL_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EMAIL_PROPERTY_USAGE = LSFElementTypeFactory.create("EMAIL_PROPERTY_USAGE");
  IElementType EMAIL_RECIPIENT_TYPE_LITERAL = LSFElementTypeFactory.create("EMAIL_RECIPIENT_TYPE_LITERAL");
  IElementType EMPTY_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EMPTY_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EMPTY_EXPLICIT_PROP_CLASS_LIST = LSFElementTypeFactory.create("EMPTY_EXPLICIT_PROP_CLASS_LIST");
  IElementType EMPTY_STATEMENT = LSFElementTypeFactory.create("EMPTY_STATEMENT");
  IElementType EQUALITY_PE = LSFElementTypeFactory.create("EQUALITY_PE");
  IElementType EQUALS_SIGN = LSFElementTypeFactory.create("EQUALS_SIGN");
  IElementType EVAL_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EVAL_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EVENT_ID_SETTING = LSFElementTypeFactory.create("EVENT_ID_SETTING");
  IElementType EVENT_STATEMENT = LSFElementTypeFactory.create("EVENT_STATEMENT");
  IElementType EXCLUSIVE_OPERATOR = LSFElementTypeFactory.create("EXCLUSIVE_OPERATOR");
  IElementType EXCLUSIVE_OVERRIDE_OPTION = LSFElementTypeFactory.create("EXCLUSIVE_OVERRIDE_OPTION");
  IElementType EXEC_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EXEC_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EXPAND_COLLAPSE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EXPAND_COLLAPSE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EXPAND_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EXPAND_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EXPLICIT_INTERFACE_ACT_STATEMENT = LSFStubElementTypeFactory.create("EXPLICIT_INTERFACE_ACT_STATEMENT");
  IElementType EXPLICIT_INTERFACE_PROPERTY_STATEMENT = LSFStubElementTypeFactory.create("EXPLICIT_INTERFACE_PROPERTY_STATEMENT");
  IElementType EXPLICIT_PROP_CLASS = LSFElementTypeFactory.create("EXPLICIT_PROP_CLASS");
  IElementType EXPLICIT_PROP_CLASS_USAGE = LSFElementTypeFactory.create("EXPLICIT_PROP_CLASS_USAGE");
  IElementType EXPLICIT_VALUE_PROPERTY_STATEMENT = LSFStubElementTypeFactory.create("EXPLICIT_VALUE_PROPERTY_STATEMENT");
  IElementType EXPORT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EXPORT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EXPORT_DATA_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EXPORT_DATA_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType EXPRESSION_FRIENDLY_PD = LSFElementTypeFactory.create("EXPRESSION_FRIENDLY_PD");
  IElementType EXPRESSION_LITERAL = LSFElementTypeFactory.create("EXPRESSION_LITERAL");
  IElementType EXPRESSION_PRIMITIVE = LSFElementTypeFactory.create("EXPRESSION_PRIMITIVE");
  IElementType EXPRESSION_STRING_LITERAL = LSFElementTypeFactory.create("EXPRESSION_STRING_LITERAL");
  IElementType EXPRESSION_UNFRIENDLY_PD = LSFElementTypeFactory.create("EXPRESSION_UNFRIENDLY_PD");
  IElementType EXPR_PARAMETER_NAME_USAGE = LSFElementTypeFactory.create("EXPR_PARAMETER_NAME_USAGE");
  IElementType EXPR_PARAMETER_USAGE = LSFElementTypeFactory.create("EXPR_PARAMETER_USAGE");
  IElementType EXPR_PARAMETER_USAGE_LIST = LSFElementTypeFactory.create("EXPR_PARAMETER_USAGE_LIST");
  IElementType EXTENDING_CLASS_DECLARATION = LSFElementTypeFactory.create("EXTENDING_CLASS_DECLARATION");
  IElementType EXTENDING_FORM_DECLARATION = LSFElementTypeFactory.create("EXTENDING_FORM_DECLARATION");
  IElementType EXTERNAL_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("EXTERNAL_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType FILTER_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("FILTER_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType FILTER_GROUP_NAME = LSFElementTypeFactory.create("FILTER_GROUP_NAME");
  IElementType FILTER_GROUP_SELECTOR = LSFElementTypeFactory.create("FILTER_GROUP_SELECTOR");
  IElementType FILTER_GROUP_USAGE = LSFElementTypeFactory.create("FILTER_GROUP_USAGE");
  IElementType FILTER_PROPERTY_DEFINITION = LSFElementTypeFactory.create("FILTER_PROPERTY_DEFINITION");
  IElementType FILTER_PROPERTY_SELECTOR = LSFElementTypeFactory.create("FILTER_PROPERTY_SELECTOR");
  IElementType FILTER_SET_DEFAULT = LSFElementTypeFactory.create("FILTER_SET_DEFAULT");
  IElementType FLEX_ALIGNMENT_LITERAL = LSFElementTypeFactory.create("FLEX_ALIGNMENT_LITERAL");
  IElementType FLEX_CHAR_WIDTH_SETTING = LSFElementTypeFactory.create("FLEX_CHAR_WIDTH_SETTING");
  IElementType FOLLOWS_STATEMENT = LSFElementTypeFactory.create("FOLLOWS_STATEMENT");
  IElementType FORMULA_PROPERTY_DEFINITION = LSFElementTypeFactory.create("FORMULA_PROPERTY_DEFINITION");
  IElementType FORMULA_PROPERTY_SYNTAX = LSFElementTypeFactory.create("FORMULA_PROPERTY_SYNTAX");
  IElementType FORMULA_PROPERTY_SYNTAX_LIST = LSFElementTypeFactory.create("FORMULA_PROPERTY_SYNTAX_LIST");
  IElementType FORMULA_PROPERTY_SYNTAX_TYPE = LSFElementTypeFactory.create("FORMULA_PROPERTY_SYNTAX_TYPE");
  IElementType FORM_ACTION_DECLARATION = LSFElementTypeFactory.create("FORM_ACTION_DECLARATION");
  IElementType FORM_ACTION_OBJECT = LSFElementTypeFactory.create("FORM_ACTION_OBJECT");
  IElementType FORM_ACTION_OBJECT_LIST = LSFElementTypeFactory.create("FORM_ACTION_OBJECT_LIST");
  IElementType FORM_ACTION_OBJECT_USAGE = LSFElementTypeFactory.create("FORM_ACTION_OBJECT_USAGE");
  IElementType FORM_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("FORM_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType FORM_ACTION_PROPERTY_OBJECT = LSFElementTypeFactory.create("FORM_ACTION_PROPERTY_OBJECT");
  IElementType FORM_CALC_PROPERTY_OBJECT = LSFElementTypeFactory.create("FORM_CALC_PROPERTY_OBJECT");
  IElementType FORM_DECL = LSFStubElementTypeFactory.create("FORM_DECL");
  IElementType FORM_ELSE_NO_PARAMS_ACTION_USAGE = LSFElementTypeFactory.create("FORM_ELSE_NO_PARAMS_ACTION_USAGE");
  IElementType FORM_EVENTS_LIST = LSFElementTypeFactory.create("FORM_EVENTS_LIST");
  IElementType FORM_EVENT_DECLARATION = LSFElementTypeFactory.create("FORM_EVENT_DECLARATION");
  IElementType FORM_EVENT_TYPE = LSFElementTypeFactory.create("FORM_EVENT_TYPE");
  IElementType FORM_EXPR_DECLARATION = LSFElementTypeFactory.create("FORM_EXPR_DECLARATION");
  IElementType FORM_EXTEND_FILTER_GROUP_DECLARATION = LSFElementTypeFactory.create("FORM_EXTEND_FILTER_GROUP_DECLARATION");
  IElementType FORM_EXT_ID = LSFElementTypeFactory.create("FORM_EXT_ID");
  IElementType FORM_EXT_ID_SETTING = LSFElementTypeFactory.create("FORM_EXT_ID_SETTING");
  IElementType FORM_EXT_KEY = LSFElementTypeFactory.create("FORM_EXT_KEY");
  IElementType FORM_FILTERS_LIST = LSFElementTypeFactory.create("FORM_FILTERS_LIST");
  IElementType FORM_FILTER_GROUP_DECLARATION = LSFElementTypeFactory.create("FORM_FILTER_GROUP_DECLARATION");
  IElementType FORM_GROUP_OBJECT = LSFElementTypeFactory.create("FORM_GROUP_OBJECT");
  IElementType FORM_GROUP_OBJECTS_LIST = LSFElementTypeFactory.create("FORM_GROUP_OBJECTS_LIST");
  IElementType FORM_GROUP_OBJECT_BACKGROUND = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_BACKGROUND");
  IElementType FORM_GROUP_OBJECT_DECLARATION = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_DECLARATION");
  IElementType FORM_GROUP_OBJECT_FOREGROUND = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_FOREGROUND");
  IElementType FORM_GROUP_OBJECT_INIT_VIEW_TYPE = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_INIT_VIEW_TYPE");
  IElementType FORM_GROUP_OBJECT_OPTIONS = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_OPTIONS");
  IElementType FORM_GROUP_OBJECT_PAGE_SIZE = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_PAGE_SIZE");
  IElementType FORM_GROUP_OBJECT_RELATIVE_POSITION = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_RELATIVE_POSITION");
  IElementType FORM_GROUP_OBJECT_UPDATE = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_UPDATE");
  IElementType FORM_GROUP_OBJECT_VIEW_TYPE = LSFElementTypeFactory.create("FORM_GROUP_OBJECT_VIEW_TYPE");
  IElementType FORM_HINTS_LIST = LSFElementTypeFactory.create("FORM_HINTS_LIST");
  IElementType FORM_IN_GROUP = LSFElementTypeFactory.create("FORM_IN_GROUP");
  IElementType FORM_MAPPED_NAME_PROPERTIES_LIST = LSFElementTypeFactory.create("FORM_MAPPED_NAME_PROPERTIES_LIST");
  IElementType FORM_MAPPED_PROPERTIES_LIST = LSFElementTypeFactory.create("FORM_MAPPED_PROPERTIES_LIST");
  IElementType FORM_MULTI_GROUP_OBJECT_DECLARATION = LSFElementTypeFactory.create("FORM_MULTI_GROUP_OBJECT_DECLARATION");
  IElementType FORM_OBJECT_DECLARATION = LSFElementTypeFactory.create("FORM_OBJECT_DECLARATION");
  IElementType FORM_OPTIONS_ON_EVENTS = LSFElementTypeFactory.create("FORM_OPTIONS_ON_EVENTS");
  IElementType FORM_OPTIONS_WITH_CALC_PROPERTY_OBJECT = LSFElementTypeFactory.create("FORM_OPTIONS_WITH_CALC_PROPERTY_OBJECT");
  IElementType FORM_OPTIONS_WITH_OPTIONAL_CALC_PROPERTY_OBJECT = LSFElementTypeFactory.create("FORM_OPTIONS_WITH_OPTIONAL_CALC_PROPERTY_OBJECT");
  IElementType FORM_OPTION_COLUMNS = LSFElementTypeFactory.create("FORM_OPTION_COLUMNS");
  IElementType FORM_OPTION_CUSTOM_VIEW = LSFElementTypeFactory.create("FORM_OPTION_CUSTOM_VIEW");
  IElementType FORM_OPTION_EVENT_ID = LSFElementTypeFactory.create("FORM_OPTION_EVENT_ID");
  IElementType FORM_OPTION_FORCE = LSFElementTypeFactory.create("FORM_OPTION_FORCE");
  IElementType FORM_OPTION_INSERT_TYPE = LSFElementTypeFactory.create("FORM_OPTION_INSERT_TYPE");
  IElementType FORM_OPTION_QUICK_FILTER = LSFElementTypeFactory.create("FORM_OPTION_QUICK_FILTER");
  IElementType FORM_OPTION_SESSION = LSFElementTypeFactory.create("FORM_OPTION_SESSION");
  IElementType FORM_OPTION_TO_DRAW = LSFElementTypeFactory.create("FORM_OPTION_TO_DRAW");
  IElementType FORM_ORDER_BY_LIST = LSFElementTypeFactory.create("FORM_ORDER_BY_LIST");
  IElementType FORM_PIVOT_OPTIONS_DECLARATION = LSFElementTypeFactory.create("FORM_PIVOT_OPTIONS_DECLARATION");
  IElementType FORM_PROPERTIES_LIST = LSFElementTypeFactory.create("FORM_PROPERTIES_LIST");
  IElementType FORM_PROPERTIES_NAMES_DECL_LIST = LSFElementTypeFactory.create("FORM_PROPERTIES_NAMES_DECL_LIST");
  IElementType FORM_PROPERTY_DRAW_ID = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_ID");
  IElementType FORM_PROPERTY_DRAW_MAPPED_DECL = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_MAPPED_DECL");
  IElementType FORM_PROPERTY_DRAW_NAME_DECL = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_NAME_DECL");
  IElementType FORM_PROPERTY_DRAW_OBJECT = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_OBJECT");
  IElementType FORM_PROPERTY_DRAW_PROPERTY_USAGE = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_PROPERTY_USAGE");
  IElementType FORM_PROPERTY_DRAW_USAGE = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_USAGE");
  IElementType FORM_PROPERTY_DRAW_WITH_ORDER = LSFElementTypeFactory.create("FORM_PROPERTY_DRAW_WITH_ORDER");
  IElementType FORM_PROPERTY_NAME = LSFElementTypeFactory.create("FORM_PROPERTY_NAME");
  IElementType FORM_PROPERTY_OBJECT = LSFElementTypeFactory.create("FORM_PROPERTY_OBJECT");
  IElementType FORM_PROPERTY_OPTIONS_LIST = LSFElementTypeFactory.create("FORM_PROPERTY_OPTIONS_LIST");
  IElementType FORM_SESSION_SCOPE_CLAUSE = LSFElementTypeFactory.create("FORM_SESSION_SCOPE_CLAUSE");
  IElementType FORM_SINGLE_ACTION_OBJECT = LSFElementTypeFactory.create("FORM_SINGLE_ACTION_OBJECT");
  IElementType FORM_SINGLE_GROUP_OBJECT_DECLARATION = LSFElementTypeFactory.create("FORM_SINGLE_GROUP_OBJECT_DECLARATION");
  IElementType FORM_STATEMENT = LSFStubElementTypeFactory.create("FORM_STATEMENT");
  IElementType FORM_SUB_REPORT = LSFElementTypeFactory.create("FORM_SUB_REPORT");
  IElementType FORM_TREE_GROUP_OBJECT_DECLARATION = LSFElementTypeFactory.create("FORM_TREE_GROUP_OBJECT_DECLARATION");
  IElementType FORM_TREE_GROUP_OBJECT_LIST = LSFElementTypeFactory.create("FORM_TREE_GROUP_OBJECT_LIST");
  IElementType FORM_TREE_GROUP_OBJECT_OPTIONS = LSFElementTypeFactory.create("FORM_TREE_GROUP_OBJECT_OPTIONS");
  IElementType FORM_USAGE = LSFElementTypeFactory.create("FORM_USAGE");
  IElementType FORM_USAGE_WRAPPER = LSFElementTypeFactory.create("FORM_USAGE_WRAPPER");
  IElementType FOR_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("FOR_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType FOR_ACTION_PROPERTY_MAIN_BODY = LSFElementTypeFactory.create("FOR_ACTION_PROPERTY_MAIN_BODY");
  IElementType FOR_ADD_OBJ_CLAUSE = LSFElementTypeFactory.create("FOR_ADD_OBJ_CLAUSE");
  IElementType GLOBAL_EVENT_STATEMENT = LSFElementTypeFactory.create("GLOBAL_EVENT_STATEMENT");
  IElementType GLOBAL_SINGLE_SELECTOR_TYPE = LSFElementTypeFactory.create("GLOBAL_SINGLE_SELECTOR_TYPE");
  IElementType GROUPING_TYPE = LSFElementTypeFactory.create("GROUPING_TYPE");
  IElementType GROUPING_TYPE_ORDER = LSFElementTypeFactory.create("GROUPING_TYPE_ORDER");
  IElementType GROUP_EXPR_PROPERTY_DEFINITION = LSFElementTypeFactory.create("GROUP_EXPR_PROPERTY_DEFINITION");
  IElementType GROUP_OBJECT_DESTINATION = LSFElementTypeFactory.create("GROUP_OBJECT_DESTINATION");
  IElementType GROUP_OBJECT_ID = LSFElementTypeFactory.create("GROUP_OBJECT_ID");
  IElementType GROUP_OBJECT_REPORT_PATH = LSFElementTypeFactory.create("GROUP_OBJECT_REPORT_PATH");
  IElementType GROUP_OBJECT_SELECTOR = LSFElementTypeFactory.create("GROUP_OBJECT_SELECTOR");
  IElementType GROUP_OBJECT_TREE_SINGLE_SELECTOR_TYPE = LSFElementTypeFactory.create("GROUP_OBJECT_TREE_SINGLE_SELECTOR_TYPE");
  IElementType GROUP_OBJECT_USAGE = LSFElementTypeFactory.create("GROUP_OBJECT_USAGE");
  IElementType GROUP_PROPERTY_BODY = LSFElementTypeFactory.create("GROUP_PROPERTY_BODY");
  IElementType GROUP_PROPERTY_BY = LSFElementTypeFactory.create("GROUP_PROPERTY_BY");
  IElementType GROUP_PROPERTY_DEFINITION = LSFElementTypeFactory.create("GROUP_PROPERTY_DEFINITION");
  IElementType GROUP_SELECTOR = LSFElementTypeFactory.create("GROUP_SELECTOR");
  IElementType GROUP_SINGLE_SELECTOR_TYPE = LSFElementTypeFactory.create("GROUP_SINGLE_SELECTOR_TYPE");
  IElementType GROUP_STATEMENT = LSFStubElementTypeFactory.create("GROUP_STATEMENT");
  IElementType GROUP_USAGE = LSFElementTypeFactory.create("GROUP_USAGE");
  IElementType HAS_HEADER_OPTION = LSFElementTypeFactory.create("HAS_HEADER_OPTION");
  IElementType HEADERS_PROPERTY_USAGE = LSFElementTypeFactory.create("HEADERS_PROPERTY_USAGE");
  IElementType HIDE_EDIT_KEY = LSFElementTypeFactory.create("HIDE_EDIT_KEY");
  IElementType HINT_SETTING = LSFElementTypeFactory.create("HINT_SETTING");
  IElementType IF_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("IF_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType IF_ELSE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("IF_ELSE_PROPERTY_DEFINITION");
  IElementType IF_PE = LSFElementTypeFactory.create("IF_PE");
  IElementType IMAGE_SETTING = LSFElementTypeFactory.create("IMAGE_SETTING");
  IElementType IMPLICIT_INTERFACE_PROPERTY_STATEMENT = LSFStubElementTypeFactory.create("IMPLICIT_INTERFACE_PROPERTY_STATEMENT");
  IElementType IMPLICIT_VALUE_PROPERTY_STATEMENT = LSFStubElementTypeFactory.create("IMPLICIT_VALUE_PROPERTY_STATEMENT");
  IElementType IMPORT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("IMPORT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType IMPORT_ACTION_SOURCE_TYPE = LSFElementTypeFactory.create("IMPORT_ACTION_SOURCE_TYPE");
  IElementType IMPORT_FIELD_ALIAS = LSFElementTypeFactory.create("IMPORT_FIELD_ALIAS");
  IElementType IMPORT_FIELD_DEFINITION = LSFElementTypeFactory.create("IMPORT_FIELD_DEFINITION");
  IElementType IMPORT_FIELD_NAME = LSFElementTypeFactory.create("IMPORT_FIELD_NAME");
  IElementType IMPORT_FORM_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("IMPORT_FORM_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType IMPORT_FORM_HIERARCHICAL_ACTION_SOURCE_TYPE = LSFElementTypeFactory.create("IMPORT_FORM_HIERARCHICAL_ACTION_SOURCE_TYPE");
  IElementType IMPORT_FORM_PLAIN_ACTION_SOURCE_TYPE = LSFElementTypeFactory.create("IMPORT_FORM_PLAIN_ACTION_SOURCE_TYPE");
  IElementType IMPORT_PROPERTY_USAGE = LSFElementTypeFactory.create("IMPORT_PROPERTY_USAGE");
  IElementType IMPORT_PROPERTY_USAGE_WITH_ID = LSFElementTypeFactory.create("IMPORT_PROPERTY_USAGE_WITH_ID");
  IElementType INDEX_SETTING = LSFElementTypeFactory.create("INDEX_SETTING");
  IElementType INDEX_STATEMENT = LSFElementTypeFactory.create("INDEX_STATEMENT");
  IElementType INLINE_OPTION = LSFElementTypeFactory.create("INLINE_OPTION");
  IElementType INPUT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("INPUT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType INSERT_RELATIVE_POSITION_LITERAL = LSFElementTypeFactory.create("INSERT_RELATIVE_POSITION_LITERAL");
  IElementType INTERNAL_ACTION = LSFElementTypeFactory.create("INTERNAL_ACTION");
  IElementType INTERNAL_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("INTERNAL_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType INTERNAL_CLASS = LSFElementTypeFactory.create("INTERNAL_CLASS");
  IElementType INTERNAL_FORM_OBJECT = LSFElementTypeFactory.create("INTERNAL_FORM_OBJECT");
  IElementType INTERNAL_MODULE = LSFElementTypeFactory.create("INTERNAL_MODULE");
  IElementType INTERNAL_PROPERTY = LSFElementTypeFactory.create("INTERNAL_PROPERTY");
  IElementType INTERNAL_PROPERTY_DRAW = LSFElementTypeFactory.create("INTERNAL_PROPERTY_DRAW");
  IElementType INTERNAL_STATEMENT = LSFElementTypeFactory.create("INTERNAL_STATEMENT");
  IElementType INT_LITERAL = LSFElementTypeFactory.create("INT_LITERAL");
  IElementType JAVA_CLASS_STRING_USAGE = LSFElementTypeFactory.create("JAVA_CLASS_STRING_USAGE");
  IElementType JOIN_PROPERTY_DEFINITION = LSFElementTypeFactory.create("JOIN_PROPERTY_DEFINITION");
  IElementType JSON_FORM_PROPERTY_DEFINITION = LSFElementTypeFactory.create("JSON_FORM_PROPERTY_DEFINITION");
  IElementType JSON_PROPERTY_DEFINITION = LSFElementTypeFactory.create("JSON_PROPERTY_DEFINITION");
  IElementType JS_STRING_USAGE = LSFElementTypeFactory.create("JS_STRING_USAGE");
  IElementType KEY_PRESSED_EVENT_TYPE = LSFElementTypeFactory.create("KEY_PRESSED_EVENT_TYPE");
  IElementType LAZY_META_DECL_STATEMENT = LSFElementTypeFactory.create("LAZY_META_DECL_STATEMENT");
  IElementType LAZY_META_STATEMENT = LSFElementTypeFactory.create("LAZY_META_STATEMENT");
  IElementType LAZY_SCRIPT_STATEMENT = LSFElementTypeFactory.create("LAZY_SCRIPT_STATEMENT");
  IElementType LIKE_PE = LSFElementTypeFactory.create("LIKE_PE");
  IElementType LIST_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("LIST_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType LIST_FORM_DECLARATION = LSFElementTypeFactory.create("LIST_FORM_DECLARATION");
  IElementType LIST_VIEW_TYPE = LSFElementTypeFactory.create("LIST_VIEW_TYPE");
  IElementType LIST_WHERE_INPUT_PROPS = LSFElementTypeFactory.create("LIST_WHERE_INPUT_PROPS");
  IElementType LITERAL = LSFElementTypeFactory.create("LITERAL");
  IElementType LOCALIZED_STRING_LITERAL = LSFElementTypeFactory.create("LOCALIZED_STRING_LITERAL");
  IElementType LOCAL_DATA_PROPERTY_DEFINITION = LSFElementTypeFactory.create("LOCAL_DATA_PROPERTY_DEFINITION");
  IElementType LOCAL_PROPERTY_DECLARATION_NAME = LSFElementTypeFactory.create("LOCAL_PROPERTY_DECLARATION_NAME");
  IElementType LOGGABLE_SETTING = LSFElementTypeFactory.create("LOGGABLE_SETTING");
  IElementType LOGGABLE_STATEMENT = LSFElementTypeFactory.create("LOGGABLE_STATEMENT");
  IElementType MANAGE_SESSION_CLAUSE = LSFElementTypeFactory.create("MANAGE_SESSION_CLAUSE");
  IElementType MAPPED_ACTION_CLASS_PARAM_DECLARE = LSFElementTypeFactory.create("MAPPED_ACTION_CLASS_PARAM_DECLARE");
  IElementType MAPPED_PROPERTY_CLASS_PARAM_DECLARE = LSFElementTypeFactory.create("MAPPED_PROPERTY_CLASS_PARAM_DECLARE");
  IElementType MAPPED_PROPERTY_EXPR_PARAM = LSFElementTypeFactory.create("MAPPED_PROPERTY_EXPR_PARAM");
  IElementType MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM = LSFElementTypeFactory.create("MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM");
  IElementType MAP_OPTIONS = LSFElementTypeFactory.create("MAP_OPTIONS");
  IElementType MAX_PROPERTY_DEFINITION = LSFElementTypeFactory.create("MAX_PROPERTY_DEFINITION");
  IElementType MESSAGE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("MESSAGE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType MESSAGE_PROPERTY_EXPRESSION = LSFElementTypeFactory.create("MESSAGE_PROPERTY_EXPRESSION");
  IElementType METACODE_USAGE = LSFElementTypeFactory.create("METACODE_USAGE");
  IElementType META_CODE_BODY = LSFElementTypeFactory.create("META_CODE_BODY");
  IElementType META_CODE_BODY_LEFT_BRACE = LSFElementTypeFactory.create("META_CODE_BODY_LEFT_BRACE");
  IElementType META_CODE_BODY_RIGHT_BRACE = LSFElementTypeFactory.create("META_CODE_BODY_RIGHT_BRACE");
  IElementType META_CODE_DECLARATION_STATEMENT = LSFStubElementTypeFactory.create("META_CODE_DECLARATION_STATEMENT");
  IElementType META_CODE_DECL_BODY = LSFElementTypeFactory.create("META_CODE_DECL_BODY");
  IElementType META_CODE_ID = LSFElementTypeFactory.create("META_CODE_ID");
  IElementType META_CODE_ID_LIST = LSFElementTypeFactory.create("META_CODE_ID_LIST");
  IElementType META_CODE_LITERAL = LSFElementTypeFactory.create("META_CODE_LITERAL");
  IElementType META_CODE_STATEMENT = LSFElementTypeFactory.create("META_CODE_STATEMENT");
  IElementType META_CODE_STATEMENT_HEADER = LSFElementTypeFactory.create("META_CODE_STATEMENT_HEADER");
  IElementType META_CODE_STATEMENT_SEMI = LSFElementTypeFactory.create("META_CODE_STATEMENT_SEMI");
  IElementType META_CODE_STATEMENT_TYPE = LSFElementTypeFactory.create("META_CODE_STATEMENT_TYPE");
  IElementType META_CODE_STRING_LITERAL = LSFElementTypeFactory.create("META_CODE_STRING_LITERAL");
  IElementType META_DECL_ID = LSFElementTypeFactory.create("META_DECL_ID");
  IElementType META_DECL_ID_LIST = LSFElementTypeFactory.create("META_DECL_ID_LIST");
  IElementType MODULE_HEADER = LSFStubElementTypeFactory.create("MODULE_HEADER");
  IElementType MODULE_NAME = LSFElementTypeFactory.create("MODULE_NAME");
  IElementType MODULE_NAME_STATEMENT = LSFElementTypeFactory.create("MODULE_NAME_STATEMENT");
  IElementType MODULE_USAGE = LSFElementTypeFactory.create("MODULE_USAGE");
  IElementType MOVE_COMPONENT_STATEMENT = LSFElementTypeFactory.create("MOVE_COMPONENT_STATEMENT");
  IElementType MOVE_NAVIGATOR_ELEMENT_STATEMENT = LSFElementTypeFactory.create("MOVE_NAVIGATOR_ELEMENT_STATEMENT");
  IElementType MULTIPLICATIVE_PE = LSFElementTypeFactory.create("MULTIPLICATIVE_PE");
  IElementType MULTI_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("MULTI_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType MULTI_PROPERTY_DEFINITION = LSFElementTypeFactory.create("MULTI_PROPERTY_DEFINITION");
  IElementType NAMESPACE_NAME = LSFStubElementTypeFactory.create("NAMESPACE_NAME");
  IElementType NAMESPACE_USAGE = LSFElementTypeFactory.create("NAMESPACE_USAGE");
  IElementType NATIVE_LITERAL = LSFElementTypeFactory.create("NATIVE_LITERAL");
  IElementType NATIVE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("NATIVE_PROPERTY_DEFINITION");
  IElementType NAVIGATOR_ELEMENT_BODY_STATEMENT = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_BODY_STATEMENT");
  IElementType NAVIGATOR_ELEMENT_DESCRIPTION = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_DESCRIPTION");
  IElementType NAVIGATOR_ELEMENT_INSERT_POSITION = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_INSERT_POSITION");
  IElementType NAVIGATOR_ELEMENT_OPTIONS = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_OPTIONS");
  IElementType NAVIGATOR_ELEMENT_SELECTOR = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_SELECTOR");
  IElementType NAVIGATOR_ELEMENT_STATEMENT_BODY = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_STATEMENT_BODY");
  IElementType NAVIGATOR_ELEMENT_USAGE = LSFElementTypeFactory.create("NAVIGATOR_ELEMENT_USAGE");
  IElementType NAVIGATOR_STATEMENT = LSFElementTypeFactory.create("NAVIGATOR_STATEMENT");
  IElementType NESTED_LOCAL_MODIFIER = LSFElementTypeFactory.create("NESTED_LOCAL_MODIFIER");
  IElementType NESTED_SESSION_OPERATOR = LSFElementTypeFactory.create("NESTED_SESSION_OPERATOR");
  IElementType NEW_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("NEW_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType NEW_COMPONENT_STATEMENT = LSFElementTypeFactory.create("NEW_COMPONENT_STATEMENT");
  IElementType NEW_EXECUTOR_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("NEW_EXECUTOR_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType NEW_NAVIGATOR_ELEMENT_STATEMENT = LSFStubElementTypeFactory.create("NEW_NAVIGATOR_ELEMENT_STATEMENT");
  IElementType NEW_SESSION_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("NEW_SESSION_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType NEW_SESSION_OPERATOR = LSFElementTypeFactory.create("NEW_SESSION_OPERATOR");
  IElementType NEW_THREAD_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("NEW_THREAD_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType NEW_WHERE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("NEW_WHERE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType NE_STUB = LSFElementTypeFactory.create("NE_STUB");
  IElementType NON_EMPTY_ACTION_PDB_LIST = LSFElementTypeFactory.create("NON_EMPTY_ACTION_PDB_LIST");
  IElementType NON_EMPTY_ALIASED_PROPERTY_EXPRESSION_LIST = LSFElementTypeFactory.create("NON_EMPTY_ALIASED_PROPERTY_EXPRESSION_LIST");
  IElementType NON_EMPTY_CLASS_NAME_LIST = LSFElementTypeFactory.create("NON_EMPTY_CLASS_NAME_LIST");
  IElementType NON_EMPTY_CLASS_PARAM_DECLARE_LIST = LSFElementTypeFactory.create("NON_EMPTY_CLASS_PARAM_DECLARE_LIST");
  IElementType NON_EMPTY_CUSTOM_CLASS_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_CUSTOM_CLASS_USAGE_LIST");
  IElementType NON_EMPTY_EXPLICIT_PROP_CLASS_LIST = LSFElementTypeFactory.create("NON_EMPTY_EXPLICIT_PROP_CLASS_LIST");
  IElementType NON_EMPTY_FORM_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_FORM_USAGE_LIST");
  IElementType NON_EMPTY_GROUP_OBJECT_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_GROUP_OBJECT_USAGE_LIST");
  IElementType NON_EMPTY_IMPORT_FIELD_DEFINITIONS = LSFElementTypeFactory.create("NON_EMPTY_IMPORT_FIELD_DEFINITIONS");
  IElementType NON_EMPTY_IMPORT_PROPERTY_USAGE_LIST_WITH_IDS = LSFElementTypeFactory.create("NON_EMPTY_IMPORT_PROPERTY_USAGE_LIST_WITH_IDS");
  IElementType NON_EMPTY_LOCAL_PROPERTY_DECLARATION_NAME_LIST = LSFElementTypeFactory.create("NON_EMPTY_LOCAL_PROPERTY_DECLARATION_NAME_LIST");
  IElementType NON_EMPTY_MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM_LIST = LSFElementTypeFactory.create("NON_EMPTY_MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM_LIST");
  IElementType NON_EMPTY_MODULE_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_MODULE_USAGE_LIST");
  IElementType NON_EMPTY_NAMESPACE_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_NAMESPACE_USAGE_LIST");
  IElementType NON_EMPTY_NO_CONTEXT_ACTION_OR_PROPERTY_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_NO_CONTEXT_ACTION_OR_PROPERTY_USAGE_LIST");
  IElementType NON_EMPTY_NO_CONTEXT_ACTION_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_NO_CONTEXT_ACTION_USAGE_LIST");
  IElementType NON_EMPTY_NO_CONTEXT_PROPERTY_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_NO_CONTEXT_PROPERTY_USAGE_LIST");
  IElementType NON_EMPTY_NO_PARAMS_PROPERTY_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_NO_PARAMS_PROPERTY_USAGE_LIST");
  IElementType NON_EMPTY_OBJECT_USAGE_LIST = LSFElementTypeFactory.create("NON_EMPTY_OBJECT_USAGE_LIST");
  IElementType NON_EMPTY_PARAMETER_OR_EXPRESSION_LIST = LSFElementTypeFactory.create("NON_EMPTY_PARAMETER_OR_EXPRESSION_LIST");
  IElementType NON_EMPTY_PROPERTY_EXPRESSION_LIST = LSFElementTypeFactory.create("NON_EMPTY_PROPERTY_EXPRESSION_LIST");
  IElementType NON_EMPTY_PROPERTY_OPTIONS = LSFElementTypeFactory.create("NON_EMPTY_PROPERTY_OPTIONS");
  IElementType NON_EMPTY_STATIC_OBJECT_DECL_LIST = LSFElementTypeFactory.create("NON_EMPTY_STATIC_OBJECT_DECL_LIST");
  IElementType NOT_NULL_SETTING = LSFElementTypeFactory.create("NOT_NULL_SETTING");
  IElementType NOT_PE = LSFElementTypeFactory.create("NOT_PE");
  IElementType NO_CANCEL_CLAUSE = LSFElementTypeFactory.create("NO_CANCEL_CLAUSE");
  IElementType NO_CONTEXT_ACTION_OR_PROPERTY_USAGE = LSFElementTypeFactory.create("NO_CONTEXT_ACTION_OR_PROPERTY_USAGE");
  IElementType NO_CONTEXT_ACTION_USAGE = LSFElementTypeFactory.create("NO_CONTEXT_ACTION_USAGE");
  IElementType NO_CONTEXT_PROPERTY_USAGE = LSFElementTypeFactory.create("NO_CONTEXT_PROPERTY_USAGE");
  IElementType NO_DEFAULT = LSFElementTypeFactory.create("NO_DEFAULT");
  IElementType NO_ESCAPE_OPTION = LSFElementTypeFactory.create("NO_ESCAPE_OPTION");
  IElementType NO_PARAMS_ACTION_USAGE = LSFElementTypeFactory.create("NO_PARAMS_ACTION_USAGE");
  IElementType NO_PARAMS_PROPERTY_USAGE = LSFElementTypeFactory.create("NO_PARAMS_PROPERTY_USAGE");
  IElementType NULL_LITERAL = LSFElementTypeFactory.create("NULL_LITERAL");
  IElementType NULL_OPTION = LSFElementTypeFactory.create("NULL_OPTION");
  IElementType OBJECT_EXPR = LSFElementTypeFactory.create("OBJECT_EXPR");
  IElementType OBJECT_ID = LSFElementTypeFactory.create("OBJECT_ID");
  IElementType OBJECT_INPUT_PROPS = LSFElementTypeFactory.create("OBJECT_INPUT_PROPS");
  IElementType OBJECT_IN_PROPS = LSFElementTypeFactory.create("OBJECT_IN_PROPS");
  IElementType OBJECT_LIST_INPUT_PROPS = LSFElementTypeFactory.create("OBJECT_LIST_INPUT_PROPS");
  IElementType OBJECT_USAGE = LSFElementTypeFactory.create("OBJECT_USAGE");
  IElementType OBJECT_USAGE_LIST = LSFElementTypeFactory.create("OBJECT_USAGE_LIST");
  IElementType ON_EDIT_EVENT_SETTING = LSFElementTypeFactory.create("ON_EDIT_EVENT_SETTING");
  IElementType ORDER_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("ORDER_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType ORDER_PROPERTY_BY = LSFElementTypeFactory.create("ORDER_PROPERTY_BY");
  IElementType ORIENTATION = LSFElementTypeFactory.create("ORIENTATION");
  IElementType OR_PE = LSFElementTypeFactory.create("OR_PE");
  IElementType OVERRIDE_ACTION_STATEMENT = LSFElementTypeFactory.create("OVERRIDE_ACTION_STATEMENT");
  IElementType OVERRIDE_OPERATOR = LSFElementTypeFactory.create("OVERRIDE_OPERATOR");
  IElementType OVERRIDE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("OVERRIDE_PROPERTY_DEFINITION");
  IElementType OVERRIDE_PROPERTY_STATEMENT = LSFElementTypeFactory.create("OVERRIDE_PROPERTY_STATEMENT");
  IElementType PARAMETER_OR_EXPRESSION = LSFElementTypeFactory.create("PARAMETER_OR_EXPRESSION");
  IElementType PARAMETER_OR_EXPRESSION_LIST = LSFElementTypeFactory.create("PARAMETER_OR_EXPRESSION_LIST");
  IElementType PARAM_DECLARE = LSFElementTypeFactory.create("PARAM_DECLARE");
  IElementType PARTITION_PROPERTY_BY = LSFElementTypeFactory.create("PARTITION_PROPERTY_BY");
  IElementType PARTITION_PROPERTY_DEFINITION = LSFElementTypeFactory.create("PARTITION_PROPERTY_DEFINITION");
  IElementType PATTERN_SETTING = LSFElementTypeFactory.create("PATTERN_SETTING");
  IElementType PERSISTENT_SETTING = LSFElementTypeFactory.create("PERSISTENT_SETTING");
  IElementType PIVOT_OPTIONS = LSFElementTypeFactory.create("PIVOT_OPTIONS");
  IElementType PIVOT_PROPERTY_DRAW_LIST = LSFElementTypeFactory.create("PIVOT_PROPERTY_DRAW_LIST");
  IElementType POSTFIX_UNARY_PE = LSFElementTypeFactory.create("POSTFIX_UNARY_PE");
  IElementType PREDEFINED_ADD_PROPERTY_NAME = LSFElementTypeFactory.create("PREDEFINED_ADD_PROPERTY_NAME");
  IElementType PREDEFINED_FORM_PROPERTY_NAME = LSFElementTypeFactory.create("PREDEFINED_FORM_PROPERTY_NAME");
  IElementType PREREAD_SETTING = LSFElementTypeFactory.create("PREREAD_SETTING");
  IElementType PRINT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("PRINT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType PRIORITY_LIST = LSFElementTypeFactory.create("PRIORITY_LIST");
  IElementType PROPERTY_CALC_STATEMENT = LSFElementTypeFactory.create("PROPERTY_CALC_STATEMENT");
  IElementType PROPERTY_CUSTOM_VIEW = LSFElementTypeFactory.create("PROPERTY_CUSTOM_VIEW");
  IElementType PROPERTY_DECLARATION = LSFElementTypeFactory.create("PROPERTY_DECLARATION");
  IElementType PROPERTY_DECL_PARAMS = LSFElementTypeFactory.create("PROPERTY_DECL_PARAMS");
  IElementType PROPERTY_ELSE_ACTION_USAGE = LSFElementTypeFactory.create("PROPERTY_ELSE_ACTION_USAGE");
  IElementType PROPERTY_EXPRESSION = LSFElementTypeFactory.create("PROPERTY_EXPRESSION");
  IElementType PROPERTY_EXPRESSION_LIST = LSFElementTypeFactory.create("PROPERTY_EXPRESSION_LIST");
  IElementType PROPERTY_EXPRESSION_WITH_ORDER = LSFElementTypeFactory.create("PROPERTY_EXPRESSION_WITH_ORDER");
  IElementType PROPERTY_EXPR_OBJECT = LSFElementTypeFactory.create("PROPERTY_EXPR_OBJECT");
  IElementType PROPERTY_SELECTOR = LSFElementTypeFactory.create("PROPERTY_SELECTOR");
  IElementType PROPERTY_STATEMENT = LSFStubElementTypeFactory.create("PROPERTY_STATEMENT");
  IElementType PROPERTY_USAGE = LSFElementTypeFactory.create("PROPERTY_USAGE");
  IElementType PROPERTY_USAGE_WRAPPER = LSFElementTypeFactory.create("PROPERTY_USAGE_WRAPPER");
  IElementType READ_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("READ_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType READ_FILTER_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("READ_FILTER_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType READ_ORDER_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("READ_ORDER_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType RECALCULATE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("RECALCULATE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType RECURSIVE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("RECURSIVE_PROPERTY_DEFINITION");
  IElementType REFLECTION_PROPERTY_DEFINITION = LSFElementTypeFactory.create("REFLECTION_PROPERTY_DEFINITION");
  IElementType REFLECTION_PROPERTY_TYPE = LSFElementTypeFactory.create("REFLECTION_PROPERTY_TYPE");
  IElementType REGEXP_SETTING = LSFElementTypeFactory.create("REGEXP_SETTING");
  IElementType REGULAR_FILTER_DECLARATION = LSFElementTypeFactory.create("REGULAR_FILTER_DECLARATION");
  IElementType RELATIONAL_PE = LSFElementTypeFactory.create("RELATIONAL_PE");
  IElementType REMOVE_COMPONENT_STATEMENT = LSFElementTypeFactory.create("REMOVE_COMPONENT_STATEMENT");
  IElementType RENDER_PROPERTY_CUSTOM_VIEW = LSFElementTypeFactory.create("RENDER_PROPERTY_CUSTOM_VIEW");
  IElementType REPORT_FILES_DECLARATION = LSFElementTypeFactory.create("REPORT_FILES_DECLARATION");
  IElementType REPORT_SETTING = LSFElementTypeFactory.create("REPORT_SETTING");
  IElementType REQUEST_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("REQUEST_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType REQUIRE_LIST = LSFElementTypeFactory.create("REQUIRE_LIST");
  IElementType RETURN_ACTION_OPERATOR = LSFElementTypeFactory.create("RETURN_ACTION_OPERATOR");
  IElementType ROUND_PROPERTY_DEFINITION = LSFElementTypeFactory.create("ROUND_PROPERTY_DEFINITION");
  IElementType SCRIPT_STATEMENT = LSFElementTypeFactory.create("SCRIPT_STATEMENT");
  IElementType SEEK_OBJECT_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("SEEK_OBJECT_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType SELECT_TOP = LSFElementTypeFactory.create("SELECT_TOP");
  IElementType SELECT_TOPS = LSFElementTypeFactory.create("SELECT_TOPS");
  IElementType SESSION_PROPERTY_DEFINITION = LSFElementTypeFactory.create("SESSION_PROPERTY_DEFINITION");
  IElementType SESSION_PROPERTY_TYPE = LSFElementTypeFactory.create("SESSION_PROPERTY_TYPE");
  IElementType SETUP_COMPONENT_STATEMENT = LSFElementTypeFactory.create("SETUP_COMPONENT_STATEMENT");
  IElementType SETUP_NAVIGATOR_ELEMENT_STATEMENT = LSFElementTypeFactory.create("SETUP_NAVIGATOR_ELEMENT_STATEMENT");
  IElementType SET_OBJECT_PROPERTY_STATEMENT = LSFElementTypeFactory.create("SET_OBJECT_PROPERTY_STATEMENT");
  IElementType SHEET_EXPRESSION = LSFElementTypeFactory.create("SHEET_EXPRESSION");
  IElementType SHOW_DEP_STATEMENT = LSFElementTypeFactory.create("SHOW_DEP_STATEMENT");
  IElementType SIGNATURE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("SIGNATURE_PROPERTY_DEFINITION");
  IElementType SIMPLE_ELEMENT_DESCRIPTION = LSFElementTypeFactory.create("SIMPLE_ELEMENT_DESCRIPTION");
  IElementType SIMPLE_NAME = LSFElementTypeFactory.create("SIMPLE_NAME");
  IElementType SIMPLE_NAME_WITH_CAPTION = LSFElementTypeFactory.create("SIMPLE_NAME_WITH_CAPTION");
  IElementType SIMPLE_PE = LSFElementTypeFactory.create("SIMPLE_PE");
  IElementType STATIC_DESTINATION = LSFElementTypeFactory.create("STATIC_DESTINATION");
  IElementType STATIC_OBJECT_DECL = LSFElementTypeFactory.create("STATIC_OBJECT_DECL");
  IElementType STATIC_OBJECT_DECL_LIST = LSFElementTypeFactory.create("STATIC_OBJECT_DECL_LIST");
  IElementType STATIC_OBJECT_ID = LSFElementTypeFactory.create("STATIC_OBJECT_ID");
  IElementType STATIC_OBJECT_IMAGE = LSFElementTypeFactory.create("STATIC_OBJECT_IMAGE");
  IElementType STATIC_RELATIVE_POSITION = LSFElementTypeFactory.create("STATIC_RELATIVE_POSITION");
  IElementType STICKY_OPTION = LSFElementTypeFactory.create("STICKY_OPTION");
  IElementType STRING_LITERAL = LSFElementTypeFactory.create("STRING_LITERAL");
  IElementType STRUCT_CREATION_PROPERTY_DEFINITION = LSFElementTypeFactory.create("STRUCT_CREATION_PROPERTY_DEFINITION");
  IElementType STUB_STATEMENT = LSFElementTypeFactory.create("STUB_STATEMENT");
  IElementType SYNC_TYPE_LITERAL = LSFElementTypeFactory.create("SYNC_TYPE_LITERAL");
  IElementType TABLE_STATEMENT = LSFStubElementTypeFactory.create("TABLE_STATEMENT");
  IElementType TABLE_USAGE = LSFElementTypeFactory.create("TABLE_USAGE");
  IElementType TBOOLEAN_LITERAL = LSFElementTypeFactory.create("TBOOLEAN_LITERAL");
  IElementType TERMINAL_FLOW_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("TERMINAL_FLOW_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType TIME_LITERAL = LSFElementTypeFactory.create("TIME_LITERAL");
  IElementType TREE_GROUP_DECLARATION = LSFElementTypeFactory.create("TREE_GROUP_DECLARATION");
  IElementType TREE_GROUP_PARENT_DECLARATION = LSFElementTypeFactory.create("TREE_GROUP_PARENT_DECLARATION");
  IElementType TREE_GROUP_SELECTOR = LSFElementTypeFactory.create("TREE_GROUP_SELECTOR");
  IElementType TREE_GROUP_USAGE = LSFElementTypeFactory.create("TREE_GROUP_USAGE");
  IElementType TRY_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("TRY_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType TYPE_IS = LSFElementTypeFactory.create("TYPE_IS");
  IElementType TYPE_MULT = LSFElementTypeFactory.create("TYPE_MULT");
  IElementType TYPE_PROPERTY_DEFINITION = LSFElementTypeFactory.create("TYPE_PROPERTY_DEFINITION");
  IElementType UDOUBLE_LITERAL = LSFElementTypeFactory.create("UDOUBLE_LITERAL");
  IElementType UINT_LITERAL = LSFElementTypeFactory.create("UINT_LITERAL");
  IElementType ULONG_LITERAL = LSFElementTypeFactory.create("ULONG_LITERAL");
  IElementType UNARY_MINUS_PE = LSFElementTypeFactory.create("UNARY_MINUS_PE");
  IElementType UNTYPED_PARAM_DECLARE = LSFElementTypeFactory.create("UNTYPED_PARAM_DECLARE");
  IElementType UNUMERIC_LITERAL = LSFElementTypeFactory.create("UNUMERIC_LITERAL");
  IElementType USER_FILTERS_DECLARATION = LSFElementTypeFactory.create("USER_FILTERS_DECLARATION");
  IElementType VIEW_TYPE_SETTING = LSFElementTypeFactory.create("VIEW_TYPE_SETTING");
  IElementType WHERE_PROPERTY_EXPRESSION = LSFElementTypeFactory.create("WHERE_PROPERTY_EXPRESSION");
  IElementType WHILE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("WHILE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType WINDOW_CREATE_STATEMENT = LSFStubElementTypeFactory.create("WINDOW_CREATE_STATEMENT");
  IElementType WINDOW_HIDE_STATEMENT = LSFElementTypeFactory.create("WINDOW_HIDE_STATEMENT");
  IElementType WINDOW_OPTIONS = LSFElementTypeFactory.create("WINDOW_OPTIONS");
  IElementType WINDOW_STATEMENT = LSFElementTypeFactory.create("WINDOW_STATEMENT");
  IElementType WINDOW_TYPE = LSFElementTypeFactory.create("WINDOW_TYPE");
  IElementType WINDOW_TYPE_LITERAL = LSFElementTypeFactory.create("WINDOW_TYPE_LITERAL");
  IElementType WINDOW_USAGE = LSFElementTypeFactory.create("WINDOW_USAGE");
  IElementType WRITE_ACTION_PROPERTY_DEFINITION_BODY = LSFElementTypeFactory.create("WRITE_ACTION_PROPERTY_DEFINITION_BODY");
  IElementType WRITE_WHEN_STATEMENT = LSFElementTypeFactory.create("WRITE_WHEN_STATEMENT");
  IElementType XOR_PE = LSFElementTypeFactory.create("XOR_PE");

  IElementType ABSTRACT = new LSFTokenType("ABSTRACT");
  IElementType ACTION = new LSFTokenType("ACTION");
  IElementType ACTIONS = new LSFTokenType("ACTIONS");
  IElementType ACTIVATE = new LSFTokenType("ACTIVATE");
  IElementType ACTIVE = new LSFTokenType("ACTIVE");
  IElementType ADDOR_OPERAND = new LSFTokenType("ADDOR_OPERAND");
  IElementType AFTER = new LSFTokenType("AFTER");
  IElementType AGGR = new LSFTokenType("AGGR");
  IElementType ALL = new LSFTokenType("ALL");
  IElementType AND = new LSFTokenType("AND");
  IElementType APPEND = new LSFTokenType("APPEND");
  IElementType APPLY = new LSFTokenType("APPLY");
  IElementType ARROW = new LSFTokenType("ARROW");
  IElementType AS = new LSFTokenType("AS");
  IElementType ASK = new LSFTokenType("ASK");
  IElementType ASON = new LSFTokenType("ASON");
  IElementType ASYNCUPDATE = new LSFTokenType("ASYNCUPDATE");
  IElementType ATSIGN = new LSFTokenType("ATSIGN");
  IElementType ATSIGN2 = new LSFTokenType("ATSIGN2");
  IElementType ATTACH = new LSFTokenType("ATTACH");
  IElementType ATTR = new LSFTokenType("ATTR");
  IElementType AUTO = new LSFTokenType("AUTO");
  IElementType AUTOREFRESH = new LSFTokenType("AUTOREFRESH");
  IElementType AUTOSET = new LSFTokenType("AUTOSET");
  IElementType BACKGROUND = new LSFTokenType("BACKGROUND");
  IElementType BCC = new LSFTokenType("BCC");
  IElementType BEFORE = new LSFTokenType("BEFORE");
  IElementType BODY = new LSFTokenType("BODY");
  IElementType BODYPARAMHEADERS = new LSFTokenType("BODYPARAMHEADERS");
  IElementType BODYPARAMNAMES = new LSFTokenType("BODYPARAMNAMES");
  IElementType BODYURL = new LSFTokenType("BODYURL");
  IElementType BOTTOM = new LSFTokenType("BOTTOM");
  IElementType BOX = new LSFTokenType("BOX");
  IElementType BREAK = new LSFTokenType("BREAK");
  IElementType BY = new LSFTokenType("BY");
  IElementType CALENDAR = new LSFTokenType("CALENDAR");
  IElementType CANCEL = new LSFTokenType("CANCEL");
  IElementType CANONICALNAME = new LSFTokenType("CANONICALNAME");
  IElementType CASE = new LSFTokenType("CASE");
  IElementType CATCH = new LSFTokenType("CATCH");
  IElementType CC = new LSFTokenType("CC");
  IElementType CENTER = new LSFTokenType("CENTER");
  IElementType CHANGE = new LSFTokenType("CHANGE");
  IElementType CHANGEABLE = new LSFTokenType("CHANGEABLE");
  IElementType CHANGECLASS = new LSFTokenType("CHANGECLASS");
  IElementType CHANGED = new LSFTokenType("CHANGED");
  IElementType CHANGEKEY = new LSFTokenType("CHANGEKEY");
  IElementType CHANGEMOUSE = new LSFTokenType("CHANGEMOUSE");
  IElementType CHANGEWYS = new LSFTokenType("CHANGEWYS");
  IElementType CHARSET = new LSFTokenType("CHARSET");
  IElementType CHARWIDTH = new LSFTokenType("CHARWIDTH");
  IElementType CHECK = new LSFTokenType("CHECK");
  IElementType CHECKED = new LSFTokenType("CHECKED");
  IElementType CLASS = new LSFTokenType("CLASS");
  IElementType CLASSCHOOSER = new LSFTokenType("CLASSCHOOSER");
  IElementType CLASSES = new LSFTokenType("CLASSES");
  IElementType CLIENT = new LSFTokenType("CLIENT");
  IElementType CLOSE = new LSFTokenType("CLOSE");
  IElementType COLLAPSE = new LSFTokenType("COLLAPSE");
  IElementType COLON = new LSFTokenType("COLON");
  IElementType COLUMN = new LSFTokenType("COLUMN");
  IElementType COLUMNS = new LSFTokenType("COLUMNS");
  IElementType COMMA = new LSFTokenType("COMMA");
  IElementType COMMENTS = new LSFTokenType("COMMENTS");
  IElementType COMPLEX = new LSFTokenType("COMPLEX");
  IElementType CONCAT = new LSFTokenType("CONCAT");
  IElementType CONFIG = new LSFTokenType("CONFIG");
  IElementType CONFIRM = new LSFTokenType("CONFIRM");
  IElementType CONNECTION = new LSFTokenType("CONNECTION");
  IElementType CONSTRAINT = new LSFTokenType("CONSTRAINT");
  IElementType CONSTRAINTFILTER = new LSFTokenType("CONSTRAINTFILTER");
  IElementType CONTAINER = new LSFTokenType("CONTAINER");
  IElementType CONTAINERH = new LSFTokenType("CONTAINERH");
  IElementType CONTAINERV = new LSFTokenType("CONTAINERV");
  IElementType CONTEXTMENU = new LSFTokenType("CONTEXTMENU");
  IElementType CONTINUE = new LSFTokenType("CONTINUE");
  IElementType COOKIES = new LSFTokenType("COOKIES");
  IElementType COOKIESTO = new LSFTokenType("COOKIESTO");
  IElementType CSV = new LSFTokenType("CSV");
  IElementType CUSTOM = new LSFTokenType("CUSTOM");
  IElementType CYCLES = new LSFTokenType("CYCLES");
  IElementType DATA = new LSFTokenType("DATA");
  IElementType DB = new LSFTokenType("DB");
  IElementType DBF = new LSFTokenType("DBF");
  IElementType DEFAULT = new LSFTokenType("DEFAULT");
  IElementType DEFAULTCOMPARE = new LSFTokenType("DEFAULTCOMPARE");
  IElementType DELAY = new LSFTokenType("DELAY");
  IElementType DELETE = new LSFTokenType("DELETE");
  IElementType DESC = new LSFTokenType("DESC");
  IElementType DESIGN = new LSFTokenType("DESIGN");
  IElementType DIALOG = new LSFTokenType("DIALOG");
  IElementType DISABLEIF = new LSFTokenType("DISABLEIF");
  IElementType DIV = new LSFTokenType("DIV");
  IElementType DO = new LSFTokenType("DO");
  IElementType DOC = new LSFTokenType("DOC");
  IElementType DOCKED = new LSFTokenType("DOCKED");
  IElementType DOCX = new LSFTokenType("DOCX");
  IElementType DOLLAR = new LSFTokenType("DOLLAR");
  IElementType DOWN = new LSFTokenType("DOWN");
  IElementType DRAW = new LSFTokenType("DRAW");
  IElementType DRAWROOT = new LSFTokenType("DRAWROOT");
  IElementType DRILLDOWN = new LSFTokenType("DRILLDOWN");
  IElementType DROP = new LSFTokenType("DROP");
  IElementType DROPCHANGED = new LSFTokenType("DROPCHANGED");
  IElementType DROPPED = new LSFTokenType("DROPPED");
  IElementType ECHO = new LSFTokenType("ECHO");
  IElementType EDIT = new LSFTokenType("EDIT");
  IElementType ELSE = new LSFTokenType("ELSE");
  IElementType EMAIL = new LSFTokenType("EMAIL");
  IElementType EMBEDDED = new LSFTokenType("EMBEDDED");
  IElementType END = new LSFTokenType("END");
  IElementType EQUAL = new LSFTokenType("EQUAL");
  IElementType EQUALS = new LSFTokenType("EQUALS");
  IElementType EQ_OPERAND = new LSFTokenType("EQ_OPERAND");
  IElementType ESCAPE = new LSFTokenType("ESCAPE");
  IElementType EVAL = new LSFTokenType("EVAL");
  IElementType EVENTID = new LSFTokenType("EVENTID");
  IElementType EVENTS = new LSFTokenType("EVENTS");
  IElementType EXCEPTLAST = new LSFTokenType("EXCEPTLAST");
  IElementType EXCLUSIVE = new LSFTokenType("EXCLUSIVE");
  IElementType EXEC = new LSFTokenType("EXEC");
  IElementType EXPAND = new LSFTokenType("EXPAND");
  IElementType EXPORT = new LSFTokenType("EXPORT");
  IElementType EXTEND = new LSFTokenType("EXTEND");
  IElementType EXTERNAL = new LSFTokenType("EXTERNAL");
  IElementType EXTID = new LSFTokenType("EXTID");
  IElementType EXTKEY = new LSFTokenType("EXTKEY");
  IElementType EXTNULL = new LSFTokenType("EXTNULL");
  IElementType FIELDS = new LSFTokenType("FIELDS");
  IElementType FILTER = new LSFTokenType("FILTER");
  IElementType FILTERBOX = new LSFTokenType("FILTERBOX");
  IElementType FILTERCONTROLS = new LSFTokenType("FILTERCONTROLS");
  IElementType FILTERGROUP = new LSFTokenType("FILTERGROUP");
  IElementType FILTERGROUPS = new LSFTokenType("FILTERGROUPS");
  IElementType FILTERS = new LSFTokenType("FILTERS");
  IElementType FINALLY = new LSFTokenType("FINALLY");
  IElementType FIRST = new LSFTokenType("FIRST");
  IElementType FIXED = new LSFTokenType("FIXED");
  IElementType FLEX = new LSFTokenType("FLEX");
  IElementType FLOAT = new LSFTokenType("FLOAT");
  IElementType FOCUSED = new LSFTokenType("FOCUSED");
  IElementType FOLDER = new LSFTokenType("FOLDER");
  IElementType FOLLOWS = new LSFTokenType("FOLLOWS");
  IElementType FOOTER = new LSFTokenType("FOOTER");
  IElementType FOR = new LSFTokenType("FOR");
  IElementType FOREGROUND = new LSFTokenType("FOREGROUND");
  IElementType FORM = new LSFTokenType("FORM");
  IElementType FORMEXTID = new LSFTokenType("FORMEXTID");
  IElementType FORMS = new LSFTokenType("FORMS");
  IElementType FORMULA = new LSFTokenType("FORMULA");
  IElementType FROM = new LSFTokenType("FROM");
  IElementType FULL = new LSFTokenType("FULL");
  IElementType GET = new LSFTokenType("GET");
  IElementType GLOBAL = new LSFTokenType("GLOBAL");
  IElementType GOAFTER = new LSFTokenType("GOAFTER");
  IElementType GREATER = new LSFTokenType("GREATER");
  IElementType GREATER_EQUALS = new LSFTokenType("GREATER_EQUALS");
  IElementType GRID = new LSFTokenType("GRID");
  IElementType GRIDBOX = new LSFTokenType("GRIDBOX");
  IElementType GROUP = new LSFTokenType("GROUP");
  IElementType GROUPCHANGE = new LSFTokenType("GROUPCHANGE");
  IElementType HALIGN = new LSFTokenType("HALIGN");
  IElementType HEADER = new LSFTokenType("HEADER");
  IElementType HEADERS = new LSFTokenType("HEADERS");
  IElementType HEADERSTO = new LSFTokenType("HEADERSTO");
  IElementType HIDE = new LSFTokenType("HIDE");
  IElementType HIDESCROLLBARS = new LSFTokenType("HIDESCROLLBARS");
  IElementType HIDETITLE = new LSFTokenType("HIDETITLE");
  IElementType HINT = new LSFTokenType("HINT");
  IElementType HINTNOUPDATE = new LSFTokenType("HINTNOUPDATE");
  IElementType HINTTABLE = new LSFTokenType("HINTTABLE");
  IElementType HORIZONTAL = new LSFTokenType("HORIZONTAL");
  IElementType HOVER = new LSFTokenType("HOVER");
  IElementType HTML = new LSFTokenType("HTML");
  IElementType HTTP = new LSFTokenType("HTTP");
  IElementType ID = new LSFTokenType("ID");
  IElementType IF = new LSFTokenType("IF");
  IElementType IMAGE = new LSFTokenType("IMAGE");
  IElementType IMPORT = new LSFTokenType("IMPORT");
  IElementType IMPOSSIBLE = new LSFTokenType("IMPOSSIBLE");
  IElementType IN = new LSFTokenType("IN");
  IElementType INDEX = new LSFTokenType("INDEX");
  IElementType INDEXED = new LSFTokenType("INDEXED");
  IElementType INIT = new LSFTokenType("INIT");
  IElementType INLINE = new LSFTokenType("INLINE");
  IElementType INPUT = new LSFTokenType("INPUT");
  IElementType INTERNAL = new LSFTokenType("INTERNAL");
  IElementType INTERVAL = new LSFTokenType("INTERVAL");
  IElementType IS = new LSFTokenType("IS");
  IElementType JAVA = new LSFTokenType("JAVA");
  IElementType JOIN = new LSFTokenType("JOIN");
  IElementType JSON = new LSFTokenType("JSON");
  IElementType JSONTEXT = new LSFTokenType("JSONTEXT");
  IElementType KEYPRESS = new LSFTokenType("KEYPRESS");
  IElementType LAST = new LSFTokenType("LAST");
  IElementType LBRAC = new LSFTokenType("LBRAC");
  IElementType LBRACE = new LSFTokenType("LBRACE");
  IElementType LEFT = new LSFTokenType("LEFT");
  IElementType LESS = new LSFTokenType("LESS");
  IElementType LESS_EQUALS = new LSFTokenType("LESS_EQUALS");
  IElementType LEX_CODE_LITERAL = new LSFTokenType("LEX_CODE_LITERAL");
  IElementType LEX_COLOR_LITERAL = new LSFTokenType("LEX_COLOR_LITERAL");
  IElementType LEX_DATETIME_LITERAL = new LSFTokenType("LEX_DATETIME_LITERAL");
  IElementType LEX_DATE_LITERAL = new LSFTokenType("LEX_DATE_LITERAL");
  IElementType LEX_LOGICAL_LITERAL = new LSFTokenType("LEX_LOGICAL_LITERAL");
  IElementType LEX_STRING_LITERAL = new LSFTokenType("LEX_STRING_LITERAL");
  IElementType LEX_TIME_LITERAL = new LSFTokenType("LEX_TIME_LITERAL");
  IElementType LEX_T_LOGICAL_LITERAL = new LSFTokenType("LEX_T_LOGICAL_LITERAL");
  IElementType LEX_UDOUBLE_LITERAL = new LSFTokenType("LEX_UDOUBLE_LITERAL");
  IElementType LEX_UINT_LITERAL = new LSFTokenType("LEX_UINT_LITERAL");
  IElementType LEX_ULONG_LITERAL = new LSFTokenType("LEX_ULONG_LITERAL");
  IElementType LEX_UNUMERIC_LITERAL = new LSFTokenType("LEX_UNUMERIC_LITERAL");
  IElementType LIKE = new LSFTokenType("LIKE");
  IElementType LIMIT = new LSFTokenType("LIMIT");
  IElementType LIST = new LSFTokenType("LIST");
  IElementType LOCAL = new LSFTokenType("LOCAL");
  IElementType LOCALASYNC = new LSFTokenType("LOCALASYNC");
  IElementType LOG = new LSFTokenType("LOG");
  IElementType LOGGABLE = new LSFTokenType("LOGGABLE");
  IElementType LSF = new LSFTokenType("LSF");
  IElementType LSQBR = new LSFTokenType("LSQBR");
  IElementType MANAGESESSION = new LSFTokenType("MANAGESESSION");
  IElementType MAP = new LSFTokenType("MAP");
  IElementType MATCH = new LSFTokenType("MATCH");
  IElementType MATERIALIZED = new LSFTokenType("MATERIALIZED");
  IElementType MAX = new LSFTokenType("MAX");
  IElementType MEASURE = new LSFTokenType("MEASURE");
  IElementType MEASURES = new LSFTokenType("MEASURES");
  IElementType MEMO = new LSFTokenType("MEMO");
  IElementType MENU = new LSFTokenType("MENU");
  IElementType MESSAGE = new LSFTokenType("MESSAGE");
  IElementType META = new LSFTokenType("META");
  IElementType MIN = new LSFTokenType("MIN");
  IElementType MINUS = new LSFTokenType("MINUS");
  IElementType MODULE = new LSFTokenType("MODULE");
  IElementType MOVE = new LSFTokenType("MOVE");
  IElementType MS = new LSFTokenType("MS");
  IElementType MULT = new LSFTokenType("MULT");
  IElementType MULTI = new LSFTokenType("MULTI");
  IElementType NAGGR = new LSFTokenType("NAGGR");
  IElementType NAME = new LSFTokenType("NAME");
  IElementType NAMESPACE = new LSFTokenType("NAMESPACE");
  IElementType NATIVE = new LSFTokenType("NATIVE");
  IElementType NAVIGATOR = new LSFTokenType("NAVIGATOR");
  IElementType NESTED = new LSFTokenType("NESTED");
  IElementType NESTEDSESSION = new LSFTokenType("NESTEDSESSION");
  IElementType NEW = new LSFTokenType("NEW");
  IElementType NEWEDIT = new LSFTokenType("NEWEDIT");
  IElementType NEWEXECUTOR = new LSFTokenType("NEWEXECUTOR");
  IElementType NEWSESSION = new LSFTokenType("NEWSESSION");
  IElementType NEWSQL = new LSFTokenType("NEWSQL");
  IElementType NEWTHREAD = new LSFTokenType("NEWTHREAD");
  IElementType NO = new LSFTokenType("NO");
  IElementType NOCANCEL = new LSFTokenType("NOCANCEL");
  IElementType NOCHANGE = new LSFTokenType("NOCHANGE");
  IElementType NOCOMPLEX = new LSFTokenType("NOCOMPLEX");
  IElementType NOCONSTRAINTFILTER = new LSFTokenType("NOCONSTRAINTFILTER");
  IElementType NODEFAULT = new LSFTokenType("NODEFAULT");
  IElementType NOESCAPE = new LSFTokenType("NOESCAPE");
  IElementType NOEXTID = new LSFTokenType("NOEXTID");
  IElementType NOFLEX = new LSFTokenType("NOFLEX");
  IElementType NOHEADER = new LSFTokenType("NOHEADER");
  IElementType NOHINT = new LSFTokenType("NOHINT");
  IElementType NOIMAGE = new LSFTokenType("NOIMAGE");
  IElementType NOINLINE = new LSFTokenType("NOINLINE");
  IElementType NOMANAGESESSION = new LSFTokenType("NOMANAGESESSION");
  IElementType NONULL = new LSFTokenType("NONULL");
  IElementType NOPREVIEW = new LSFTokenType("NOPREVIEW");
  IElementType NOSELECT = new LSFTokenType("NOSELECT");
  IElementType NOSETTINGS = new LSFTokenType("NOSETTINGS");
  IElementType NOSTICKY = new LSFTokenType("NOSTICKY");
  IElementType NOT = new LSFTokenType("NOT");
  IElementType NOWAIT = new LSFTokenType("NOWAIT");
  IElementType NULL = new LSFTokenType("NULL");
  IElementType OBJECT = new LSFTokenType("OBJECT");
  IElementType OBJECTS = new LSFTokenType("OBJECTS");
  IElementType OK = new LSFTokenType("OK");
  IElementType ON = new LSFTokenType("ON");
  IElementType OPTIMISTICASYNC = new LSFTokenType("OPTIMISTICASYNC");
  IElementType OPTIONS = new LSFTokenType("OPTIONS");
  IElementType OR = new LSFTokenType("OR");
  IElementType ORDER = new LSFTokenType("ORDER");
  IElementType ORDERS = new LSFTokenType("ORDERS");
  IElementType OVERRIDE = new LSFTokenType("OVERRIDE");
  IElementType PAGESIZE = new LSFTokenType("PAGESIZE");
  IElementType PANEL = new LSFTokenType("PANEL");
  IElementType PARAMS = new LSFTokenType("PARAMS");
  IElementType PARENT = new LSFTokenType("PARENT");
  IElementType PARTITION = new LSFTokenType("PARTITION");
  IElementType PASSWORD = new LSFTokenType("PASSWORD");
  IElementType PATCH = new LSFTokenType("PATCH");
  IElementType PATTERN = new LSFTokenType("PATTERN");
  IElementType PDF = new LSFTokenType("PDF");
  IElementType PERIOD = new LSFTokenType("PERIOD");
  IElementType PG = new LSFTokenType("PG");
  IElementType PIVOT = new LSFTokenType("PIVOT");
  IElementType PLUS = new LSFTokenType("PLUS");
  IElementType PLUSEQ = new LSFTokenType("PLUSEQ");
  IElementType POINT = new LSFTokenType("POINT");
  IElementType POPUP = new LSFTokenType("POPUP");
  IElementType POSITION = new LSFTokenType("POSITION");
  IElementType POST = new LSFTokenType("POST");
  IElementType PREREAD = new LSFTokenType("PREREAD");
  IElementType PREV = new LSFTokenType("PREV");
  IElementType PREVIEW = new LSFTokenType("PREVIEW");
  IElementType PRIMITIVE_TYPE = new LSFTokenType("PRIMITIVE_TYPE");
  IElementType PRINT = new LSFTokenType("PRINT");
  IElementType PRIORITY = new LSFTokenType("PRIORITY");
  IElementType PROPERTIES = new LSFTokenType("PROPERTIES");
  IElementType PROPERTY = new LSFTokenType("PROPERTY");
  IElementType PROPERTYDRAW = new LSFTokenType("PROPERTYDRAW");
  IElementType PROPORTION = new LSFTokenType("PROPORTION");
  IElementType PUT = new LSFTokenType("PUT");
  IElementType QUERYCLOSE = new LSFTokenType("QUERYCLOSE");
  IElementType QUESTION = new LSFTokenType("QUESTION");
  IElementType QUICKFILTER = new LSFTokenType("QUICKFILTER");
  IElementType RBRAC = new LSFTokenType("RBRAC");
  IElementType RBRACE = new LSFTokenType("RBRACE");
  IElementType READ = new LSFTokenType("READ");
  IElementType READONLY = new LSFTokenType("READONLY");
  IElementType READONLYIF = new LSFTokenType("READONLYIF");
  IElementType RECALCULATE = new LSFTokenType("RECALCULATE");
  IElementType RECURSION = new LSFTokenType("RECURSION");
  IElementType REFLECTION = new LSFTokenType("REFLECTION");
  IElementType REGEXP = new LSFTokenType("REGEXP");
  IElementType REMOVE = new LSFTokenType("REMOVE");
  IElementType REPORT = new LSFTokenType("REPORT");
  IElementType REPORTFILES = new LSFTokenType("REPORTFILES");
  IElementType REPORTS = new LSFTokenType("REPORTS");
  IElementType REQUEST = new LSFTokenType("REQUEST");
  IElementType REQUIRE = new LSFTokenType("REQUIRE");
  IElementType RESOLVE = new LSFTokenType("RESOLVE");
  IElementType RETURN = new LSFTokenType("RETURN");
  IElementType RGB = new LSFTokenType("RGB");
  IElementType RIGHT = new LSFTokenType("RIGHT");
  IElementType ROOT = new LSFTokenType("ROOT");
  IElementType ROUND = new LSFTokenType("ROUND");
  IElementType ROW = new LSFTokenType("ROW");
  IElementType ROWS = new LSFTokenType("ROWS");
  IElementType RSQBR = new LSFTokenType("RSQBR");
  IElementType RTF = new LSFTokenType("RTF");
  IElementType SCHEDULE = new LSFTokenType("SCHEDULE");
  IElementType SCROLL = new LSFTokenType("SCROLL");
  IElementType SEEK = new LSFTokenType("SEEK");
  IElementType SELECT = new LSFTokenType("SELECT");
  IElementType SELECTED = new LSFTokenType("SELECTED");
  IElementType SELECTOR = new LSFTokenType("SELECTOR");
  IElementType SEMI = new LSFTokenType("SEMI");
  IElementType SERIALIZABLE = new LSFTokenType("SERIALIZABLE");
  IElementType SERVER = new LSFTokenType("SERVER");
  IElementType SET = new LSFTokenType("SET");
  IElementType SETCHANGED = new LSFTokenType("SETCHANGED");
  IElementType SETDROPPED = new LSFTokenType("SETDROPPED");
  IElementType SETTINGS = new LSFTokenType("SETTINGS");
  IElementType SHEET = new LSFTokenType("SHEET");
  IElementType SHOW = new LSFTokenType("SHOW");
  IElementType SHOWDEP = new LSFTokenType("SHOWDEP");
  IElementType SHOWIF = new LSFTokenType("SHOWIF");
  IElementType SINGLE = new LSFTokenType("SINGLE");
  IElementType SPLITH = new LSFTokenType("SPLITH");
  IElementType SPLITV = new LSFTokenType("SPLITV");
  IElementType SQL = new LSFTokenType("SQL");
  IElementType START = new LSFTokenType("START");
  IElementType STEP = new LSFTokenType("STEP");
  IElementType STICKY = new LSFTokenType("STICKY");
  IElementType STRETCH = new LSFTokenType("STRETCH");
  IElementType STRICT = new LSFTokenType("STRICT");
  IElementType STRUCT = new LSFTokenType("STRUCT");
  IElementType SUBJECT = new LSFTokenType("SUBJECT");
  IElementType SUBREPORT = new LSFTokenType("SUBREPORT");
  IElementType SUM = new LSFTokenType("SUM");
  IElementType TAB = new LSFTokenType("TAB");
  IElementType TABBED = new LSFTokenType("TABBED");
  IElementType TABLE = new LSFTokenType("TABLE");
  IElementType TAG = new LSFTokenType("TAG");
  IElementType TCP = new LSFTokenType("TCP");
  IElementType TEXTHALIGN = new LSFTokenType("TEXTHALIGN");
  IElementType TEXTVALIGN = new LSFTokenType("TEXTVALIGN");
  IElementType THEN = new LSFTokenType("THEN");
  IElementType THREADS = new LSFTokenType("THREADS");
  IElementType TO = new LSFTokenType("TO");
  IElementType TOOLBAR = new LSFTokenType("TOOLBAR");
  IElementType TOOLBARBOX = new LSFTokenType("TOOLBARBOX");
  IElementType TOOLBARLEFT = new LSFTokenType("TOOLBARLEFT");
  IElementType TOOLBARRIGHT = new LSFTokenType("TOOLBARRIGHT");
  IElementType TOOLBARSYSTEM = new LSFTokenType("TOOLBARSYSTEM");
  IElementType TOP = new LSFTokenType("TOP");
  IElementType TREE = new LSFTokenType("TREE");
  IElementType TRY = new LSFTokenType("TRY");
  IElementType UDP = new LSFTokenType("UDP");
  IElementType UNGROUP = new LSFTokenType("UNGROUP");
  IElementType UP = new LSFTokenType("UP");
  IElementType USERFILTER = new LSFTokenType("USERFILTER");
  IElementType USERFILTERS = new LSFTokenType("USERFILTERS");
  IElementType VALIGN = new LSFTokenType("VALIGN");
  IElementType VALUE = new LSFTokenType("VALUE");
  IElementType VERTICAL = new LSFTokenType("VERTICAL");
  IElementType VIEW = new LSFTokenType("VIEW");
  IElementType WAIT = new LSFTokenType("WAIT");
  IElementType WHEN = new LSFTokenType("WHEN");
  IElementType WHERE = new LSFTokenType("WHERE");
  IElementType WHILE = new LSFTokenType("WHILE");
  IElementType WINDOW = new LSFTokenType("WINDOW");
  IElementType WRITE = new LSFTokenType("WRITE");
  IElementType XLS = new LSFTokenType("XLS");
  IElementType XLSX = new LSFTokenType("XLSX");
  IElementType XML = new LSFTokenType("XML");
  IElementType XOR = new LSFTokenType("XOR");
  IElementType YES = new LSFTokenType("YES");
  IElementType YESNO = new LSFTokenType("YESNO");

  class Factory {
    public static PsiElement createElement(ASTNode node) {
      IElementType type = node.getElementType();
      if (type == ABSTRACT_ACTION_PROPERTY_DEFINITION) {
        return new LSFAbstractActionPropertyDefinitionImpl(node);
      }
      else if (type == ABSTRACT_CASE_ADD_OPTION) {
        return new LSFAbstractCaseAddOptionImpl(node);
      }
      else if (type == ABSTRACT_EXCLUSIVE_OVERRIDE_OPTION) {
        return new LSFAbstractExclusiveOverrideOptionImpl(node);
      }
      else if (type == ABSTRACT_PROPERTY_DEFINITION) {
        return new LSFAbstractPropertyDefinitionImpl(node);
      }
      else if (type == ACTION_CASE_BRANCH_BODY) {
        return new LSFActionCaseBranchBodyImpl(node);
      }
      else if (type == ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ACTION_STATEMENT) {
        return new LSFActionStatementImpl(node);
      }
      else if (type == ACTION_UNFRIENDLY_PD) {
        return new LSFActionUnfriendlyPDImpl(node);
      }
      else if (type == ACTION_USAGE) {
        return new LSFActionUsageImpl(node);
      }
      else if (type == ACTION_USAGE_WRAPPER) {
        return new LSFActionUsageWrapperImpl(node);
      }
      else if (type == ACTIVATE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFActivateActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ACTIVE_FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFActiveFormActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ACTIVE_TAB_PROPERTY_DEFINITION) {
        return new LSFActiveTabPropertyDefinitionImpl(node);
      }
      else if (type == ADDITIVE_ORPE) {
        return new LSFAdditiveORPEImpl(node);
      }
      else if (type == ADDITIVE_PE) {
        return new LSFAdditivePEImpl(node);
      }
      else if (type == AGGR_PARAM_PROP_DECLARE) {
        return new LSFAggrParamPropDeclareImpl(node);
      }
      else if (type == AGGR_PROPERTY_DEFINITION) {
        return new LSFAggrPropertyDefinitionImpl(node);
      }
      else if (type == AGGR_SETTING) {
        return new LSFAggrSettingImpl(node);
      }
      else if (type == ALIASED_PROPERTY_EXPRESSION) {
        return new LSFAliasedPropertyExpressionImpl(node);
      }
      else if (type == ALIAS_USAGE) {
        return new LSFAliasUsageImpl(node);
      }
      else if (type == ALIGNMENT_LITERAL) {
        return new LSFAlignmentLiteralImpl(node);
      }
      else if (type == AND_PE) {
        return new LSFAndPEImpl(node);
      }
      else if (type == APPLY_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFApplyActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ASPECT_AFTER) {
        return new LSFAspectAfterImpl(node);
      }
      else if (type == ASPECT_BEFORE) {
        return new LSFAspectBeforeImpl(node);
      }
      else if (type == ASPECT_STATEMENT) {
        return new LSFAspectStatementImpl(node);
      }
      else if (type == ASSIGN_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFAssignActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ASYNC_UPDATE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFAsyncUpdateActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == AS_EDIT_ACTION_SETTING) {
        return new LSFAsEditActionSettingImpl(node);
      }
      else if (type == AUTOREFRESH_LITERAL) {
        return new LSFAutorefreshLiteralImpl(node);
      }
      else if (type == AUTOSET_SETTING) {
        return new LSFAutosetSettingImpl(node);
      }
      else if (type == BASE_EVENT) {
        return new LSFBaseEventImpl(node);
      }
      else if (type == BASE_EVENT_NOT_PE) {
        return new LSFBaseEventNotPEImpl(node);
      }
      else if (type == BASE_EVENT_PE) {
        return new LSFBaseEventPEImpl(node);
      }
      else if (type == BOOLEAN_LITERAL) {
        return new LSFBooleanLiteralImpl(node);
      }
      else if (type == BORDER_POSITION) {
        return new LSFBorderPositionImpl(node);
      }
      else if (type == BOUNDS_DOUBLE_LITERAL) {
        return new LSFBoundsDoubleLiteralImpl(node);
      }
      else if (type == BOUNDS_INT_LITERAL) {
        return new LSFBoundsIntLiteralImpl(node);
      }
      else if (type == BRACKETED_CLASS_NAME_LIST) {
        return new LSFBracketedClassNameListImpl(node);
      }
      else if (type == BREAK_ACTION_OPERATOR) {
        return new LSFBreakActionOperatorImpl(node);
      }
      else if (type == BUILT_IN_CLASS_NAME) {
        return new LSFBuiltInClassNameImpl(node);
      }
      else if (type == CANCEL_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFCancelActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == CASE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFCaseActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == CASE_BRANCH_BODY) {
        return new LSFCaseBranchBodyImpl(node);
      }
      else if (type == CASE_PROPERTY_DEFINITION) {
        return new LSFCasePropertyDefinitionImpl(node);
      }
      else if (type == CAST_PROPERTY_DEFINITION) {
        return new LSFCastPropertyDefinitionImpl(node);
      }
      else if (type == CHANGE_CLASS_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFChangeClassActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == CHANGE_CLASS_WHERE) {
        return new LSFChangeClassWhereImpl(node);
      }
      else if (type == CHANGE_INPUT) {
        return new LSFChangeInputImpl(node);
      }
      else if (type == CHANGE_INPUT_PROPERTY_CUSTOM_VIEW) {
        return new LSFChangeInputPropertyCustomViewImpl(node);
      }
      else if (type == CHANGE_KEY_SETTING) {
        return new LSFChangeKeySettingImpl(node);
      }
      else if (type == CHANGE_MOUSE_SETTING) {
        return new LSFChangeMouseSettingImpl(node);
      }
      else if (type == CHANGE_PROPERTY_BODY) {
        return new LSFChangePropertyBodyImpl(node);
      }
      else if (type == CHANGE_PROPERTY_CUSTOM_VIEW) {
        return new LSFChangePropertyCustomViewImpl(node);
      }
      else if (type == CHAR_WIDTH_SETTING) {
        return new LSFCharWidthSettingImpl(node);
      }
      else if (type == CLASS_DECL) {
        return new LSFClassDeclImpl(node);
      }
      else if (type == CLASS_NAME) {
        return new LSFClassNameImpl(node);
      }
      else if (type == CLASS_NAME_LIST) {
        return new LSFClassNameListImpl(node);
      }
      else if (type == CLASS_OR_EXPRESSION) {
        return new LSFClassOrExpressionImpl(node);
      }
      else if (type == CLASS_PARAM_DECLARE) {
        return new LSFClassParamDeclareImpl(node);
      }
      else if (type == CLASS_PARAM_DECLARE_LIST) {
        return new LSFClassParamDeclareListImpl(node);
      }
      else if (type == CLASS_PARENTS_LIST) {
        return new LSFClassParentsListImpl(node);
      }
      else if (type == CLASS_STATEMENT) {
        return new LSFClassStatementImpl(node);
      }
      else if (type == CLASS_VIEW_TYPE) {
        return new LSFClassViewTypeImpl(node);
      }
      else if (type == CLOSE_FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFCloseFormActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == CODE_LITERAL) {
        return new LSFCodeLiteralImpl(node);
      }
      else if (type == COLLAPSE_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFCollapseGroupObjectActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == COLOR_LITERAL) {
        return new LSFColorLiteralImpl(node);
      }
      else if (type == COMPLEX_SETTING) {
        return new LSFComplexSettingImpl(node);
      }
      else if (type == COMPONENT_BLOCK_STATEMENT) {
        return new LSFComponentBlockStatementImpl(node);
      }
      else if (type == COMPONENT_BODY) {
        return new LSFComponentBodyImpl(node);
      }
      else if (type == COMPONENT_DECL) {
        return new LSFComponentDeclImpl(node);
      }
      else if (type == COMPONENT_ID) {
        return new LSFComponentIDImpl(node);
      }
      else if (type == COMPONENT_INSERT_POSITION) {
        return new LSFComponentInsertPositionImpl(node);
      }
      else if (type == COMPONENT_PROPERTY_VALUE) {
        return new LSFComponentPropertyValueImpl(node);
      }
      else if (type == COMPONENT_SELECTOR) {
        return new LSFComponentSelectorImpl(node);
      }
      else if (type == COMPONENT_STATEMENT) {
        return new LSFComponentStatementImpl(node);
      }
      else if (type == COMPONENT_STUB_STATEMENT) {
        return new LSFComponentStubStatementImpl(node);
      }
      else if (type == COMPONENT_USAGE) {
        return new LSFComponentUsageImpl(node);
      }
      else if (type == COMPOUND_ID) {
        return new LSFCompoundIDImpl(node);
      }
      else if (type == CONCAT_PROPERTY_DEFINITION) {
        return new LSFConcatPropertyDefinitionImpl(node);
      }
      else if (type == CONFIRM_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFConfirmActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == CONFIRM_SETTING) {
        return new LSFConfirmSettingImpl(node);
      }
      else if (type == CONSTRAINT_FILTER) {
        return new LSFConstraintFilterImpl(node);
      }
      else if (type == CONSTRAINT_STATEMENT) {
        return new LSFConstraintStatementImpl(node);
      }
      else if (type == CONTAINER_TYPE_LITERAL) {
        return new LSFContainerTypeLiteralImpl(node);
      }
      else if (type == CONTEXT_ACTION) {
        return new LSFContextActionImpl(node);
      }
      else if (type == CONTEXT_ACTIONS) {
        return new LSFContextActionsImpl(node);
      }
      else if (type == CONTEXT_FILTERS_CLAUSE) {
        return new LSFContextFiltersClauseImpl(node);
      }
      else if (type == CONTEXT_MENU_EVENT_TYPE) {
        return new LSFContextMenuEventTypeImpl(node);
      }
      else if (type == CONTINUE_ACTION_OPERATOR) {
        return new LSFContinueActionOperatorImpl(node);
      }
      else if (type == CUSTOM_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFCustomActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == CUSTOM_CLASS_USAGE) {
        return new LSFCustomClassUsageImpl(node);
      }
      else if (type == CUSTOM_CLASS_USAGE_WRAPPER) {
        return new LSFCustomClassUsageWrapperImpl(node);
      }
      else if (type == CUSTOM_FORM_DESIGN_OPTION) {
        return new LSFCustomFormDesignOptionImpl(node);
      }
      else if (type == CUSTOM_HEADER_LITERAL) {
        return new LSFCustomHeaderLiteralImpl(node);
      }
      else if (type == CUSTOM_VIEW_SETTING) {
        return new LSFCustomViewSettingImpl(node);
      }
      else if (type == DATA_PROPERTY_DEFINITION) {
        return new LSFDataPropertyDefinitionImpl(node);
      }
      else if (type == DATA_PROPERTY_SESSION_MODIFIER) {
        return new LSFDataPropertySessionModifierImpl(node);
      }
      else if (type == DATE_LITERAL) {
        return new LSFDateLiteralImpl(node);
      }
      else if (type == DATE_TIME_LITERAL) {
        return new LSFDateTimeLiteralImpl(node);
      }
      else if (type == DEFAULT_COMPARE_SETTING) {
        return new LSFDefaultCompareSettingImpl(node);
      }
      else if (type == DELETE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFDeleteActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == DESIGN_CALC_PROPERTY_OBJECT) {
        return new LSFDesignCalcPropertyObjectImpl(node);
      }
      else if (type == DESIGN_HEADER) {
        return new LSFDesignHeaderImpl(node);
      }
      else if (type == DESIGN_STATEMENT) {
        return new LSFDesignStatementImpl(node);
      }
      else if (type == DIALOG_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFDialogActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == DIMENSION_LITERAL) {
        return new LSFDimensionLiteralImpl(node);
      }
      else if (type == DOCK_POSITION) {
        return new LSFDockPositionImpl(node);
      }
      else if (type == DOUBLE_LITERAL) {
        return new LSFDoubleLiteralImpl(node);
      }
      else if (type == DO_INPUT_BODY) {
        return new LSFDoInputBodyImpl(node);
      }
      else if (type == DO_MAIN_BODY) {
        return new LSFDoMainBodyImpl(node);
      }
      else if (type == DRAW_ROOT) {
        return new LSFDrawRootImpl(node);
      }
      else if (type == DRILL_DOWN_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFDrillDownActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ECHO_SYMBOLS_SETTING) {
        return new LSFEchoSymbolsSettingImpl(node);
      }
      else if (type == EDIT_FORM_DECLARATION) {
        return new LSFEditFormDeclarationImpl(node);
      }
      else if (type == EMAIL_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFEmailActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EMAIL_PROPERTY_USAGE) {
        return new LSFEmailPropertyUsageImpl(node);
      }
      else if (type == EMAIL_RECIPIENT_TYPE_LITERAL) {
        return new LSFEmailRecipientTypeLiteralImpl(node);
      }
      else if (type == EMPTY_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFEmptyActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EMPTY_EXPLICIT_PROP_CLASS_LIST) {
        return new LSFEmptyExplicitPropClassListImpl(node);
      }
      else if (type == EMPTY_STATEMENT) {
        return new LSFEmptyStatementImpl(node);
      }
      else if (type == EQUALITY_PE) {
        return new LSFEqualityPEImpl(node);
      }
      else if (type == EQUALS_SIGN) {
        return new LSFEqualsSignImpl(node);
      }
      else if (type == EVAL_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFEvalActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EVENT_ID_SETTING) {
        return new LSFEventIdSettingImpl(node);
      }
      else if (type == EVENT_STATEMENT) {
        return new LSFEventStatementImpl(node);
      }
      else if (type == EXCLUSIVE_OPERATOR) {
        return new LSFExclusiveOperatorImpl(node);
      }
      else if (type == EXCLUSIVE_OVERRIDE_OPTION) {
        return new LSFExclusiveOverrideOptionImpl(node);
      }
      else if (type == EXEC_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFExecActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EXPAND_COLLAPSE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFExpandCollapseActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EXPAND_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFExpandGroupObjectActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EXPLICIT_INTERFACE_ACT_STATEMENT) {
        return new LSFExplicitInterfaceActStatementImpl(node);
      }
      else if (type == EXPLICIT_INTERFACE_PROPERTY_STATEMENT) {
        return new LSFExplicitInterfacePropertyStatementImpl(node);
      }
      else if (type == EXPLICIT_PROP_CLASS) {
        return new LSFExplicitPropClassImpl(node);
      }
      else if (type == EXPLICIT_PROP_CLASS_USAGE) {
        return new LSFExplicitPropClassUsageImpl(node);
      }
      else if (type == EXPLICIT_VALUE_PROPERTY_STATEMENT) {
        return new LSFExplicitValuePropertyStatementImpl(node);
      }
      else if (type == EXPORT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFExportActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EXPORT_DATA_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFExportDataActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == EXPRESSION_FRIENDLY_PD) {
        return new LSFExpressionFriendlyPDImpl(node);
      }
      else if (type == EXPRESSION_LITERAL) {
        return new LSFExpressionLiteralImpl(node);
      }
      else if (type == EXPRESSION_PRIMITIVE) {
        return new LSFExpressionPrimitiveImpl(node);
      }
      else if (type == EXPRESSION_STRING_LITERAL) {
        return new LSFExpressionStringLiteralImpl(node);
      }
      else if (type == EXPRESSION_UNFRIENDLY_PD) {
        return new LSFExpressionUnfriendlyPDImpl(node);
      }
      else if (type == EXPR_PARAMETER_NAME_USAGE) {
        return new LSFExprParameterNameUsageImpl(node);
      }
      else if (type == EXPR_PARAMETER_USAGE) {
        return new LSFExprParameterUsageImpl(node);
      }
      else if (type == EXPR_PARAMETER_USAGE_LIST) {
        return new LSFExprParameterUsageListImpl(node);
      }
      else if (type == EXTENDING_CLASS_DECLARATION) {
        return new LSFExtendingClassDeclarationImpl(node);
      }
      else if (type == EXTENDING_FORM_DECLARATION) {
        return new LSFExtendingFormDeclarationImpl(node);
      }
      else if (type == EXTERNAL_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFExternalActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == FILTER_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFFilterActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == FILTER_GROUP_NAME) {
        return new LSFFilterGroupNameImpl(node);
      }
      else if (type == FILTER_GROUP_SELECTOR) {
        return new LSFFilterGroupSelectorImpl(node);
      }
      else if (type == FILTER_GROUP_USAGE) {
        return new LSFFilterGroupUsageImpl(node);
      }
      else if (type == FILTER_PROPERTY_DEFINITION) {
        return new LSFFilterPropertyDefinitionImpl(node);
      }
      else if (type == FILTER_PROPERTY_SELECTOR) {
        return new LSFFilterPropertySelectorImpl(node);
      }
      else if (type == FILTER_SET_DEFAULT) {
        return new LSFFilterSetDefaultImpl(node);
      }
      else if (type == FLEX_ALIGNMENT_LITERAL) {
        return new LSFFlexAlignmentLiteralImpl(node);
      }
      else if (type == FLEX_CHAR_WIDTH_SETTING) {
        return new LSFFlexCharWidthSettingImpl(node);
      }
      else if (type == FOLLOWS_STATEMENT) {
        return new LSFFollowsStatementImpl(node);
      }
      else if (type == FORMULA_PROPERTY_DEFINITION) {
        return new LSFFormulaPropertyDefinitionImpl(node);
      }
      else if (type == FORMULA_PROPERTY_SYNTAX) {
        return new LSFFormulaPropertySyntaxImpl(node);
      }
      else if (type == FORMULA_PROPERTY_SYNTAX_LIST) {
        return new LSFFormulaPropertySyntaxListImpl(node);
      }
      else if (type == FORMULA_PROPERTY_SYNTAX_TYPE) {
        return new LSFFormulaPropertySyntaxTypeImpl(node);
      }
      else if (type == FORM_ACTION_DECLARATION) {
        return new LSFFormActionDeclarationImpl(node);
      }
      else if (type == FORM_ACTION_OBJECT) {
        return new LSFFormActionObjectImpl(node);
      }
      else if (type == FORM_ACTION_OBJECT_LIST) {
        return new LSFFormActionObjectListImpl(node);
      }
      else if (type == FORM_ACTION_OBJECT_USAGE) {
        return new LSFFormActionObjectUsageImpl(node);
      }
      else if (type == FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFFormActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == FORM_ACTION_PROPERTY_OBJECT) {
        return new LSFFormActionPropertyObjectImpl(node);
      }
      else if (type == FORM_CALC_PROPERTY_OBJECT) {
        return new LSFFormCalcPropertyObjectImpl(node);
      }
      else if (type == FORM_DECL) {
        return new LSFFormDeclImpl(node);
      }
      else if (type == FORM_ELSE_NO_PARAMS_ACTION_USAGE) {
        return new LSFFormElseNoParamsActionUsageImpl(node);
      }
      else if (type == FORM_EVENTS_LIST) {
        return new LSFFormEventsListImpl(node);
      }
      else if (type == FORM_EVENT_DECLARATION) {
        return new LSFFormEventDeclarationImpl(node);
      }
      else if (type == FORM_EVENT_TYPE) {
        return new LSFFormEventTypeImpl(node);
      }
      else if (type == FORM_EXPR_DECLARATION) {
        return new LSFFormExprDeclarationImpl(node);
      }
      else if (type == FORM_EXTEND_FILTER_GROUP_DECLARATION) {
        return new LSFFormExtendFilterGroupDeclarationImpl(node);
      }
      else if (type == FORM_EXT_ID) {
        return new LSFFormExtIDImpl(node);
      }
      else if (type == FORM_EXT_ID_SETTING) {
        return new LSFFormExtIDSettingImpl(node);
      }
      else if (type == FORM_EXT_KEY) {
        return new LSFFormExtKeyImpl(node);
      }
      else if (type == FORM_FILTERS_LIST) {
        return new LSFFormFiltersListImpl(node);
      }
      else if (type == FORM_FILTER_GROUP_DECLARATION) {
        return new LSFFormFilterGroupDeclarationImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT) {
        return new LSFFormGroupObjectImpl(node);
      }
      else if (type == FORM_GROUP_OBJECTS_LIST) {
        return new LSFFormGroupObjectsListImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_BACKGROUND) {
        return new LSFFormGroupObjectBackgroundImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_DECLARATION) {
        return new LSFFormGroupObjectDeclarationImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_FOREGROUND) {
        return new LSFFormGroupObjectForegroundImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_INIT_VIEW_TYPE) {
        return new LSFFormGroupObjectInitViewTypeImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_OPTIONS) {
        return new LSFFormGroupObjectOptionsImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_PAGE_SIZE) {
        return new LSFFormGroupObjectPageSizeImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_RELATIVE_POSITION) {
        return new LSFFormGroupObjectRelativePositionImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_UPDATE) {
        return new LSFFormGroupObjectUpdateImpl(node);
      }
      else if (type == FORM_GROUP_OBJECT_VIEW_TYPE) {
        return new LSFFormGroupObjectViewTypeImpl(node);
      }
      else if (type == FORM_HINTS_LIST) {
        return new LSFFormHintsListImpl(node);
      }
      else if (type == FORM_IN_GROUP) {
        return new LSFFormInGroupImpl(node);
      }
      else if (type == FORM_MAPPED_NAME_PROPERTIES_LIST) {
        return new LSFFormMappedNamePropertiesListImpl(node);
      }
      else if (type == FORM_MAPPED_PROPERTIES_LIST) {
        return new LSFFormMappedPropertiesListImpl(node);
      }
      else if (type == FORM_MULTI_GROUP_OBJECT_DECLARATION) {
        return new LSFFormMultiGroupObjectDeclarationImpl(node);
      }
      else if (type == FORM_OBJECT_DECLARATION) {
        return new LSFFormObjectDeclarationImpl(node);
      }
      else if (type == FORM_OPTIONS_ON_EVENTS) {
        return new LSFFormOptionsOnEventsImpl(node);
      }
      else if (type == FORM_OPTIONS_WITH_CALC_PROPERTY_OBJECT) {
        return new LSFFormOptionsWithCalcPropertyObjectImpl(node);
      }
      else if (type == FORM_OPTIONS_WITH_OPTIONAL_CALC_PROPERTY_OBJECT) {
        return new LSFFormOptionsWithOptionalCalcPropertyObjectImpl(node);
      }
      else if (type == FORM_OPTION_COLUMNS) {
        return new LSFFormOptionColumnsImpl(node);
      }
      else if (type == FORM_OPTION_CUSTOM_VIEW) {
        return new LSFFormOptionCustomViewImpl(node);
      }
      else if (type == FORM_OPTION_EVENT_ID) {
        return new LSFFormOptionEventIdImpl(node);
      }
      else if (type == FORM_OPTION_FORCE) {
        return new LSFFormOptionForceImpl(node);
      }
      else if (type == FORM_OPTION_INSERT_TYPE) {
        return new LSFFormOptionInsertTypeImpl(node);
      }
      else if (type == FORM_OPTION_QUICK_FILTER) {
        return new LSFFormOptionQuickFilterImpl(node);
      }
      else if (type == FORM_OPTION_SESSION) {
        return new LSFFormOptionSessionImpl(node);
      }
      else if (type == FORM_OPTION_TO_DRAW) {
        return new LSFFormOptionToDrawImpl(node);
      }
      else if (type == FORM_ORDER_BY_LIST) {
        return new LSFFormOrderByListImpl(node);
      }
      else if (type == FORM_PIVOT_OPTIONS_DECLARATION) {
        return new LSFFormPivotOptionsDeclarationImpl(node);
      }
      else if (type == FORM_PROPERTIES_LIST) {
        return new LSFFormPropertiesListImpl(node);
      }
      else if (type == FORM_PROPERTIES_NAMES_DECL_LIST) {
        return new LSFFormPropertiesNamesDeclListImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_ID) {
        return new LSFFormPropertyDrawIDImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_MAPPED_DECL) {
        return new LSFFormPropertyDrawMappedDeclImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_NAME_DECL) {
        return new LSFFormPropertyDrawNameDeclImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_OBJECT) {
        return new LSFFormPropertyDrawObjectImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_PROPERTY_USAGE) {
        return new LSFFormPropertyDrawPropertyUsageImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_USAGE) {
        return new LSFFormPropertyDrawUsageImpl(node);
      }
      else if (type == FORM_PROPERTY_DRAW_WITH_ORDER) {
        return new LSFFormPropertyDrawWithOrderImpl(node);
      }
      else if (type == FORM_PROPERTY_NAME) {
        return new LSFFormPropertyNameImpl(node);
      }
      else if (type == FORM_PROPERTY_OBJECT) {
        return new LSFFormPropertyObjectImpl(node);
      }
      else if (type == FORM_PROPERTY_OPTIONS_LIST) {
        return new LSFFormPropertyOptionsListImpl(node);
      }
      else if (type == FORM_SESSION_SCOPE_CLAUSE) {
        return new LSFFormSessionScopeClauseImpl(node);
      }
      else if (type == FORM_SINGLE_ACTION_OBJECT) {
        return new LSFFormSingleActionObjectImpl(node);
      }
      else if (type == FORM_SINGLE_GROUP_OBJECT_DECLARATION) {
        return new LSFFormSingleGroupObjectDeclarationImpl(node);
      }
      else if (type == FORM_STATEMENT) {
        return new LSFFormStatementImpl(node);
      }
      else if (type == FORM_SUB_REPORT) {
        return new LSFFormSubReportImpl(node);
      }
      else if (type == FORM_TREE_GROUP_OBJECT_DECLARATION) {
        return new LSFFormTreeGroupObjectDeclarationImpl(node);
      }
      else if (type == FORM_TREE_GROUP_OBJECT_LIST) {
        return new LSFFormTreeGroupObjectListImpl(node);
      }
      else if (type == FORM_TREE_GROUP_OBJECT_OPTIONS) {
        return new LSFFormTreeGroupObjectOptionsImpl(node);
      }
      else if (type == FORM_USAGE) {
        return new LSFFormUsageImpl(node);
      }
      else if (type == FORM_USAGE_WRAPPER) {
        return new LSFFormUsageWrapperImpl(node);
      }
      else if (type == FOR_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFForActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == FOR_ACTION_PROPERTY_MAIN_BODY) {
        return new LSFForActionPropertyMainBodyImpl(node);
      }
      else if (type == FOR_ADD_OBJ_CLAUSE) {
        return new LSFForAddObjClauseImpl(node);
      }
      else if (type == GLOBAL_EVENT_STATEMENT) {
        return new LSFGlobalEventStatementImpl(node);
      }
      else if (type == GLOBAL_SINGLE_SELECTOR_TYPE) {
        return new LSFGlobalSingleSelectorTypeImpl(node);
      }
      else if (type == GROUPING_TYPE) {
        return new LSFGroupingTypeImpl(node);
      }
      else if (type == GROUPING_TYPE_ORDER) {
        return new LSFGroupingTypeOrderImpl(node);
      }
      else if (type == GROUP_EXPR_PROPERTY_DEFINITION) {
        return new LSFGroupExprPropertyDefinitionImpl(node);
      }
      else if (type == GROUP_OBJECT_DESTINATION) {
        return new LSFGroupObjectDestinationImpl(node);
      }
      else if (type == GROUP_OBJECT_ID) {
        return new LSFGroupObjectIDImpl(node);
      }
      else if (type == GROUP_OBJECT_REPORT_PATH) {
        return new LSFGroupObjectReportPathImpl(node);
      }
      else if (type == GROUP_OBJECT_SELECTOR) {
        return new LSFGroupObjectSelectorImpl(node);
      }
      else if (type == GROUP_OBJECT_TREE_SINGLE_SELECTOR_TYPE) {
        return new LSFGroupObjectTreeSingleSelectorTypeImpl(node);
      }
      else if (type == GROUP_OBJECT_USAGE) {
        return new LSFGroupObjectUsageImpl(node);
      }
      else if (type == GROUP_PROPERTY_BODY) {
        return new LSFGroupPropertyBodyImpl(node);
      }
      else if (type == GROUP_PROPERTY_BY) {
        return new LSFGroupPropertyByImpl(node);
      }
      else if (type == GROUP_PROPERTY_DEFINITION) {
        return new LSFGroupPropertyDefinitionImpl(node);
      }
      else if (type == GROUP_SELECTOR) {
        return new LSFGroupSelectorImpl(node);
      }
      else if (type == GROUP_SINGLE_SELECTOR_TYPE) {
        return new LSFGroupSingleSelectorTypeImpl(node);
      }
      else if (type == GROUP_STATEMENT) {
        return new LSFGroupStatementImpl(node);
      }
      else if (type == GROUP_USAGE) {
        return new LSFGroupUsageImpl(node);
      }
      else if (type == HAS_HEADER_OPTION) {
        return new LSFHasHeaderOptionImpl(node);
      }
      else if (type == HEADERS_PROPERTY_USAGE) {
        return new LSFHeadersPropertyUsageImpl(node);
      }
      else if (type == HIDE_EDIT_KEY) {
        return new LSFHideEditKeyImpl(node);
      }
      else if (type == HINT_SETTING) {
        return new LSFHintSettingImpl(node);
      }
      else if (type == IF_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFIfActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == IF_ELSE_PROPERTY_DEFINITION) {
        return new LSFIfElsePropertyDefinitionImpl(node);
      }
      else if (type == IF_PE) {
        return new LSFIfPEImpl(node);
      }
      else if (type == IMAGE_SETTING) {
        return new LSFImageSettingImpl(node);
      }
      else if (type == IMPLICIT_INTERFACE_PROPERTY_STATEMENT) {
        return new LSFImplicitInterfacePropertyStatementImpl(node);
      }
      else if (type == IMPLICIT_VALUE_PROPERTY_STATEMENT) {
        return new LSFImplicitValuePropertyStatementImpl(node);
      }
      else if (type == IMPORT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFImportActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == IMPORT_ACTION_SOURCE_TYPE) {
        return new LSFImportActionSourceTypeImpl(node);
      }
      else if (type == IMPORT_FIELD_ALIAS) {
        return new LSFImportFieldAliasImpl(node);
      }
      else if (type == IMPORT_FIELD_DEFINITION) {
        return new LSFImportFieldDefinitionImpl(node);
      }
      else if (type == IMPORT_FIELD_NAME) {
        return new LSFImportFieldNameImpl(node);
      }
      else if (type == IMPORT_FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFImportFormActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == IMPORT_FORM_HIERARCHICAL_ACTION_SOURCE_TYPE) {
        return new LSFImportFormHierarchicalActionSourceTypeImpl(node);
      }
      else if (type == IMPORT_FORM_PLAIN_ACTION_SOURCE_TYPE) {
        return new LSFImportFormPlainActionSourceTypeImpl(node);
      }
      else if (type == IMPORT_PROPERTY_USAGE) {
        return new LSFImportPropertyUsageImpl(node);
      }
      else if (type == IMPORT_PROPERTY_USAGE_WITH_ID) {
        return new LSFImportPropertyUsageWithIdImpl(node);
      }
      else if (type == INDEX_SETTING) {
        return new LSFIndexSettingImpl(node);
      }
      else if (type == INDEX_STATEMENT) {
        return new LSFIndexStatementImpl(node);
      }
      else if (type == INLINE_OPTION) {
        return new LSFInlineOptionImpl(node);
      }
      else if (type == INPUT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFInputActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == INSERT_RELATIVE_POSITION_LITERAL) {
        return new LSFInsertRelativePositionLiteralImpl(node);
      }
      else if (type == INTERNAL_ACTION) {
        return new LSFInternalActionImpl(node);
      }
      else if (type == INTERNAL_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFInternalActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == INTERNAL_CLASS) {
        return new LSFInternalClassImpl(node);
      }
      else if (type == INTERNAL_FORM_OBJECT) {
        return new LSFInternalFormObjectImpl(node);
      }
      else if (type == INTERNAL_MODULE) {
        return new LSFInternalModuleImpl(node);
      }
      else if (type == INTERNAL_PROPERTY) {
        return new LSFInternalPropertyImpl(node);
      }
      else if (type == INTERNAL_PROPERTY_DRAW) {
        return new LSFInternalPropertyDrawImpl(node);
      }
      else if (type == INTERNAL_STATEMENT) {
        return new LSFInternalStatementImpl(node);
      }
      else if (type == INT_LITERAL) {
        return new LSFIntLiteralImpl(node);
      }
      else if (type == JAVA_CLASS_STRING_USAGE) {
        return new LSFJavaClassStringUsageImpl(node);
      }
      else if (type == JOIN_PROPERTY_DEFINITION) {
        return new LSFJoinPropertyDefinitionImpl(node);
      }
      else if (type == JSON_FORM_PROPERTY_DEFINITION) {
        return new LSFJsonFormPropertyDefinitionImpl(node);
      }
      else if (type == JSON_PROPERTY_DEFINITION) {
        return new LSFJsonPropertyDefinitionImpl(node);
      }
      else if (type == JS_STRING_USAGE) {
        return new LSFJsStringUsageImpl(node);
      }
      else if (type == KEY_PRESSED_EVENT_TYPE) {
        return new LSFKeyPressedEventTypeImpl(node);
      }
      else if (type == LAZY_META_DECL_STATEMENT) {
        return new LSFLazyMetaDeclStatementImpl(node);
      }
      else if (type == LAZY_META_STATEMENT) {
        return new LSFLazyMetaStatementImpl(node);
      }
      else if (type == LAZY_SCRIPT_STATEMENT) {
        return new LSFLazyScriptStatementImpl(node);
      }
      else if (type == LIKE_PE) {
        return new LSFLikePEImpl(node);
      }
      else if (type == LIST_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFListActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == LIST_FORM_DECLARATION) {
        return new LSFListFormDeclarationImpl(node);
      }
      else if (type == LIST_VIEW_TYPE) {
        return new LSFListViewTypeImpl(node);
      }
      else if (type == LIST_WHERE_INPUT_PROPS) {
        return new LSFListWhereInputPropsImpl(node);
      }
      else if (type == LITERAL) {
        return new LSFLiteralImpl(node);
      }
      else if (type == LOCALIZED_STRING_LITERAL) {
        return new LSFLocalizedStringLiteralImpl(node);
      }
      else if (type == LOCAL_DATA_PROPERTY_DEFINITION) {
        return new LSFLocalDataPropertyDefinitionImpl(node);
      }
      else if (type == LOCAL_PROPERTY_DECLARATION_NAME) {
        return new LSFLocalPropertyDeclarationNameImpl(node);
      }
      else if (type == LOGGABLE_SETTING) {
        return new LSFLoggableSettingImpl(node);
      }
      else if (type == LOGGABLE_STATEMENT) {
        return new LSFLoggableStatementImpl(node);
      }
      else if (type == MANAGE_SESSION_CLAUSE) {
        return new LSFManageSessionClauseImpl(node);
      }
      else if (type == MAPPED_ACTION_CLASS_PARAM_DECLARE) {
        return new LSFMappedActionClassParamDeclareImpl(node);
      }
      else if (type == MAPPED_PROPERTY_CLASS_PARAM_DECLARE) {
        return new LSFMappedPropertyClassParamDeclareImpl(node);
      }
      else if (type == MAPPED_PROPERTY_EXPR_PARAM) {
        return new LSFMappedPropertyExprParamImpl(node);
      }
      else if (type == MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM) {
        return new LSFMappedPropertyOrSimpleExprParamImpl(node);
      }
      else if (type == MAP_OPTIONS) {
        return new LSFMapOptionsImpl(node);
      }
      else if (type == MAX_PROPERTY_DEFINITION) {
        return new LSFMaxPropertyDefinitionImpl(node);
      }
      else if (type == MESSAGE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFMessageActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == MESSAGE_PROPERTY_EXPRESSION) {
        return new LSFMessagePropertyExpressionImpl(node);
      }
      else if (type == METACODE_USAGE) {
        return new LSFMetacodeUsageImpl(node);
      }
      else if (type == META_CODE_BODY) {
        return new LSFMetaCodeBodyImpl(node);
      }
      else if (type == META_CODE_BODY_LEFT_BRACE) {
        return new LSFMetaCodeBodyLeftBraceImpl(node);
      }
      else if (type == META_CODE_BODY_RIGHT_BRACE) {
        return new LSFMetaCodeBodyRightBraceImpl(node);
      }
      else if (type == META_CODE_DECLARATION_STATEMENT) {
        return new LSFMetaCodeDeclarationStatementImpl(node);
      }
      else if (type == META_CODE_DECL_BODY) {
        return new LSFMetaCodeDeclBodyImpl(node);
      }
      else if (type == META_CODE_ID) {
        return new LSFMetaCodeIdImpl(node);
      }
      else if (type == META_CODE_ID_LIST) {
        return new LSFMetaCodeIdListImpl(node);
      }
      else if (type == META_CODE_LITERAL) {
        return new LSFMetaCodeLiteralImpl(node);
      }
      else if (type == META_CODE_STATEMENT) {
        return new LSFMetaCodeStatementImpl(node);
      }
      else if (type == META_CODE_STATEMENT_HEADER) {
        return new LSFMetaCodeStatementHeaderImpl(node);
      }
      else if (type == META_CODE_STATEMENT_SEMI) {
        return new LSFMetaCodeStatementSemiImpl(node);
      }
      else if (type == META_CODE_STATEMENT_TYPE) {
        return new LSFMetaCodeStatementTypeImpl(node);
      }
      else if (type == META_CODE_STRING_LITERAL) {
        return new LSFMetaCodeStringLiteralImpl(node);
      }
      else if (type == META_DECL_ID) {
        return new LSFMetaDeclIdImpl(node);
      }
      else if (type == META_DECL_ID_LIST) {
        return new LSFMetaDeclIdListImpl(node);
      }
      else if (type == MODULE_HEADER) {
        return new LSFModuleHeaderImpl(node);
      }
      else if (type == MODULE_NAME) {
        return new LSFModuleNameImpl(node);
      }
      else if (type == MODULE_NAME_STATEMENT) {
        return new LSFModuleNameStatementImpl(node);
      }
      else if (type == MODULE_USAGE) {
        return new LSFModuleUsageImpl(node);
      }
      else if (type == MOVE_COMPONENT_STATEMENT) {
        return new LSFMoveComponentStatementImpl(node);
      }
      else if (type == MOVE_NAVIGATOR_ELEMENT_STATEMENT) {
        return new LSFMoveNavigatorElementStatementImpl(node);
      }
      else if (type == MULTIPLICATIVE_PE) {
        return new LSFMultiplicativePEImpl(node);
      }
      else if (type == MULTI_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFMultiActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == MULTI_PROPERTY_DEFINITION) {
        return new LSFMultiPropertyDefinitionImpl(node);
      }
      else if (type == NAMESPACE_NAME) {
        return new LSFNamespaceNameImpl(node);
      }
      else if (type == NAMESPACE_USAGE) {
        return new LSFNamespaceUsageImpl(node);
      }
      else if (type == NATIVE_LITERAL) {
        return new LSFNativeLiteralImpl(node);
      }
      else if (type == NATIVE_PROPERTY_DEFINITION) {
        return new LSFNativePropertyDefinitionImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_BODY_STATEMENT) {
        return new LSFNavigatorElementBodyStatementImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_DESCRIPTION) {
        return new LSFNavigatorElementDescriptionImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_INSERT_POSITION) {
        return new LSFNavigatorElementInsertPositionImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_OPTIONS) {
        return new LSFNavigatorElementOptionsImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_SELECTOR) {
        return new LSFNavigatorElementSelectorImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_STATEMENT_BODY) {
        return new LSFNavigatorElementStatementBodyImpl(node);
      }
      else if (type == NAVIGATOR_ELEMENT_USAGE) {
        return new LSFNavigatorElementUsageImpl(node);
      }
      else if (type == NAVIGATOR_STATEMENT) {
        return new LSFNavigatorStatementImpl(node);
      }
      else if (type == NESTED_LOCAL_MODIFIER) {
        return new LSFNestedLocalModifierImpl(node);
      }
      else if (type == NESTED_SESSION_OPERATOR) {
        return new LSFNestedSessionOperatorImpl(node);
      }
      else if (type == NEW_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFNewActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == NEW_COMPONENT_STATEMENT) {
        return new LSFNewComponentStatementImpl(node);
      }
      else if (type == NEW_EXECUTOR_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFNewExecutorActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == NEW_NAVIGATOR_ELEMENT_STATEMENT) {
        return new LSFNewNavigatorElementStatementImpl(node);
      }
      else if (type == NEW_SESSION_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFNewSessionActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == NEW_SESSION_OPERATOR) {
        return new LSFNewSessionOperatorImpl(node);
      }
      else if (type == NEW_THREAD_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFNewThreadActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == NEW_WHERE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFNewWhereActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == NE_STUB) {
        return new LSFNeStubImpl(node);
      }
      else if (type == NON_EMPTY_ACTION_PDB_LIST) {
        return new LSFNonEmptyActionPDBListImpl(node);
      }
      else if (type == NON_EMPTY_ALIASED_PROPERTY_EXPRESSION_LIST) {
        return new LSFNonEmptyAliasedPropertyExpressionListImpl(node);
      }
      else if (type == NON_EMPTY_CLASS_NAME_LIST) {
        return new LSFNonEmptyClassNameListImpl(node);
      }
      else if (type == NON_EMPTY_CLASS_PARAM_DECLARE_LIST) {
        return new LSFNonEmptyClassParamDeclareListImpl(node);
      }
      else if (type == NON_EMPTY_CUSTOM_CLASS_USAGE_LIST) {
        return new LSFNonEmptyCustomClassUsageListImpl(node);
      }
      else if (type == NON_EMPTY_EXPLICIT_PROP_CLASS_LIST) {
        return new LSFNonEmptyExplicitPropClassListImpl(node);
      }
      else if (type == NON_EMPTY_FORM_USAGE_LIST) {
        return new LSFNonEmptyFormUsageListImpl(node);
      }
      else if (type == NON_EMPTY_GROUP_OBJECT_USAGE_LIST) {
        return new LSFNonEmptyGroupObjectUsageListImpl(node);
      }
      else if (type == NON_EMPTY_IMPORT_FIELD_DEFINITIONS) {
        return new LSFNonEmptyImportFieldDefinitionsImpl(node);
      }
      else if (type == NON_EMPTY_IMPORT_PROPERTY_USAGE_LIST_WITH_IDS) {
        return new LSFNonEmptyImportPropertyUsageListWithIdsImpl(node);
      }
      else if (type == NON_EMPTY_LOCAL_PROPERTY_DECLARATION_NAME_LIST) {
        return new LSFNonEmptyLocalPropertyDeclarationNameListImpl(node);
      }
      else if (type == NON_EMPTY_MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM_LIST) {
        return new LSFNonEmptyMappedPropertyOrSimpleExprParamListImpl(node);
      }
      else if (type == NON_EMPTY_MODULE_USAGE_LIST) {
        return new LSFNonEmptyModuleUsageListImpl(node);
      }
      else if (type == NON_EMPTY_NAMESPACE_USAGE_LIST) {
        return new LSFNonEmptyNamespaceUsageListImpl(node);
      }
      else if (type == NON_EMPTY_NO_CONTEXT_ACTION_OR_PROPERTY_USAGE_LIST) {
        return new LSFNonEmptyNoContextActionOrPropertyUsageListImpl(node);
      }
      else if (type == NON_EMPTY_NO_CONTEXT_ACTION_USAGE_LIST) {
        return new LSFNonEmptyNoContextActionUsageListImpl(node);
      }
      else if (type == NON_EMPTY_NO_CONTEXT_PROPERTY_USAGE_LIST) {
        return new LSFNonEmptyNoContextPropertyUsageListImpl(node);
      }
      else if (type == NON_EMPTY_NO_PARAMS_PROPERTY_USAGE_LIST) {
        return new LSFNonEmptyNoParamsPropertyUsageListImpl(node);
      }
      else if (type == NON_EMPTY_OBJECT_USAGE_LIST) {
        return new LSFNonEmptyObjectUsageListImpl(node);
      }
      else if (type == NON_EMPTY_PARAMETER_OR_EXPRESSION_LIST) {
        return new LSFNonEmptyParameterOrExpressionListImpl(node);
      }
      else if (type == NON_EMPTY_PROPERTY_EXPRESSION_LIST) {
        return new LSFNonEmptyPropertyExpressionListImpl(node);
      }
      else if (type == NON_EMPTY_PROPERTY_OPTIONS) {
        return new LSFNonEmptyPropertyOptionsImpl(node);
      }
      else if (type == NON_EMPTY_STATIC_OBJECT_DECL_LIST) {
        return new LSFNonEmptyStaticObjectDeclListImpl(node);
      }
      else if (type == NOT_NULL_SETTING) {
        return new LSFNotNullSettingImpl(node);
      }
      else if (type == NOT_PE) {
        return new LSFNotPEImpl(node);
      }
      else if (type == NO_CANCEL_CLAUSE) {
        return new LSFNoCancelClauseImpl(node);
      }
      else if (type == NO_CONTEXT_ACTION_OR_PROPERTY_USAGE) {
        return new LSFNoContextActionOrPropertyUsageImpl(node);
      }
      else if (type == NO_CONTEXT_ACTION_USAGE) {
        return new LSFNoContextActionUsageImpl(node);
      }
      else if (type == NO_CONTEXT_PROPERTY_USAGE) {
        return new LSFNoContextPropertyUsageImpl(node);
      }
      else if (type == NO_DEFAULT) {
        return new LSFNoDefaultImpl(node);
      }
      else if (type == NO_ESCAPE_OPTION) {
        return new LSFNoEscapeOptionImpl(node);
      }
      else if (type == NO_PARAMS_ACTION_USAGE) {
        return new LSFNoParamsActionUsageImpl(node);
      }
      else if (type == NO_PARAMS_PROPERTY_USAGE) {
        return new LSFNoParamsPropertyUsageImpl(node);
      }
      else if (type == NULL_LITERAL) {
        return new LSFNullLiteralImpl(node);
      }
      else if (type == NULL_OPTION) {
        return new LSFNullOptionImpl(node);
      }
      else if (type == OBJECT_EXPR) {
        return new LSFObjectExprImpl(node);
      }
      else if (type == OBJECT_ID) {
        return new LSFObjectIDImpl(node);
      }
      else if (type == OBJECT_INPUT_PROPS) {
        return new LSFObjectInputPropsImpl(node);
      }
      else if (type == OBJECT_IN_PROPS) {
        return new LSFObjectInPropsImpl(node);
      }
      else if (type == OBJECT_LIST_INPUT_PROPS) {
        return new LSFObjectListInputPropsImpl(node);
      }
      else if (type == OBJECT_USAGE) {
        return new LSFObjectUsageImpl(node);
      }
      else if (type == OBJECT_USAGE_LIST) {
        return new LSFObjectUsageListImpl(node);
      }
      else if (type == ON_EDIT_EVENT_SETTING) {
        return new LSFOnEditEventSettingImpl(node);
      }
      else if (type == ORDER_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFOrderActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == ORDER_PROPERTY_BY) {
        return new LSFOrderPropertyByImpl(node);
      }
      else if (type == ORIENTATION) {
        return new LSFOrientationImpl(node);
      }
      else if (type == OR_PE) {
        return new LSFOrPEImpl(node);
      }
      else if (type == OVERRIDE_ACTION_STATEMENT) {
        return new LSFOverrideActionStatementImpl(node);
      }
      else if (type == OVERRIDE_OPERATOR) {
        return new LSFOverrideOperatorImpl(node);
      }
      else if (type == OVERRIDE_PROPERTY_DEFINITION) {
        return new LSFOverridePropertyDefinitionImpl(node);
      }
      else if (type == OVERRIDE_PROPERTY_STATEMENT) {
        return new LSFOverridePropertyStatementImpl(node);
      }
      else if (type == PARAMETER_OR_EXPRESSION) {
        return new LSFParameterOrExpressionImpl(node);
      }
      else if (type == PARAMETER_OR_EXPRESSION_LIST) {
        return new LSFParameterOrExpressionListImpl(node);
      }
      else if (type == PARAM_DECLARE) {
        return new LSFParamDeclareImpl(node);
      }
      else if (type == PARTITION_PROPERTY_BY) {
        return new LSFPartitionPropertyByImpl(node);
      }
      else if (type == PARTITION_PROPERTY_DEFINITION) {
        return new LSFPartitionPropertyDefinitionImpl(node);
      }
      else if (type == PATTERN_SETTING) {
        return new LSFPatternSettingImpl(node);
      }
      else if (type == PERSISTENT_SETTING) {
        return new LSFPersistentSettingImpl(node);
      }
      else if (type == PIVOT_OPTIONS) {
        return new LSFPivotOptionsImpl(node);
      }
      else if (type == PIVOT_PROPERTY_DRAW_LIST) {
        return new LSFPivotPropertyDrawListImpl(node);
      }
      else if (type == POSTFIX_UNARY_PE) {
        return new LSFPostfixUnaryPEImpl(node);
      }
      else if (type == PREDEFINED_ADD_PROPERTY_NAME) {
        return new LSFPredefinedAddPropertyNameImpl(node);
      }
      else if (type == PREDEFINED_FORM_PROPERTY_NAME) {
        return new LSFPredefinedFormPropertyNameImpl(node);
      }
      else if (type == PREREAD_SETTING) {
        return new LSFPrereadSettingImpl(node);
      }
      else if (type == PRINT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFPrintActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == PRIORITY_LIST) {
        return new LSFPriorityListImpl(node);
      }
      else if (type == PROPERTY_CALC_STATEMENT) {
        return new LSFPropertyCalcStatementImpl(node);
      }
      else if (type == PROPERTY_CUSTOM_VIEW) {
        return new LSFPropertyCustomViewImpl(node);
      }
      else if (type == PROPERTY_DECLARATION) {
        return new LSFPropertyDeclarationImpl(node);
      }
      else if (type == PROPERTY_DECL_PARAMS) {
        return new LSFPropertyDeclParamsImpl(node);
      }
      else if (type == PROPERTY_ELSE_ACTION_USAGE) {
        return new LSFPropertyElseActionUsageImpl(node);
      }
      else if (type == PROPERTY_EXPRESSION) {
        return new LSFPropertyExpressionImpl(node);
      }
      else if (type == PROPERTY_EXPRESSION_LIST) {
        return new LSFPropertyExpressionListImpl(node);
      }
      else if (type == PROPERTY_EXPRESSION_WITH_ORDER) {
        return new LSFPropertyExpressionWithOrderImpl(node);
      }
      else if (type == PROPERTY_EXPR_OBJECT) {
        return new LSFPropertyExprObjectImpl(node);
      }
      else if (type == PROPERTY_SELECTOR) {
        return new LSFPropertySelectorImpl(node);
      }
      else if (type == PROPERTY_STATEMENT) {
        return new LSFPropertyStatementImpl(node);
      }
      else if (type == PROPERTY_USAGE) {
        return new LSFPropertyUsageImpl(node);
      }
      else if (type == PROPERTY_USAGE_WRAPPER) {
        return new LSFPropertyUsageWrapperImpl(node);
      }
      else if (type == READ_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFReadActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == READ_FILTER_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFReadFilterActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == READ_ORDER_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFReadOrderActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == RECALCULATE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFRecalculateActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == RECURSIVE_PROPERTY_DEFINITION) {
        return new LSFRecursivePropertyDefinitionImpl(node);
      }
      else if (type == REFLECTION_PROPERTY_DEFINITION) {
        return new LSFReflectionPropertyDefinitionImpl(node);
      }
      else if (type == REFLECTION_PROPERTY_TYPE) {
        return new LSFReflectionPropertyTypeImpl(node);
      }
      else if (type == REGEXP_SETTING) {
        return new LSFRegexpSettingImpl(node);
      }
      else if (type == REGULAR_FILTER_DECLARATION) {
        return new LSFRegularFilterDeclarationImpl(node);
      }
      else if (type == RELATIONAL_PE) {
        return new LSFRelationalPEImpl(node);
      }
      else if (type == REMOVE_COMPONENT_STATEMENT) {
        return new LSFRemoveComponentStatementImpl(node);
      }
      else if (type == RENDER_PROPERTY_CUSTOM_VIEW) {
        return new LSFRenderPropertyCustomViewImpl(node);
      }
      else if (type == REPORT_FILES_DECLARATION) {
        return new LSFReportFilesDeclarationImpl(node);
      }
      else if (type == REPORT_SETTING) {
        return new LSFReportSettingImpl(node);
      }
      else if (type == REQUEST_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFRequestActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == REQUIRE_LIST) {
        return new LSFRequireListImpl(node);
      }
      else if (type == RETURN_ACTION_OPERATOR) {
        return new LSFReturnActionOperatorImpl(node);
      }
      else if (type == ROUND_PROPERTY_DEFINITION) {
        return new LSFRoundPropertyDefinitionImpl(node);
      }
      else if (type == SCRIPT_STATEMENT) {
        return new LSFScriptStatementImpl(node);
      }
      else if (type == SEEK_OBJECT_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFSeekObjectActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == SELECT_TOP) {
        return new LSFSelectTopImpl(node);
      }
      else if (type == SELECT_TOPS) {
        return new LSFSelectTopsImpl(node);
      }
      else if (type == SESSION_PROPERTY_DEFINITION) {
        return new LSFSessionPropertyDefinitionImpl(node);
      }
      else if (type == SESSION_PROPERTY_TYPE) {
        return new LSFSessionPropertyTypeImpl(node);
      }
      else if (type == SETUP_COMPONENT_STATEMENT) {
        return new LSFSetupComponentStatementImpl(node);
      }
      else if (type == SETUP_NAVIGATOR_ELEMENT_STATEMENT) {
        return new LSFSetupNavigatorElementStatementImpl(node);
      }
      else if (type == SET_OBJECT_PROPERTY_STATEMENT) {
        return new LSFSetObjectPropertyStatementImpl(node);
      }
      else if (type == SHEET_EXPRESSION) {
        return new LSFSheetExpressionImpl(node);
      }
      else if (type == SHOW_DEP_STATEMENT) {
        return new LSFShowDepStatementImpl(node);
      }
      else if (type == SIGNATURE_PROPERTY_DEFINITION) {
        return new LSFSignaturePropertyDefinitionImpl(node);
      }
      else if (type == SIMPLE_ELEMENT_DESCRIPTION) {
        return new LSFSimpleElementDescriptionImpl(node);
      }
      else if (type == SIMPLE_NAME) {
        return new LSFSimpleNameImpl(node);
      }
      else if (type == SIMPLE_NAME_WITH_CAPTION) {
        return new LSFSimpleNameWithCaptionImpl(node);
      }
      else if (type == SIMPLE_PE) {
        return new LSFSimplePEImpl(node);
      }
      else if (type == STATIC_DESTINATION) {
        return new LSFStaticDestinationImpl(node);
      }
      else if (type == STATIC_OBJECT_DECL) {
        return new LSFStaticObjectDeclImpl(node);
      }
      else if (type == STATIC_OBJECT_DECL_LIST) {
        return new LSFStaticObjectDeclListImpl(node);
      }
      else if (type == STATIC_OBJECT_ID) {
        return new LSFStaticObjectIDImpl(node);
      }
      else if (type == STATIC_OBJECT_IMAGE) {
        return new LSFStaticObjectImageImpl(node);
      }
      else if (type == STATIC_RELATIVE_POSITION) {
        return new LSFStaticRelativePositionImpl(node);
      }
      else if (type == STICKY_OPTION) {
        return new LSFStickyOptionImpl(node);
      }
      else if (type == STRING_LITERAL) {
        return new LSFStringLiteralImpl(node);
      }
      else if (type == STRUCT_CREATION_PROPERTY_DEFINITION) {
        return new LSFStructCreationPropertyDefinitionImpl(node);
      }
      else if (type == STUB_STATEMENT) {
        return new LSFStubStatementImpl(node);
      }
      else if (type == SYNC_TYPE_LITERAL) {
        return new LSFSyncTypeLiteralImpl(node);
      }
      else if (type == TABLE_STATEMENT) {
        return new LSFTableStatementImpl(node);
      }
      else if (type == TABLE_USAGE) {
        return new LSFTableUsageImpl(node);
      }
      else if (type == TBOOLEAN_LITERAL) {
        return new LSFTbooleanLiteralImpl(node);
      }
      else if (type == TERMINAL_FLOW_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFTerminalFlowActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == TIME_LITERAL) {
        return new LSFTimeLiteralImpl(node);
      }
      else if (type == TREE_GROUP_DECLARATION) {
        return new LSFTreeGroupDeclarationImpl(node);
      }
      else if (type == TREE_GROUP_PARENT_DECLARATION) {
        return new LSFTreeGroupParentDeclarationImpl(node);
      }
      else if (type == TREE_GROUP_SELECTOR) {
        return new LSFTreeGroupSelectorImpl(node);
      }
      else if (type == TREE_GROUP_USAGE) {
        return new LSFTreeGroupUsageImpl(node);
      }
      else if (type == TRY_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFTryActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == TYPE_IS) {
        return new LSFTypeIsImpl(node);
      }
      else if (type == TYPE_MULT) {
        return new LSFTypeMultImpl(node);
      }
      else if (type == TYPE_PROPERTY_DEFINITION) {
        return new LSFTypePropertyDefinitionImpl(node);
      }
      else if (type == UDOUBLE_LITERAL) {
        return new LSFUdoubleLiteralImpl(node);
      }
      else if (type == UINT_LITERAL) {
        return new LSFUintLiteralImpl(node);
      }
      else if (type == ULONG_LITERAL) {
        return new LSFUlongLiteralImpl(node);
      }
      else if (type == UNARY_MINUS_PE) {
        return new LSFUnaryMinusPEImpl(node);
      }
      else if (type == UNTYPED_PARAM_DECLARE) {
        return new LSFUntypedParamDeclareImpl(node);
      }
      else if (type == UNUMERIC_LITERAL) {
        return new LSFUnumericLiteralImpl(node);
      }
      else if (type == USER_FILTERS_DECLARATION) {
        return new LSFUserFiltersDeclarationImpl(node);
      }
      else if (type == VIEW_TYPE_SETTING) {
        return new LSFViewTypeSettingImpl(node);
      }
      else if (type == WHERE_PROPERTY_EXPRESSION) {
        return new LSFWherePropertyExpressionImpl(node);
      }
      else if (type == WHILE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFWhileActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == WINDOW_CREATE_STATEMENT) {
        return new LSFWindowCreateStatementImpl(node);
      }
      else if (type == WINDOW_HIDE_STATEMENT) {
        return new LSFWindowHideStatementImpl(node);
      }
      else if (type == WINDOW_OPTIONS) {
        return new LSFWindowOptionsImpl(node);
      }
      else if (type == WINDOW_STATEMENT) {
        return new LSFWindowStatementImpl(node);
      }
      else if (type == WINDOW_TYPE) {
        return new LSFWindowTypeImpl(node);
      }
      else if (type == WINDOW_TYPE_LITERAL) {
        return new LSFWindowTypeLiteralImpl(node);
      }
      else if (type == WINDOW_USAGE) {
        return new LSFWindowUsageImpl(node);
      }
      else if (type == WRITE_ACTION_PROPERTY_DEFINITION_BODY) {
        return new LSFWriteActionPropertyDefinitionBodyImpl(node);
      }
      else if (type == WRITE_WHEN_STATEMENT) {
        return new LSFWriteWhenStatementImpl(node);
      }
      else if (type == XOR_PE) {
        return new LSFXorPEImpl(node);
      }
      return new ASTWrapperPsiElement(node);
    }
    public static <T extends PsiElement> Class<T> getPsiElementClassByType(IElementType type) {
      Class<? extends PsiElement> clazz;
      if (type == ABSTRACT_ACTION_PROPERTY_DEFINITION) {
        clazz = LSFAbstractActionPropertyDefinitionImpl.class;
      }
      else if (type == ABSTRACT_CASE_ADD_OPTION) {
        clazz = LSFAbstractCaseAddOptionImpl.class;
      }
      else if (type == ABSTRACT_EXCLUSIVE_OVERRIDE_OPTION) {
        clazz = LSFAbstractExclusiveOverrideOptionImpl.class;
      }
      else if (type == ABSTRACT_PROPERTY_DEFINITION) {
        clazz = LSFAbstractPropertyDefinitionImpl.class;
      }
      else if (type == ACTION_CASE_BRANCH_BODY) {
        clazz = LSFActionCaseBranchBodyImpl.class;
      }
      else if (type == ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ACTION_STATEMENT) {
        clazz = LSFActionStatementImpl.class;
      }
      else if (type == ACTION_UNFRIENDLY_PD) {
        clazz = LSFActionUnfriendlyPDImpl.class;
      }
      else if (type == ACTION_USAGE) {
        clazz = LSFActionUsageImpl.class;
      }
      else if (type == ACTION_USAGE_WRAPPER) {
        clazz = LSFActionUsageWrapperImpl.class;
      }
      else if (type == ACTIVATE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFActivateActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ACTIVE_FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFActiveFormActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ACTIVE_TAB_PROPERTY_DEFINITION) {
        clazz = LSFActiveTabPropertyDefinitionImpl.class;
      }
      else if (type == ADDITIVE_ORPE) {
        clazz = LSFAdditiveORPEImpl.class;
      }
      else if (type == ADDITIVE_PE) {
        clazz = LSFAdditivePEImpl.class;
      }
      else if (type == AGGR_PARAM_PROP_DECLARE) {
        clazz = LSFAggrParamPropDeclareImpl.class;
      }
      else if (type == AGGR_PROPERTY_DEFINITION) {
        clazz = LSFAggrPropertyDefinitionImpl.class;
      }
      else if (type == AGGR_SETTING) {
        clazz = LSFAggrSettingImpl.class;
      }
      else if (type == ALIASED_PROPERTY_EXPRESSION) {
        clazz = LSFAliasedPropertyExpressionImpl.class;
      }
      else if (type == ALIAS_USAGE) {
        clazz = LSFAliasUsageImpl.class;
      }
      else if (type == ALIGNMENT_LITERAL) {
        clazz = LSFAlignmentLiteralImpl.class;
      }
      else if (type == AND_PE) {
        clazz = LSFAndPEImpl.class;
      }
      else if (type == APPLY_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFApplyActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ASPECT_AFTER) {
        clazz = LSFAspectAfterImpl.class;
      }
      else if (type == ASPECT_BEFORE) {
        clazz = LSFAspectBeforeImpl.class;
      }
      else if (type == ASPECT_STATEMENT) {
        clazz = LSFAspectStatementImpl.class;
      }
      else if (type == ASSIGN_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFAssignActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ASYNC_UPDATE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFAsyncUpdateActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == AS_EDIT_ACTION_SETTING) {
        clazz = LSFAsEditActionSettingImpl.class;
      }
      else if (type == AUTOREFRESH_LITERAL) {
        clazz = LSFAutorefreshLiteralImpl.class;
      }
      else if (type == AUTOSET_SETTING) {
        clazz = LSFAutosetSettingImpl.class;
      }
      else if (type == BASE_EVENT) {
        clazz = LSFBaseEventImpl.class;
      }
      else if (type == BASE_EVENT_NOT_PE) {
        clazz = LSFBaseEventNotPEImpl.class;
      }
      else if (type == BASE_EVENT_PE) {
        clazz = LSFBaseEventPEImpl.class;
      }
      else if (type == BOOLEAN_LITERAL) {
        clazz = LSFBooleanLiteralImpl.class;
      }
      else if (type == BORDER_POSITION) {
        clazz = LSFBorderPositionImpl.class;
      }
      else if (type == BOUNDS_DOUBLE_LITERAL) {
        clazz = LSFBoundsDoubleLiteralImpl.class;
      }
      else if (type == BOUNDS_INT_LITERAL) {
        clazz = LSFBoundsIntLiteralImpl.class;
      }
      else if (type == BRACKETED_CLASS_NAME_LIST) {
        clazz = LSFBracketedClassNameListImpl.class;
      }
      else if (type == BREAK_ACTION_OPERATOR) {
        clazz = LSFBreakActionOperatorImpl.class;
      }
      else if (type == BUILT_IN_CLASS_NAME) {
        clazz = LSFBuiltInClassNameImpl.class;
      }
      else if (type == CANCEL_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFCancelActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == CASE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFCaseActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == CASE_BRANCH_BODY) {
        clazz = LSFCaseBranchBodyImpl.class;
      }
      else if (type == CASE_PROPERTY_DEFINITION) {
        clazz = LSFCasePropertyDefinitionImpl.class;
      }
      else if (type == CAST_PROPERTY_DEFINITION) {
        clazz = LSFCastPropertyDefinitionImpl.class;
      }
      else if (type == CHANGE_CLASS_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFChangeClassActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == CHANGE_CLASS_WHERE) {
        clazz = LSFChangeClassWhereImpl.class;
      }
      else if (type == CHANGE_INPUT) {
        clazz = LSFChangeInputImpl.class;
      }
      else if (type == CHANGE_INPUT_PROPERTY_CUSTOM_VIEW) {
        clazz = LSFChangeInputPropertyCustomViewImpl.class;
      }
      else if (type == CHANGE_KEY_SETTING) {
        clazz = LSFChangeKeySettingImpl.class;
      }
      else if (type == CHANGE_MOUSE_SETTING) {
        clazz = LSFChangeMouseSettingImpl.class;
      }
      else if (type == CHANGE_PROPERTY_BODY) {
        clazz = LSFChangePropertyBodyImpl.class;
      }
      else if (type == CHANGE_PROPERTY_CUSTOM_VIEW) {
        clazz = LSFChangePropertyCustomViewImpl.class;
      }
      else if (type == CHAR_WIDTH_SETTING) {
        clazz = LSFCharWidthSettingImpl.class;
      }
      else if (type == CLASS_DECL) {
        clazz = LSFClassDeclImpl.class;
      }
      else if (type == CLASS_NAME) {
        clazz = LSFClassNameImpl.class;
      }
      else if (type == CLASS_NAME_LIST) {
        clazz = LSFClassNameListImpl.class;
      }
      else if (type == CLASS_OR_EXPRESSION) {
        clazz = LSFClassOrExpressionImpl.class;
      }
      else if (type == CLASS_PARAM_DECLARE) {
        clazz = LSFClassParamDeclareImpl.class;
      }
      else if (type == CLASS_PARAM_DECLARE_LIST) {
        clazz = LSFClassParamDeclareListImpl.class;
      }
      else if (type == CLASS_PARENTS_LIST) {
        clazz = LSFClassParentsListImpl.class;
      }
      else if (type == CLASS_STATEMENT) {
        clazz = LSFClassStatementImpl.class;
      }
      else if (type == CLASS_VIEW_TYPE) {
        clazz = LSFClassViewTypeImpl.class;
      }
      else if (type == CLOSE_FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFCloseFormActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == CODE_LITERAL) {
        clazz = LSFCodeLiteralImpl.class;
      }
      else if (type == COLLAPSE_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFCollapseGroupObjectActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == COLOR_LITERAL) {
        clazz = LSFColorLiteralImpl.class;
      }
      else if (type == COMPLEX_SETTING) {
        clazz = LSFComplexSettingImpl.class;
      }
      else if (type == COMPONENT_BLOCK_STATEMENT) {
        clazz = LSFComponentBlockStatementImpl.class;
      }
      else if (type == COMPONENT_BODY) {
        clazz = LSFComponentBodyImpl.class;
      }
      else if (type == COMPONENT_DECL) {
        clazz = LSFComponentDeclImpl.class;
      }
      else if (type == COMPONENT_ID) {
        clazz = LSFComponentIDImpl.class;
      }
      else if (type == COMPONENT_INSERT_POSITION) {
        clazz = LSFComponentInsertPositionImpl.class;
      }
      else if (type == COMPONENT_PROPERTY_VALUE) {
        clazz = LSFComponentPropertyValueImpl.class;
      }
      else if (type == COMPONENT_SELECTOR) {
        clazz = LSFComponentSelectorImpl.class;
      }
      else if (type == COMPONENT_STATEMENT) {
        clazz = LSFComponentStatementImpl.class;
      }
      else if (type == COMPONENT_STUB_STATEMENT) {
        clazz = LSFComponentStubStatementImpl.class;
      }
      else if (type == COMPONENT_USAGE) {
        clazz = LSFComponentUsageImpl.class;
      }
      else if (type == COMPOUND_ID) {
        clazz = LSFCompoundIDImpl.class;
      }
      else if (type == CONCAT_PROPERTY_DEFINITION) {
        clazz = LSFConcatPropertyDefinitionImpl.class;
      }
      else if (type == CONFIRM_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFConfirmActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == CONFIRM_SETTING) {
        clazz = LSFConfirmSettingImpl.class;
      }
      else if (type == CONSTRAINT_FILTER) {
        clazz = LSFConstraintFilterImpl.class;
      }
      else if (type == CONSTRAINT_STATEMENT) {
        clazz = LSFConstraintStatementImpl.class;
      }
      else if (type == CONTAINER_TYPE_LITERAL) {
        clazz = LSFContainerTypeLiteralImpl.class;
      }
      else if (type == CONTEXT_ACTION) {
        clazz = LSFContextActionImpl.class;
      }
      else if (type == CONTEXT_ACTIONS) {
        clazz = LSFContextActionsImpl.class;
      }
      else if (type == CONTEXT_FILTERS_CLAUSE) {
        clazz = LSFContextFiltersClauseImpl.class;
      }
      else if (type == CONTEXT_MENU_EVENT_TYPE) {
        clazz = LSFContextMenuEventTypeImpl.class;
      }
      else if (type == CONTINUE_ACTION_OPERATOR) {
        clazz = LSFContinueActionOperatorImpl.class;
      }
      else if (type == CUSTOM_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFCustomActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == CUSTOM_CLASS_USAGE) {
        clazz = LSFCustomClassUsageImpl.class;
      }
      else if (type == CUSTOM_CLASS_USAGE_WRAPPER) {
        clazz = LSFCustomClassUsageWrapperImpl.class;
      }
      else if (type == CUSTOM_FORM_DESIGN_OPTION) {
        clazz = LSFCustomFormDesignOptionImpl.class;
      }
      else if (type == CUSTOM_HEADER_LITERAL) {
        clazz = LSFCustomHeaderLiteralImpl.class;
      }
      else if (type == CUSTOM_VIEW_SETTING) {
        clazz = LSFCustomViewSettingImpl.class;
      }
      else if (type == DATA_PROPERTY_DEFINITION) {
        clazz = LSFDataPropertyDefinitionImpl.class;
      }
      else if (type == DATA_PROPERTY_SESSION_MODIFIER) {
        clazz = LSFDataPropertySessionModifierImpl.class;
      }
      else if (type == DATE_LITERAL) {
        clazz = LSFDateLiteralImpl.class;
      }
      else if (type == DATE_TIME_LITERAL) {
        clazz = LSFDateTimeLiteralImpl.class;
      }
      else if (type == DEFAULT_COMPARE_SETTING) {
        clazz = LSFDefaultCompareSettingImpl.class;
      }
      else if (type == DELETE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFDeleteActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == DESIGN_CALC_PROPERTY_OBJECT) {
        clazz = LSFDesignCalcPropertyObjectImpl.class;
      }
      else if (type == DESIGN_HEADER) {
        clazz = LSFDesignHeaderImpl.class;
      }
      else if (type == DESIGN_STATEMENT) {
        clazz = LSFDesignStatementImpl.class;
      }
      else if (type == DIALOG_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFDialogActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == DIMENSION_LITERAL) {
        clazz = LSFDimensionLiteralImpl.class;
      }
      else if (type == DOCK_POSITION) {
        clazz = LSFDockPositionImpl.class;
      }
      else if (type == DOUBLE_LITERAL) {
        clazz = LSFDoubleLiteralImpl.class;
      }
      else if (type == DO_INPUT_BODY) {
        clazz = LSFDoInputBodyImpl.class;
      }
      else if (type == DO_MAIN_BODY) {
        clazz = LSFDoMainBodyImpl.class;
      }
      else if (type == DRAW_ROOT) {
        clazz = LSFDrawRootImpl.class;
      }
      else if (type == DRILL_DOWN_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFDrillDownActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ECHO_SYMBOLS_SETTING) {
        clazz = LSFEchoSymbolsSettingImpl.class;
      }
      else if (type == EDIT_FORM_DECLARATION) {
        clazz = LSFEditFormDeclarationImpl.class;
      }
      else if (type == EMAIL_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFEmailActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EMAIL_PROPERTY_USAGE) {
        clazz = LSFEmailPropertyUsageImpl.class;
      }
      else if (type == EMAIL_RECIPIENT_TYPE_LITERAL) {
        clazz = LSFEmailRecipientTypeLiteralImpl.class;
      }
      else if (type == EMPTY_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFEmptyActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EMPTY_EXPLICIT_PROP_CLASS_LIST) {
        clazz = LSFEmptyExplicitPropClassListImpl.class;
      }
      else if (type == EMPTY_STATEMENT) {
        clazz = LSFEmptyStatementImpl.class;
      }
      else if (type == EQUALITY_PE) {
        clazz = LSFEqualityPEImpl.class;
      }
      else if (type == EQUALS_SIGN) {
        clazz = LSFEqualsSignImpl.class;
      }
      else if (type == EVAL_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFEvalActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EVENT_ID_SETTING) {
        clazz = LSFEventIdSettingImpl.class;
      }
      else if (type == EVENT_STATEMENT) {
        clazz = LSFEventStatementImpl.class;
      }
      else if (type == EXCLUSIVE_OPERATOR) {
        clazz = LSFExclusiveOperatorImpl.class;
      }
      else if (type == EXCLUSIVE_OVERRIDE_OPTION) {
        clazz = LSFExclusiveOverrideOptionImpl.class;
      }
      else if (type == EXEC_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFExecActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EXPAND_COLLAPSE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFExpandCollapseActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EXPAND_GROUP_OBJECT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFExpandGroupObjectActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EXPLICIT_INTERFACE_ACT_STATEMENT) {
        clazz = LSFExplicitInterfaceActStatementImpl.class;
      }
      else if (type == EXPLICIT_INTERFACE_PROPERTY_STATEMENT) {
        clazz = LSFExplicitInterfacePropertyStatementImpl.class;
      }
      else if (type == EXPLICIT_PROP_CLASS) {
        clazz = LSFExplicitPropClassImpl.class;
      }
      else if (type == EXPLICIT_PROP_CLASS_USAGE) {
        clazz = LSFExplicitPropClassUsageImpl.class;
      }
      else if (type == EXPLICIT_VALUE_PROPERTY_STATEMENT) {
        clazz = LSFExplicitValuePropertyStatementImpl.class;
      }
      else if (type == EXPORT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFExportActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EXPORT_DATA_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFExportDataActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == EXPRESSION_FRIENDLY_PD) {
        clazz = LSFExpressionFriendlyPDImpl.class;
      }
      else if (type == EXPRESSION_LITERAL) {
        clazz = LSFExpressionLiteralImpl.class;
      }
      else if (type == EXPRESSION_PRIMITIVE) {
        clazz = LSFExpressionPrimitiveImpl.class;
      }
      else if (type == EXPRESSION_STRING_LITERAL) {
        clazz = LSFExpressionStringLiteralImpl.class;
      }
      else if (type == EXPRESSION_UNFRIENDLY_PD) {
        clazz = LSFExpressionUnfriendlyPDImpl.class;
      }
      else if (type == EXPR_PARAMETER_NAME_USAGE) {
        clazz = LSFExprParameterNameUsageImpl.class;
      }
      else if (type == EXPR_PARAMETER_USAGE) {
        clazz = LSFExprParameterUsageImpl.class;
      }
      else if (type == EXPR_PARAMETER_USAGE_LIST) {
        clazz = LSFExprParameterUsageListImpl.class;
      }
      else if (type == EXTENDING_CLASS_DECLARATION) {
        clazz = LSFExtendingClassDeclarationImpl.class;
      }
      else if (type == EXTENDING_FORM_DECLARATION) {
        clazz = LSFExtendingFormDeclarationImpl.class;
      }
      else if (type == EXTERNAL_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFExternalActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == FILTER_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFFilterActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == FILTER_GROUP_NAME) {
        clazz = LSFFilterGroupNameImpl.class;
      }
      else if (type == FILTER_GROUP_SELECTOR) {
        clazz = LSFFilterGroupSelectorImpl.class;
      }
      else if (type == FILTER_GROUP_USAGE) {
        clazz = LSFFilterGroupUsageImpl.class;
      }
      else if (type == FILTER_PROPERTY_DEFINITION) {
        clazz = LSFFilterPropertyDefinitionImpl.class;
      }
      else if (type == FILTER_PROPERTY_SELECTOR) {
        clazz = LSFFilterPropertySelectorImpl.class;
      }
      else if (type == FILTER_SET_DEFAULT) {
        clazz = LSFFilterSetDefaultImpl.class;
      }
      else if (type == FLEX_ALIGNMENT_LITERAL) {
        clazz = LSFFlexAlignmentLiteralImpl.class;
      }
      else if (type == FLEX_CHAR_WIDTH_SETTING) {
        clazz = LSFFlexCharWidthSettingImpl.class;
      }
      else if (type == FOLLOWS_STATEMENT) {
        clazz = LSFFollowsStatementImpl.class;
      }
      else if (type == FORMULA_PROPERTY_DEFINITION) {
        clazz = LSFFormulaPropertyDefinitionImpl.class;
      }
      else if (type == FORMULA_PROPERTY_SYNTAX) {
        clazz = LSFFormulaPropertySyntaxImpl.class;
      }
      else if (type == FORMULA_PROPERTY_SYNTAX_LIST) {
        clazz = LSFFormulaPropertySyntaxListImpl.class;
      }
      else if (type == FORMULA_PROPERTY_SYNTAX_TYPE) {
        clazz = LSFFormulaPropertySyntaxTypeImpl.class;
      }
      else if (type == FORM_ACTION_DECLARATION) {
        clazz = LSFFormActionDeclarationImpl.class;
      }
      else if (type == FORM_ACTION_OBJECT) {
        clazz = LSFFormActionObjectImpl.class;
      }
      else if (type == FORM_ACTION_OBJECT_LIST) {
        clazz = LSFFormActionObjectListImpl.class;
      }
      else if (type == FORM_ACTION_OBJECT_USAGE) {
        clazz = LSFFormActionObjectUsageImpl.class;
      }
      else if (type == FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFFormActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == FORM_ACTION_PROPERTY_OBJECT) {
        clazz = LSFFormActionPropertyObjectImpl.class;
      }
      else if (type == FORM_CALC_PROPERTY_OBJECT) {
        clazz = LSFFormCalcPropertyObjectImpl.class;
      }
      else if (type == FORM_DECL) {
        clazz = LSFFormDeclImpl.class;
      }
      else if (type == FORM_ELSE_NO_PARAMS_ACTION_USAGE) {
        clazz = LSFFormElseNoParamsActionUsageImpl.class;
      }
      else if (type == FORM_EVENTS_LIST) {
        clazz = LSFFormEventsListImpl.class;
      }
      else if (type == FORM_EVENT_DECLARATION) {
        clazz = LSFFormEventDeclarationImpl.class;
      }
      else if (type == FORM_EVENT_TYPE) {
        clazz = LSFFormEventTypeImpl.class;
      }
      else if (type == FORM_EXPR_DECLARATION) {
        clazz = LSFFormExprDeclarationImpl.class;
      }
      else if (type == FORM_EXTEND_FILTER_GROUP_DECLARATION) {
        clazz = LSFFormExtendFilterGroupDeclarationImpl.class;
      }
      else if (type == FORM_EXT_ID) {
        clazz = LSFFormExtIDImpl.class;
      }
      else if (type == FORM_EXT_ID_SETTING) {
        clazz = LSFFormExtIDSettingImpl.class;
      }
      else if (type == FORM_EXT_KEY) {
        clazz = LSFFormExtKeyImpl.class;
      }
      else if (type == FORM_FILTERS_LIST) {
        clazz = LSFFormFiltersListImpl.class;
      }
      else if (type == FORM_FILTER_GROUP_DECLARATION) {
        clazz = LSFFormFilterGroupDeclarationImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT) {
        clazz = LSFFormGroupObjectImpl.class;
      }
      else if (type == FORM_GROUP_OBJECTS_LIST) {
        clazz = LSFFormGroupObjectsListImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_BACKGROUND) {
        clazz = LSFFormGroupObjectBackgroundImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_DECLARATION) {
        clazz = LSFFormGroupObjectDeclarationImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_FOREGROUND) {
        clazz = LSFFormGroupObjectForegroundImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_INIT_VIEW_TYPE) {
        clazz = LSFFormGroupObjectInitViewTypeImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_OPTIONS) {
        clazz = LSFFormGroupObjectOptionsImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_PAGE_SIZE) {
        clazz = LSFFormGroupObjectPageSizeImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_RELATIVE_POSITION) {
        clazz = LSFFormGroupObjectRelativePositionImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_UPDATE) {
        clazz = LSFFormGroupObjectUpdateImpl.class;
      }
      else if (type == FORM_GROUP_OBJECT_VIEW_TYPE) {
        clazz = LSFFormGroupObjectViewTypeImpl.class;
      }
      else if (type == FORM_HINTS_LIST) {
        clazz = LSFFormHintsListImpl.class;
      }
      else if (type == FORM_IN_GROUP) {
        clazz = LSFFormInGroupImpl.class;
      }
      else if (type == FORM_MAPPED_NAME_PROPERTIES_LIST) {
        clazz = LSFFormMappedNamePropertiesListImpl.class;
      }
      else if (type == FORM_MAPPED_PROPERTIES_LIST) {
        clazz = LSFFormMappedPropertiesListImpl.class;
      }
      else if (type == FORM_MULTI_GROUP_OBJECT_DECLARATION) {
        clazz = LSFFormMultiGroupObjectDeclarationImpl.class;
      }
      else if (type == FORM_OBJECT_DECLARATION) {
        clazz = LSFFormObjectDeclarationImpl.class;
      }
      else if (type == FORM_OPTIONS_ON_EVENTS) {
        clazz = LSFFormOptionsOnEventsImpl.class;
      }
      else if (type == FORM_OPTIONS_WITH_CALC_PROPERTY_OBJECT) {
        clazz = LSFFormOptionsWithCalcPropertyObjectImpl.class;
      }
      else if (type == FORM_OPTIONS_WITH_OPTIONAL_CALC_PROPERTY_OBJECT) {
        clazz = LSFFormOptionsWithOptionalCalcPropertyObjectImpl.class;
      }
      else if (type == FORM_OPTION_COLUMNS) {
        clazz = LSFFormOptionColumnsImpl.class;
      }
      else if (type == FORM_OPTION_CUSTOM_VIEW) {
        clazz = LSFFormOptionCustomViewImpl.class;
      }
      else if (type == FORM_OPTION_EVENT_ID) {
        clazz = LSFFormOptionEventIdImpl.class;
      }
      else if (type == FORM_OPTION_FORCE) {
        clazz = LSFFormOptionForceImpl.class;
      }
      else if (type == FORM_OPTION_INSERT_TYPE) {
        clazz = LSFFormOptionInsertTypeImpl.class;
      }
      else if (type == FORM_OPTION_QUICK_FILTER) {
        clazz = LSFFormOptionQuickFilterImpl.class;
      }
      else if (type == FORM_OPTION_SESSION) {
        clazz = LSFFormOptionSessionImpl.class;
      }
      else if (type == FORM_OPTION_TO_DRAW) {
        clazz = LSFFormOptionToDrawImpl.class;
      }
      else if (type == FORM_ORDER_BY_LIST) {
        clazz = LSFFormOrderByListImpl.class;
      }
      else if (type == FORM_PIVOT_OPTIONS_DECLARATION) {
        clazz = LSFFormPivotOptionsDeclarationImpl.class;
      }
      else if (type == FORM_PROPERTIES_LIST) {
        clazz = LSFFormPropertiesListImpl.class;
      }
      else if (type == FORM_PROPERTIES_NAMES_DECL_LIST) {
        clazz = LSFFormPropertiesNamesDeclListImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_ID) {
        clazz = LSFFormPropertyDrawIDImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_MAPPED_DECL) {
        clazz = LSFFormPropertyDrawMappedDeclImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_NAME_DECL) {
        clazz = LSFFormPropertyDrawNameDeclImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_OBJECT) {
        clazz = LSFFormPropertyDrawObjectImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_PROPERTY_USAGE) {
        clazz = LSFFormPropertyDrawPropertyUsageImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_USAGE) {
        clazz = LSFFormPropertyDrawUsageImpl.class;
      }
      else if (type == FORM_PROPERTY_DRAW_WITH_ORDER) {
        clazz = LSFFormPropertyDrawWithOrderImpl.class;
      }
      else if (type == FORM_PROPERTY_NAME) {
        clazz = LSFFormPropertyNameImpl.class;
      }
      else if (type == FORM_PROPERTY_OBJECT) {
        clazz = LSFFormPropertyObjectImpl.class;
      }
      else if (type == FORM_PROPERTY_OPTIONS_LIST) {
        clazz = LSFFormPropertyOptionsListImpl.class;
      }
      else if (type == FORM_SESSION_SCOPE_CLAUSE) {
        clazz = LSFFormSessionScopeClauseImpl.class;
      }
      else if (type == FORM_SINGLE_ACTION_OBJECT) {
        clazz = LSFFormSingleActionObjectImpl.class;
      }
      else if (type == FORM_SINGLE_GROUP_OBJECT_DECLARATION) {
        clazz = LSFFormSingleGroupObjectDeclarationImpl.class;
      }
      else if (type == FORM_STATEMENT) {
        clazz = LSFFormStatementImpl.class;
      }
      else if (type == FORM_SUB_REPORT) {
        clazz = LSFFormSubReportImpl.class;
      }
      else if (type == FORM_TREE_GROUP_OBJECT_DECLARATION) {
        clazz = LSFFormTreeGroupObjectDeclarationImpl.class;
      }
      else if (type == FORM_TREE_GROUP_OBJECT_LIST) {
        clazz = LSFFormTreeGroupObjectListImpl.class;
      }
      else if (type == FORM_TREE_GROUP_OBJECT_OPTIONS) {
        clazz = LSFFormTreeGroupObjectOptionsImpl.class;
      }
      else if (type == FORM_USAGE) {
        clazz = LSFFormUsageImpl.class;
      }
      else if (type == FORM_USAGE_WRAPPER) {
        clazz = LSFFormUsageWrapperImpl.class;
      }
      else if (type == FOR_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFForActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == FOR_ACTION_PROPERTY_MAIN_BODY) {
        clazz = LSFForActionPropertyMainBodyImpl.class;
      }
      else if (type == FOR_ADD_OBJ_CLAUSE) {
        clazz = LSFForAddObjClauseImpl.class;
      }
      else if (type == GLOBAL_EVENT_STATEMENT) {
        clazz = LSFGlobalEventStatementImpl.class;
      }
      else if (type == GLOBAL_SINGLE_SELECTOR_TYPE) {
        clazz = LSFGlobalSingleSelectorTypeImpl.class;
      }
      else if (type == GROUPING_TYPE) {
        clazz = LSFGroupingTypeImpl.class;
      }
      else if (type == GROUPING_TYPE_ORDER) {
        clazz = LSFGroupingTypeOrderImpl.class;
      }
      else if (type == GROUP_EXPR_PROPERTY_DEFINITION) {
        clazz = LSFGroupExprPropertyDefinitionImpl.class;
      }
      else if (type == GROUP_OBJECT_DESTINATION) {
        clazz = LSFGroupObjectDestinationImpl.class;
      }
      else if (type == GROUP_OBJECT_ID) {
        clazz = LSFGroupObjectIDImpl.class;
      }
      else if (type == GROUP_OBJECT_REPORT_PATH) {
        clazz = LSFGroupObjectReportPathImpl.class;
      }
      else if (type == GROUP_OBJECT_SELECTOR) {
        clazz = LSFGroupObjectSelectorImpl.class;
      }
      else if (type == GROUP_OBJECT_TREE_SINGLE_SELECTOR_TYPE) {
        clazz = LSFGroupObjectTreeSingleSelectorTypeImpl.class;
      }
      else if (type == GROUP_OBJECT_USAGE) {
        clazz = LSFGroupObjectUsageImpl.class;
      }
      else if (type == GROUP_PROPERTY_BODY) {
        clazz = LSFGroupPropertyBodyImpl.class;
      }
      else if (type == GROUP_PROPERTY_BY) {
        clazz = LSFGroupPropertyByImpl.class;
      }
      else if (type == GROUP_PROPERTY_DEFINITION) {
        clazz = LSFGroupPropertyDefinitionImpl.class;
      }
      else if (type == GROUP_SELECTOR) {
        clazz = LSFGroupSelectorImpl.class;
      }
      else if (type == GROUP_SINGLE_SELECTOR_TYPE) {
        clazz = LSFGroupSingleSelectorTypeImpl.class;
      }
      else if (type == GROUP_STATEMENT) {
        clazz = LSFGroupStatementImpl.class;
      }
      else if (type == GROUP_USAGE) {
        clazz = LSFGroupUsageImpl.class;
      }
      else if (type == HAS_HEADER_OPTION) {
        clazz = LSFHasHeaderOptionImpl.class;
      }
      else if (type == HEADERS_PROPERTY_USAGE) {
        clazz = LSFHeadersPropertyUsageImpl.class;
      }
      else if (type == HIDE_EDIT_KEY) {
        clazz = LSFHideEditKeyImpl.class;
      }
      else if (type == HINT_SETTING) {
        clazz = LSFHintSettingImpl.class;
      }
      else if (type == IF_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFIfActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == IF_ELSE_PROPERTY_DEFINITION) {
        clazz = LSFIfElsePropertyDefinitionImpl.class;
      }
      else if (type == IF_PE) {
        clazz = LSFIfPEImpl.class;
      }
      else if (type == IMAGE_SETTING) {
        clazz = LSFImageSettingImpl.class;
      }
      else if (type == IMPLICIT_INTERFACE_PROPERTY_STATEMENT) {
        clazz = LSFImplicitInterfacePropertyStatementImpl.class;
      }
      else if (type == IMPLICIT_VALUE_PROPERTY_STATEMENT) {
        clazz = LSFImplicitValuePropertyStatementImpl.class;
      }
      else if (type == IMPORT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFImportActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == IMPORT_ACTION_SOURCE_TYPE) {
        clazz = LSFImportActionSourceTypeImpl.class;
      }
      else if (type == IMPORT_FIELD_ALIAS) {
        clazz = LSFImportFieldAliasImpl.class;
      }
      else if (type == IMPORT_FIELD_DEFINITION) {
        clazz = LSFImportFieldDefinitionImpl.class;
      }
      else if (type == IMPORT_FIELD_NAME) {
        clazz = LSFImportFieldNameImpl.class;
      }
      else if (type == IMPORT_FORM_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFImportFormActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == IMPORT_FORM_HIERARCHICAL_ACTION_SOURCE_TYPE) {
        clazz = LSFImportFormHierarchicalActionSourceTypeImpl.class;
      }
      else if (type == IMPORT_FORM_PLAIN_ACTION_SOURCE_TYPE) {
        clazz = LSFImportFormPlainActionSourceTypeImpl.class;
      }
      else if (type == IMPORT_PROPERTY_USAGE) {
        clazz = LSFImportPropertyUsageImpl.class;
      }
      else if (type == IMPORT_PROPERTY_USAGE_WITH_ID) {
        clazz = LSFImportPropertyUsageWithIdImpl.class;
      }
      else if (type == INDEX_SETTING) {
        clazz = LSFIndexSettingImpl.class;
      }
      else if (type == INDEX_STATEMENT) {
        clazz = LSFIndexStatementImpl.class;
      }
      else if (type == INLINE_OPTION) {
        clazz = LSFInlineOptionImpl.class;
      }
      else if (type == INPUT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFInputActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == INSERT_RELATIVE_POSITION_LITERAL) {
        clazz = LSFInsertRelativePositionLiteralImpl.class;
      }
      else if (type == INTERNAL_ACTION) {
        clazz = LSFInternalActionImpl.class;
      }
      else if (type == INTERNAL_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFInternalActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == INTERNAL_CLASS) {
        clazz = LSFInternalClassImpl.class;
      }
      else if (type == INTERNAL_FORM_OBJECT) {
        clazz = LSFInternalFormObjectImpl.class;
      }
      else if (type == INTERNAL_MODULE) {
        clazz = LSFInternalModuleImpl.class;
      }
      else if (type == INTERNAL_PROPERTY) {
        clazz = LSFInternalPropertyImpl.class;
      }
      else if (type == INTERNAL_PROPERTY_DRAW) {
        clazz = LSFInternalPropertyDrawImpl.class;
      }
      else if (type == INTERNAL_STATEMENT) {
        clazz = LSFInternalStatementImpl.class;
      }
      else if (type == INT_LITERAL) {
        clazz = LSFIntLiteralImpl.class;
      }
      else if (type == JAVA_CLASS_STRING_USAGE) {
        clazz = LSFJavaClassStringUsageImpl.class;
      }
      else if (type == JOIN_PROPERTY_DEFINITION) {
        clazz = LSFJoinPropertyDefinitionImpl.class;
      }
      else if (type == JSON_FORM_PROPERTY_DEFINITION) {
        clazz = LSFJsonFormPropertyDefinitionImpl.class;
      }
      else if (type == JSON_PROPERTY_DEFINITION) {
        clazz = LSFJsonPropertyDefinitionImpl.class;
      }
      else if (type == JS_STRING_USAGE) {
        clazz = LSFJsStringUsageImpl.class;
      }
      else if (type == KEY_PRESSED_EVENT_TYPE) {
        clazz = LSFKeyPressedEventTypeImpl.class;
      }
      else if (type == LAZY_META_DECL_STATEMENT) {
        clazz = LSFLazyMetaDeclStatementImpl.class;
      }
      else if (type == LAZY_META_STATEMENT) {
        clazz = LSFLazyMetaStatementImpl.class;
      }
      else if (type == LAZY_SCRIPT_STATEMENT) {
        clazz = LSFLazyScriptStatementImpl.class;
      }
      else if (type == LIKE_PE) {
        clazz = LSFLikePEImpl.class;
      }
      else if (type == LIST_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFListActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == LIST_FORM_DECLARATION) {
        clazz = LSFListFormDeclarationImpl.class;
      }
      else if (type == LIST_VIEW_TYPE) {
        clazz = LSFListViewTypeImpl.class;
      }
      else if (type == LIST_WHERE_INPUT_PROPS) {
        clazz = LSFListWhereInputPropsImpl.class;
      }
      else if (type == LITERAL) {
        clazz = LSFLiteralImpl.class;
      }
      else if (type == LOCALIZED_STRING_LITERAL) {
        clazz = LSFLocalizedStringLiteralImpl.class;
      }
      else if (type == LOCAL_DATA_PROPERTY_DEFINITION) {
        clazz = LSFLocalDataPropertyDefinitionImpl.class;
      }
      else if (type == LOCAL_PROPERTY_DECLARATION_NAME) {
        clazz = LSFLocalPropertyDeclarationNameImpl.class;
      }
      else if (type == LOGGABLE_SETTING) {
        clazz = LSFLoggableSettingImpl.class;
      }
      else if (type == LOGGABLE_STATEMENT) {
        clazz = LSFLoggableStatementImpl.class;
      }
      else if (type == MANAGE_SESSION_CLAUSE) {
        clazz = LSFManageSessionClauseImpl.class;
      }
      else if (type == MAPPED_ACTION_CLASS_PARAM_DECLARE) {
        clazz = LSFMappedActionClassParamDeclareImpl.class;
      }
      else if (type == MAPPED_PROPERTY_CLASS_PARAM_DECLARE) {
        clazz = LSFMappedPropertyClassParamDeclareImpl.class;
      }
      else if (type == MAPPED_PROPERTY_EXPR_PARAM) {
        clazz = LSFMappedPropertyExprParamImpl.class;
      }
      else if (type == MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM) {
        clazz = LSFMappedPropertyOrSimpleExprParamImpl.class;
      }
      else if (type == MAP_OPTIONS) {
        clazz = LSFMapOptionsImpl.class;
      }
      else if (type == MAX_PROPERTY_DEFINITION) {
        clazz = LSFMaxPropertyDefinitionImpl.class;
      }
      else if (type == MESSAGE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFMessageActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == MESSAGE_PROPERTY_EXPRESSION) {
        clazz = LSFMessagePropertyExpressionImpl.class;
      }
      else if (type == METACODE_USAGE) {
        clazz = LSFMetacodeUsageImpl.class;
      }
      else if (type == META_CODE_BODY) {
        clazz = LSFMetaCodeBodyImpl.class;
      }
      else if (type == META_CODE_BODY_LEFT_BRACE) {
        clazz = LSFMetaCodeBodyLeftBraceImpl.class;
      }
      else if (type == META_CODE_BODY_RIGHT_BRACE) {
        clazz = LSFMetaCodeBodyRightBraceImpl.class;
      }
      else if (type == META_CODE_DECLARATION_STATEMENT) {
        clazz = LSFMetaCodeDeclarationStatementImpl.class;
      }
      else if (type == META_CODE_DECL_BODY) {
        clazz = LSFMetaCodeDeclBodyImpl.class;
      }
      else if (type == META_CODE_ID) {
        clazz = LSFMetaCodeIdImpl.class;
      }
      else if (type == META_CODE_ID_LIST) {
        clazz = LSFMetaCodeIdListImpl.class;
      }
      else if (type == META_CODE_LITERAL) {
        clazz = LSFMetaCodeLiteralImpl.class;
      }
      else if (type == META_CODE_STATEMENT) {
        clazz = LSFMetaCodeStatementImpl.class;
      }
      else if (type == META_CODE_STATEMENT_HEADER) {
        clazz = LSFMetaCodeStatementHeaderImpl.class;
      }
      else if (type == META_CODE_STATEMENT_SEMI) {
        clazz = LSFMetaCodeStatementSemiImpl.class;
      }
      else if (type == META_CODE_STATEMENT_TYPE) {
        clazz = LSFMetaCodeStatementTypeImpl.class;
      }
      else if (type == META_CODE_STRING_LITERAL) {
        clazz = LSFMetaCodeStringLiteralImpl.class;
      }
      else if (type == META_DECL_ID) {
        clazz = LSFMetaDeclIdImpl.class;
      }
      else if (type == META_DECL_ID_LIST) {
        clazz = LSFMetaDeclIdListImpl.class;
      }
      else if (type == MODULE_HEADER) {
        clazz = LSFModuleHeaderImpl.class;
      }
      else if (type == MODULE_NAME) {
        clazz = LSFModuleNameImpl.class;
      }
      else if (type == MODULE_NAME_STATEMENT) {
        clazz = LSFModuleNameStatementImpl.class;
      }
      else if (type == MODULE_USAGE) {
        clazz = LSFModuleUsageImpl.class;
      }
      else if (type == MOVE_COMPONENT_STATEMENT) {
        clazz = LSFMoveComponentStatementImpl.class;
      }
      else if (type == MOVE_NAVIGATOR_ELEMENT_STATEMENT) {
        clazz = LSFMoveNavigatorElementStatementImpl.class;
      }
      else if (type == MULTIPLICATIVE_PE) {
        clazz = LSFMultiplicativePEImpl.class;
      }
      else if (type == MULTI_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFMultiActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == MULTI_PROPERTY_DEFINITION) {
        clazz = LSFMultiPropertyDefinitionImpl.class;
      }
      else if (type == NAMESPACE_NAME) {
        clazz = LSFNamespaceNameImpl.class;
      }
      else if (type == NAMESPACE_USAGE) {
        clazz = LSFNamespaceUsageImpl.class;
      }
      else if (type == NATIVE_LITERAL) {
        clazz = LSFNativeLiteralImpl.class;
      }
      else if (type == NATIVE_PROPERTY_DEFINITION) {
        clazz = LSFNativePropertyDefinitionImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_BODY_STATEMENT) {
        clazz = LSFNavigatorElementBodyStatementImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_DESCRIPTION) {
        clazz = LSFNavigatorElementDescriptionImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_INSERT_POSITION) {
        clazz = LSFNavigatorElementInsertPositionImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_OPTIONS) {
        clazz = LSFNavigatorElementOptionsImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_SELECTOR) {
        clazz = LSFNavigatorElementSelectorImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_STATEMENT_BODY) {
        clazz = LSFNavigatorElementStatementBodyImpl.class;
      }
      else if (type == NAVIGATOR_ELEMENT_USAGE) {
        clazz = LSFNavigatorElementUsageImpl.class;
      }
      else if (type == NAVIGATOR_STATEMENT) {
        clazz = LSFNavigatorStatementImpl.class;
      }
      else if (type == NESTED_LOCAL_MODIFIER) {
        clazz = LSFNestedLocalModifierImpl.class;
      }
      else if (type == NESTED_SESSION_OPERATOR) {
        clazz = LSFNestedSessionOperatorImpl.class;
      }
      else if (type == NEW_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFNewActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == NEW_COMPONENT_STATEMENT) {
        clazz = LSFNewComponentStatementImpl.class;
      }
      else if (type == NEW_EXECUTOR_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFNewExecutorActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == NEW_NAVIGATOR_ELEMENT_STATEMENT) {
        clazz = LSFNewNavigatorElementStatementImpl.class;
      }
      else if (type == NEW_SESSION_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFNewSessionActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == NEW_SESSION_OPERATOR) {
        clazz = LSFNewSessionOperatorImpl.class;
      }
      else if (type == NEW_THREAD_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFNewThreadActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == NEW_WHERE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFNewWhereActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == NE_STUB) {
        clazz = LSFNeStubImpl.class;
      }
      else if (type == NON_EMPTY_ACTION_PDB_LIST) {
        clazz = LSFNonEmptyActionPDBListImpl.class;
      }
      else if (type == NON_EMPTY_ALIASED_PROPERTY_EXPRESSION_LIST) {
        clazz = LSFNonEmptyAliasedPropertyExpressionListImpl.class;
      }
      else if (type == NON_EMPTY_CLASS_NAME_LIST) {
        clazz = LSFNonEmptyClassNameListImpl.class;
      }
      else if (type == NON_EMPTY_CLASS_PARAM_DECLARE_LIST) {
        clazz = LSFNonEmptyClassParamDeclareListImpl.class;
      }
      else if (type == NON_EMPTY_CUSTOM_CLASS_USAGE_LIST) {
        clazz = LSFNonEmptyCustomClassUsageListImpl.class;
      }
      else if (type == NON_EMPTY_EXPLICIT_PROP_CLASS_LIST) {
        clazz = LSFNonEmptyExplicitPropClassListImpl.class;
      }
      else if (type == NON_EMPTY_FORM_USAGE_LIST) {
        clazz = LSFNonEmptyFormUsageListImpl.class;
      }
      else if (type == NON_EMPTY_GROUP_OBJECT_USAGE_LIST) {
        clazz = LSFNonEmptyGroupObjectUsageListImpl.class;
      }
      else if (type == NON_EMPTY_IMPORT_FIELD_DEFINITIONS) {
        clazz = LSFNonEmptyImportFieldDefinitionsImpl.class;
      }
      else if (type == NON_EMPTY_IMPORT_PROPERTY_USAGE_LIST_WITH_IDS) {
        clazz = LSFNonEmptyImportPropertyUsageListWithIdsImpl.class;
      }
      else if (type == NON_EMPTY_LOCAL_PROPERTY_DECLARATION_NAME_LIST) {
        clazz = LSFNonEmptyLocalPropertyDeclarationNameListImpl.class;
      }
      else if (type == NON_EMPTY_MAPPED_PROPERTY_OR_SIMPLE_EXPR_PARAM_LIST) {
        clazz = LSFNonEmptyMappedPropertyOrSimpleExprParamListImpl.class;
      }
      else if (type == NON_EMPTY_MODULE_USAGE_LIST) {
        clazz = LSFNonEmptyModuleUsageListImpl.class;
      }
      else if (type == NON_EMPTY_NAMESPACE_USAGE_LIST) {
        clazz = LSFNonEmptyNamespaceUsageListImpl.class;
      }
      else if (type == NON_EMPTY_NO_CONTEXT_ACTION_OR_PROPERTY_USAGE_LIST) {
        clazz = LSFNonEmptyNoContextActionOrPropertyUsageListImpl.class;
      }
      else if (type == NON_EMPTY_NO_CONTEXT_ACTION_USAGE_LIST) {
        clazz = LSFNonEmptyNoContextActionUsageListImpl.class;
      }
      else if (type == NON_EMPTY_NO_CONTEXT_PROPERTY_USAGE_LIST) {
        clazz = LSFNonEmptyNoContextPropertyUsageListImpl.class;
      }
      else if (type == NON_EMPTY_NO_PARAMS_PROPERTY_USAGE_LIST) {
        clazz = LSFNonEmptyNoParamsPropertyUsageListImpl.class;
      }
      else if (type == NON_EMPTY_OBJECT_USAGE_LIST) {
        clazz = LSFNonEmptyObjectUsageListImpl.class;
      }
      else if (type == NON_EMPTY_PARAMETER_OR_EXPRESSION_LIST) {
        clazz = LSFNonEmptyParameterOrExpressionListImpl.class;
      }
      else if (type == NON_EMPTY_PROPERTY_EXPRESSION_LIST) {
        clazz = LSFNonEmptyPropertyExpressionListImpl.class;
      }
      else if (type == NON_EMPTY_PROPERTY_OPTIONS) {
        clazz = LSFNonEmptyPropertyOptionsImpl.class;
      }
      else if (type == NON_EMPTY_STATIC_OBJECT_DECL_LIST) {
        clazz = LSFNonEmptyStaticObjectDeclListImpl.class;
      }
      else if (type == NOT_NULL_SETTING) {
        clazz = LSFNotNullSettingImpl.class;
      }
      else if (type == NOT_PE) {
        clazz = LSFNotPEImpl.class;
      }
      else if (type == NO_CANCEL_CLAUSE) {
        clazz = LSFNoCancelClauseImpl.class;
      }
      else if (type == NO_CONTEXT_ACTION_OR_PROPERTY_USAGE) {
        clazz = LSFNoContextActionOrPropertyUsageImpl.class;
      }
      else if (type == NO_CONTEXT_ACTION_USAGE) {
        clazz = LSFNoContextActionUsageImpl.class;
      }
      else if (type == NO_CONTEXT_PROPERTY_USAGE) {
        clazz = LSFNoContextPropertyUsageImpl.class;
      }
      else if (type == NO_DEFAULT) {
        clazz = LSFNoDefaultImpl.class;
      }
      else if (type == NO_ESCAPE_OPTION) {
        clazz = LSFNoEscapeOptionImpl.class;
      }
      else if (type == NO_PARAMS_ACTION_USAGE) {
        clazz = LSFNoParamsActionUsageImpl.class;
      }
      else if (type == NO_PARAMS_PROPERTY_USAGE) {
        clazz = LSFNoParamsPropertyUsageImpl.class;
      }
      else if (type == NULL_LITERAL) {
        clazz = LSFNullLiteralImpl.class;
      }
      else if (type == NULL_OPTION) {
        clazz = LSFNullOptionImpl.class;
      }
      else if (type == OBJECT_EXPR) {
        clazz = LSFObjectExprImpl.class;
      }
      else if (type == OBJECT_ID) {
        clazz = LSFObjectIDImpl.class;
      }
      else if (type == OBJECT_INPUT_PROPS) {
        clazz = LSFObjectInputPropsImpl.class;
      }
      else if (type == OBJECT_IN_PROPS) {
        clazz = LSFObjectInPropsImpl.class;
      }
      else if (type == OBJECT_LIST_INPUT_PROPS) {
        clazz = LSFObjectListInputPropsImpl.class;
      }
      else if (type == OBJECT_USAGE) {
        clazz = LSFObjectUsageImpl.class;
      }
      else if (type == OBJECT_USAGE_LIST) {
        clazz = LSFObjectUsageListImpl.class;
      }
      else if (type == ON_EDIT_EVENT_SETTING) {
        clazz = LSFOnEditEventSettingImpl.class;
      }
      else if (type == ORDER_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFOrderActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == ORDER_PROPERTY_BY) {
        clazz = LSFOrderPropertyByImpl.class;
      }
      else if (type == ORIENTATION) {
        clazz = LSFOrientationImpl.class;
      }
      else if (type == OR_PE) {
        clazz = LSFOrPEImpl.class;
      }
      else if (type == OVERRIDE_ACTION_STATEMENT) {
        clazz = LSFOverrideActionStatementImpl.class;
      }
      else if (type == OVERRIDE_OPERATOR) {
        clazz = LSFOverrideOperatorImpl.class;
      }
      else if (type == OVERRIDE_PROPERTY_DEFINITION) {
        clazz = LSFOverridePropertyDefinitionImpl.class;
      }
      else if (type == OVERRIDE_PROPERTY_STATEMENT) {
        clazz = LSFOverridePropertyStatementImpl.class;
      }
      else if (type == PARAMETER_OR_EXPRESSION) {
        clazz = LSFParameterOrExpressionImpl.class;
      }
      else if (type == PARAMETER_OR_EXPRESSION_LIST) {
        clazz = LSFParameterOrExpressionListImpl.class;
      }
      else if (type == PARAM_DECLARE) {
        clazz = LSFParamDeclareImpl.class;
      }
      else if (type == PARTITION_PROPERTY_BY) {
        clazz = LSFPartitionPropertyByImpl.class;
      }
      else if (type == PARTITION_PROPERTY_DEFINITION) {
        clazz = LSFPartitionPropertyDefinitionImpl.class;
      }
      else if (type == PATTERN_SETTING) {
        clazz = LSFPatternSettingImpl.class;
      }
      else if (type == PERSISTENT_SETTING) {
        clazz = LSFPersistentSettingImpl.class;
      }
      else if (type == PIVOT_OPTIONS) {
        clazz = LSFPivotOptionsImpl.class;
      }
      else if (type == PIVOT_PROPERTY_DRAW_LIST) {
        clazz = LSFPivotPropertyDrawListImpl.class;
      }
      else if (type == POSTFIX_UNARY_PE) {
        clazz = LSFPostfixUnaryPEImpl.class;
      }
      else if (type == PREDEFINED_ADD_PROPERTY_NAME) {
        clazz = LSFPredefinedAddPropertyNameImpl.class;
      }
      else if (type == PREDEFINED_FORM_PROPERTY_NAME) {
        clazz = LSFPredefinedFormPropertyNameImpl.class;
      }
      else if (type == PREREAD_SETTING) {
        clazz = LSFPrereadSettingImpl.class;
      }
      else if (type == PRINT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFPrintActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == PRIORITY_LIST) {
        clazz = LSFPriorityListImpl.class;
      }
      else if (type == PROPERTY_CALC_STATEMENT) {
        clazz = LSFPropertyCalcStatementImpl.class;
      }
      else if (type == PROPERTY_CUSTOM_VIEW) {
        clazz = LSFPropertyCustomViewImpl.class;
      }
      else if (type == PROPERTY_DECLARATION) {
        clazz = LSFPropertyDeclarationImpl.class;
      }
      else if (type == PROPERTY_DECL_PARAMS) {
        clazz = LSFPropertyDeclParamsImpl.class;
      }
      else if (type == PROPERTY_ELSE_ACTION_USAGE) {
        clazz = LSFPropertyElseActionUsageImpl.class;
      }
      else if (type == PROPERTY_EXPRESSION) {
        clazz = LSFPropertyExpressionImpl.class;
      }
      else if (type == PROPERTY_EXPRESSION_LIST) {
        clazz = LSFPropertyExpressionListImpl.class;
      }
      else if (type == PROPERTY_EXPRESSION_WITH_ORDER) {
        clazz = LSFPropertyExpressionWithOrderImpl.class;
      }
      else if (type == PROPERTY_EXPR_OBJECT) {
        clazz = LSFPropertyExprObjectImpl.class;
      }
      else if (type == PROPERTY_SELECTOR) {
        clazz = LSFPropertySelectorImpl.class;
      }
      else if (type == PROPERTY_STATEMENT) {
        clazz = LSFPropertyStatementImpl.class;
      }
      else if (type == PROPERTY_USAGE) {
        clazz = LSFPropertyUsageImpl.class;
      }
      else if (type == PROPERTY_USAGE_WRAPPER) {
        clazz = LSFPropertyUsageWrapperImpl.class;
      }
      else if (type == READ_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFReadActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == READ_FILTER_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFReadFilterActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == READ_ORDER_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFReadOrderActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == RECALCULATE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFRecalculateActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == RECURSIVE_PROPERTY_DEFINITION) {
        clazz = LSFRecursivePropertyDefinitionImpl.class;
      }
      else if (type == REFLECTION_PROPERTY_DEFINITION) {
        clazz = LSFReflectionPropertyDefinitionImpl.class;
      }
      else if (type == REFLECTION_PROPERTY_TYPE) {
        clazz = LSFReflectionPropertyTypeImpl.class;
      }
      else if (type == REGEXP_SETTING) {
        clazz = LSFRegexpSettingImpl.class;
      }
      else if (type == REGULAR_FILTER_DECLARATION) {
        clazz = LSFRegularFilterDeclarationImpl.class;
      }
      else if (type == RELATIONAL_PE) {
        clazz = LSFRelationalPEImpl.class;
      }
      else if (type == REMOVE_COMPONENT_STATEMENT) {
        clazz = LSFRemoveComponentStatementImpl.class;
      }
      else if (type == RENDER_PROPERTY_CUSTOM_VIEW) {
        clazz = LSFRenderPropertyCustomViewImpl.class;
      }
      else if (type == REPORT_FILES_DECLARATION) {
        clazz = LSFReportFilesDeclarationImpl.class;
      }
      else if (type == REPORT_SETTING) {
        clazz = LSFReportSettingImpl.class;
      }
      else if (type == REQUEST_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFRequestActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == REQUIRE_LIST) {
        clazz = LSFRequireListImpl.class;
      }
      else if (type == RETURN_ACTION_OPERATOR) {
        clazz = LSFReturnActionOperatorImpl.class;
      }
      else if (type == ROUND_PROPERTY_DEFINITION) {
        clazz = LSFRoundPropertyDefinitionImpl.class;
      }
      else if (type == SCRIPT_STATEMENT) {
        clazz = LSFScriptStatementImpl.class;
      }
      else if (type == SEEK_OBJECT_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFSeekObjectActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == SELECT_TOP) {
        clazz = LSFSelectTopImpl.class;
      }
      else if (type == SELECT_TOPS) {
        clazz = LSFSelectTopsImpl.class;
      }
      else if (type == SESSION_PROPERTY_DEFINITION) {
        clazz = LSFSessionPropertyDefinitionImpl.class;
      }
      else if (type == SESSION_PROPERTY_TYPE) {
        clazz = LSFSessionPropertyTypeImpl.class;
      }
      else if (type == SETUP_COMPONENT_STATEMENT) {
        clazz = LSFSetupComponentStatementImpl.class;
      }
      else if (type == SETUP_NAVIGATOR_ELEMENT_STATEMENT) {
        clazz = LSFSetupNavigatorElementStatementImpl.class;
      }
      else if (type == SET_OBJECT_PROPERTY_STATEMENT) {
        clazz = LSFSetObjectPropertyStatementImpl.class;
      }
      else if (type == SHEET_EXPRESSION) {
        clazz = LSFSheetExpressionImpl.class;
      }
      else if (type == SHOW_DEP_STATEMENT) {
        clazz = LSFShowDepStatementImpl.class;
      }
      else if (type == SIGNATURE_PROPERTY_DEFINITION) {
        clazz = LSFSignaturePropertyDefinitionImpl.class;
      }
      else if (type == SIMPLE_ELEMENT_DESCRIPTION) {
        clazz = LSFSimpleElementDescriptionImpl.class;
      }
      else if (type == SIMPLE_NAME) {
        clazz = LSFSimpleNameImpl.class;
      }
      else if (type == SIMPLE_NAME_WITH_CAPTION) {
        clazz = LSFSimpleNameWithCaptionImpl.class;
      }
      else if (type == SIMPLE_PE) {
        clazz = LSFSimplePEImpl.class;
      }
      else if (type == STATIC_DESTINATION) {
        clazz = LSFStaticDestinationImpl.class;
      }
      else if (type == STATIC_OBJECT_DECL) {
        clazz = LSFStaticObjectDeclImpl.class;
      }
      else if (type == STATIC_OBJECT_DECL_LIST) {
        clazz = LSFStaticObjectDeclListImpl.class;
      }
      else if (type == STATIC_OBJECT_ID) {
        clazz = LSFStaticObjectIDImpl.class;
      }
      else if (type == STATIC_OBJECT_IMAGE) {
        clazz = LSFStaticObjectImageImpl.class;
      }
      else if (type == STATIC_RELATIVE_POSITION) {
        clazz = LSFStaticRelativePositionImpl.class;
      }
      else if (type == STICKY_OPTION) {
        clazz = LSFStickyOptionImpl.class;
      }
      else if (type == STRING_LITERAL) {
        clazz = LSFStringLiteralImpl.class;
      }
      else if (type == STRUCT_CREATION_PROPERTY_DEFINITION) {
        clazz = LSFStructCreationPropertyDefinitionImpl.class;
      }
      else if (type == STUB_STATEMENT) {
        clazz = LSFStubStatementImpl.class;
      }
      else if (type == SYNC_TYPE_LITERAL) {
        clazz = LSFSyncTypeLiteralImpl.class;
      }
      else if (type == TABLE_STATEMENT) {
        clazz = LSFTableStatementImpl.class;
      }
      else if (type == TABLE_USAGE) {
        clazz = LSFTableUsageImpl.class;
      }
      else if (type == TBOOLEAN_LITERAL) {
        clazz = LSFTbooleanLiteralImpl.class;
      }
      else if (type == TERMINAL_FLOW_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFTerminalFlowActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == TIME_LITERAL) {
        clazz = LSFTimeLiteralImpl.class;
      }
      else if (type == TREE_GROUP_DECLARATION) {
        clazz = LSFTreeGroupDeclarationImpl.class;
      }
      else if (type == TREE_GROUP_PARENT_DECLARATION) {
        clazz = LSFTreeGroupParentDeclarationImpl.class;
      }
      else if (type == TREE_GROUP_SELECTOR) {
        clazz = LSFTreeGroupSelectorImpl.class;
      }
      else if (type == TREE_GROUP_USAGE) {
        clazz = LSFTreeGroupUsageImpl.class;
      }
      else if (type == TRY_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFTryActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == TYPE_IS) {
        clazz = LSFTypeIsImpl.class;
      }
      else if (type == TYPE_MULT) {
        clazz = LSFTypeMultImpl.class;
      }
      else if (type == TYPE_PROPERTY_DEFINITION) {
        clazz = LSFTypePropertyDefinitionImpl.class;
      }
      else if (type == UDOUBLE_LITERAL) {
        clazz = LSFUdoubleLiteralImpl.class;
      }
      else if (type == UINT_LITERAL) {
        clazz = LSFUintLiteralImpl.class;
      }
      else if (type == ULONG_LITERAL) {
        clazz = LSFUlongLiteralImpl.class;
      }
      else if (type == UNARY_MINUS_PE) {
        clazz = LSFUnaryMinusPEImpl.class;
      }
      else if (type == UNTYPED_PARAM_DECLARE) {
        clazz = LSFUntypedParamDeclareImpl.class;
      }
      else if (type == UNUMERIC_LITERAL) {
        clazz = LSFUnumericLiteralImpl.class;
      }
      else if (type == USER_FILTERS_DECLARATION) {
        clazz = LSFUserFiltersDeclarationImpl.class;
      }
      else if (type == VIEW_TYPE_SETTING) {
        clazz = LSFViewTypeSettingImpl.class;
      }
      else if (type == WHERE_PROPERTY_EXPRESSION) {
        clazz = LSFWherePropertyExpressionImpl.class;
      }
      else if (type == WHILE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFWhileActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == WINDOW_CREATE_STATEMENT) {
        clazz = LSFWindowCreateStatementImpl.class;
      }
      else if (type == WINDOW_HIDE_STATEMENT) {
        clazz = LSFWindowHideStatementImpl.class;
      }
      else if (type == WINDOW_OPTIONS) {
        clazz = LSFWindowOptionsImpl.class;
      }
      else if (type == WINDOW_STATEMENT) {
        clazz = LSFWindowStatementImpl.class;
      }
      else if (type == WINDOW_TYPE) {
        clazz = LSFWindowTypeImpl.class;
      }
      else if (type == WINDOW_TYPE_LITERAL) {
        clazz = LSFWindowTypeLiteralImpl.class;
      }
      else if (type == WINDOW_USAGE) {
        clazz = LSFWindowUsageImpl.class;
      }
      else if (type == WRITE_ACTION_PROPERTY_DEFINITION_BODY) {
        clazz = LSFWriteActionPropertyDefinitionBodyImpl.class;
      }
      else if (type == WRITE_WHEN_STATEMENT) {
        clazz = LSFWriteWhenStatementImpl.class;
      }
      else if (type == XOR_PE) {
        clazz = LSFXorPEImpl.class;
      }
      else {
        throw new AssertionError("Unknown element type: " + type);
      }
      return (Class<T>) clazz;
    }
  }
}
