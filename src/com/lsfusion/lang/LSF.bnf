{
  psiImplUtilClass="com.lsfusion.lang.psi.LSFPsiImplUtil"

  parserClass="com.lsfusion.lang.parser.LSFParser"
  parserUtilClass="com.lsfusion.lang.parser.LSFParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LSF"
  psiImplClassSuffix="Impl"
  psiPackage="com.lsfusion.lang.psi"
  psiImplPackage="com.lsfusion.lang.psi.impl"
 
  elementTypeHolderClass="com.lsfusion.lang.psi.LSFTypes"
  elementTypeClass="com.lsfusion.lang.psi.LSFElementType"
  elementTypeFactory = "com.lsfusion.lang.psi.LSFElementTypeFactory.create"

  tokenTypeClass="com.lsfusion.lang.psi.LSFTokenType"

  extendedPin = false

  // additional tokens
  tokens = [
    COMMENTS='COMMENTS'
    FAKETWODASHES='##'
    FAKETHREEDASHES='###'
  ]
}

script ::= << isExpressionParsing >> propertyExpression
        | << isActionParsing >> listActionStatement*
        | moduleHeader (lazyScriptStatement*)

lazyScriptStatement ::= scriptStatement*
{
    lazy = true
    extends = "com.lsfusion.lang.psi.LSFLazyParsableElement"
}

scriptStatement ::= statement
{
    recoverWhile = "script_statement_recover"
}

simpleName ::= ID
{
    mixin="com.lsfusion.lang.psi.LSFIdImpl"
    implements="com.lsfusion.lang.psi.LSFId"
}

moduleHeader ::= MODULE moduleName SEMI
                 requireList?
                 priorityList?
                 namespaceName?
{
    pin = 2
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFModuleDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFModuleDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.ModuleStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
    recoverWhile = "script_statement_recover"
}

moduleName ::= simpleName;
requireList ::= REQUIRE nonEmptyModuleUsageList SEMI {pin = 1};
priorityList ::= PRIORITY nonEmptyNamespaceUsageList SEMI {pin = 1};
namespaceName ::= NAMESPACE namespaceUsage SEMI
{
    pin = 2;
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFExplicitNamespaceDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFExplicitNamespaceDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.ExplicitNamespaceStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

private statement ::=   constraintStatement
                    |	groupStatement
                    |	overrideActionStatement // starts with ID
                    |	overridePropertyStatement // starts with ID
                    |	classStatement
                    |	followsStatement // starts with ID
                    |	writeWhenStatement // starts with ID
                    |	explicitInterfacePropertyStatement
                    |   explicitInterfaceActStatement
                    |	eventStatement
                    |	showDepStatement
                    |	globalEventStatement
                    |	aspectStatement
                    |	tableStatement
                    |	loggableStatement
                    |	indexStatement
                    |	formStatement
                    |	designStatement
                    |	windowStatement
                    |	navigatorStatement
                    |	metaCodeStatement // ?
                    |	metaCodeDeclarationStatement // ?
                    |   internalStatement
                    |	emptyStatement
                    |   stubStatement
                    
internalStatement ::= INTERNAL (internalProperty | internalAction | internalClass | internalModule | internalPropertyDraw | internalFormObject) SEMI {pin = 1}
internalProperty ::= PROPERTY nonEmptyNoContextPropertyUsageList {pin = 1}
internalAction ::= ACTION nonEmptyNoContextActionUsageList {pin = 1}
internalClass ::= CLASS nonEmptyClassNameList {pin = 1}
internalModule ::= MODULE nonEmptyModuleUsageList {pin = 1}
internalPropertyDraw ::= PROPERTYDRAW formUsage formPropertyDrawUsage
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

internalFormObject ::= OBJECT formUsage objectUsage
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

// some statements are not pinned after the first token, so we need these fake rules to pin incomplete statements (to support recovery assertion) 
stubStatement ::=
    EXTEND (CLASS | FORM | DESIGN) ID
    | CLASS (ABSTRACT | NATIVE)? COMPLEX? ID
    | (ATSIGN | ATSIGN2 | FORM | GROUP | META | DESIGN | TABLE) ID
    | WINDOW windowType ID
    {pin(".*") = 1}

private script_statement_recover ::= !statement_start
// Important ! after recover the rule should mandatory be pinned (matched)
private statement_start ::= ID | AFTER | BEFORE | HIDE | INDEX | LOGGABLE | NAVIGATOR | ON | SHOWDEP | WHEN | CONSTRAINT | INTERNAL
                            | CLASS | ATSIGN | ATSIGN2 | FORM | GROUP | META | DESIGN | TABLE | WINDOW | EXTEND | SEMI


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// CLASS STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

classDecl ::= CLASS (ABSTRACT | NATIVE)? COMPLEX? simpleNameWithCaption
{
     mixin = "com.lsfusion.lang.psi.declarations.impl.LSFClassDeclarationImpl"
     implements = "com.lsfusion.lang.psi.declarations.LSFClassDeclaration"
     stubClass = "com.lsfusion.lang.psi.stubs.ClassStubElement"
     elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

extendingClassDeclaration ::= EXTEND CLASS customClassUsageWrapper

customClassUsageWrapper ::= customClassUsage // for usages search filter

classStatement ::= (classDecl | extendingClassDeclaration) classInstancesAndParents {
    pin = 1
    mixin="com.lsfusion.lang.psi.extend.impl.LSFClassExtendImpl"
    implements="com.lsfusion.lang.psi.extend.LSFClassExtend"
    stubClass = "com.lsfusion.lang.psi.stubs.extend.ExtendClassStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

private classInstancesAndParents ::=    LBRACE staticObjectDeclList RBRACE (classParentsList SEMI)? | (classParentsList)? SEMI {pin(".*") = 1}

classParentsList ::= COLON nonEmptyCustomClassUsageList {pin = 1}

staticObjectDeclList ::= (nonEmptyStaticObjectDeclList)?

nonEmptyStaticObjectDeclList ::= staticObjectDecl (COMMA staticObjectDecl)*

staticObjectDecl ::= simpleNameWithCaption
{mixin="com.lsfusion.lang.psi.declarations.impl.LSFStaticObjectDeclarationImpl" implements="com.lsfusion.lang.psi.declarations.LSFStaticObjectDeclaration"}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// GROUP STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

groupStatement ::= GROUP simpleNameWithCaption (COLON groupUsage)? SEMI
{
    pin = 2
    implements="com.lsfusion.lang.psi.declarations.LSFGroupDeclaration"
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFGroupDeclarationImpl"
    stubClass = "com.lsfusion.lang.psi.stubs.GroupStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}


////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// PROPERTY STATEMENT ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

explicitInterfacePropertyStatement ::= explicitValuePropertyStatement
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFExplicitInterfacePropStatementImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFExplicitInterfacePropStatement"
    stubClass="com.lsfusion.lang.psi.stubs.interfaces.ExplicitInterfacePropStubElement"
    elementTypeFactory="com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

explicitValuePropertyStatement ::= implicitValuePropertyStatement
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFExplicitValuePropStatementImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFExplicitValuePropStatement"
    stubClass="com.lsfusion.lang.psi.stubs.interfaces.ExplicitValueStubElement"
    elementTypeFactory="com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

implicitValuePropertyStatement ::= implicitInterfacePropertyStatement
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFImplicitValuePropStatementImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFImplicitValuePropStatement"
    stubClass="com.lsfusion.lang.psi.stubs.interfaces.ImplicitValueStubElement"
    elementTypeFactory="com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

implicitInterfacePropertyStatement ::= propertyStatement
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFImplicitInterfacePropStatementImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFImplicitInterfacePropStatement"
    stubClass="com.lsfusion.lang.psi.stubs.interfaces.ImplicitInterfaceStubElement"
    elementTypeFactory="com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

propertyStatement ::= propertyDeclaration equalsSign propertyCalcStatement (nonEmptyPropertyOptions | SEMI)
                        
{
    pin = 3
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFStatementGlobalPropDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFStatementGlobalPropDeclaration,com.lsfusion.lang.psi.context.ModifyParamContext,com.lsfusion.lang.psi.LSFInterfacePropStatement"
    stubClass = "com.lsfusion.lang.psi.stubs.StatementPropStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
    methods = [ getContextModifier getContextInferrer ]
}

explicitInterfaceActStatement ::= actionStatement
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFExplicitInterfaceActionStatementImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFExplicitInterfaceActionStatement"
    stubClass="com.lsfusion.lang.psi.stubs.interfaces.ExplicitInterfaceActionStubElement"
    elementTypeFactory="com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

actionStatement ::= propertyDeclaration equalsSign
                        (   actionUnfriendlyPD (nonEmptyPropertyOptions | SEMI)
                        |   topActionPropertyDefinitionBody nonEmptyPropertyOptions?
                        )                      
{
    pin(".*") = 1
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFActionDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFActionDeclaration,com.lsfusion.lang.psi.context.ModifyParamContext,com.lsfusion.lang.psi.LSFInterfacePropStatement"
    stubClass = "com.lsfusion.lang.psi.stubs.ActionStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
    methods = [ getContextModifier getContextInferrer ]
}

propertyCalcStatement ::= (expressionUnfriendlyPD | propertyExpression)

actionUnfriendlyPD ::= (abstractActionPropertyDefinition
                        |	customActionPropertyDefinitionBody
                        )
{
    methods = [ resolveValueParamClasses checkValueParamClasses ]
}

propertyDeclParams ::= LBRAC classParamDeclareList RBRAC

propertyDeclaration ::= simpleNameWithCaption propertyDeclParams?
{methods = [ resolveParamDecls ]}

paramDeclare ::= simpleName
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFParamDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFParamDeclaration"
}

aggrParamPropDeclare ::= className paramDeclare
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFAggrParamGlobalPropDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFAggrParamGlobalPropDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.AggrParamPropStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

untypedParamDeclare ::= paramDeclare

classParamDeclare ::= aggrParamPropDeclare | untypedParamDeclare
{
    implements="com.lsfusion.lang.psi.context.ClassParamDeclareContext"
    methods = [ resolveClass ensureClass getClassName getParamDeclare ]
}

classParamDeclareList ::= (nonEmptyClassParamDeclareList)?
nonEmptyClassParamDeclareList ::= classParamDeclare (COMMA classParamDeclare)*

propertyExpression ::= ifPE
{
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveValueClass resolveParams resolveAllParams resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]
}

ifPE ::= orPE (IF orPE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

orPE ::= xorPE (OR xorPE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

xorPE ::= andPE (XOR andPE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

andPE ::= notPE (AND notPE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

notPE ::= (NOT notPE) | equalityPE
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

equalityPE ::= relationalPE ((EQ_OPERAND | EQUALS) relationalPE)?
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

relationalPE ::= likePE ((LESS | GREATER | LESS_EQUALS | GREATER_EQUALS) likePE)?
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

likePE ::= additiveORPE (LIKE additiveORPE)?
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

additiveORPE ::= additivePE (ADDOR_OPERAND additivePE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

additivePE ::= multiplicativePE ((PLUS | MINUS) multiplicativePE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

typeMult ::= MULT | DIV
multiplicativePE ::= unaryMinusPE (typeMult unaryMinusPE)*
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

unaryMinusPE ::= (MINUS unaryMinusPE) | postfixUnaryPE
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

postfixUnaryPE ::= simplePE ((LSQBR uintLiteral RSQBR) | typePropertyDefinition)?
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

simplePE ::= (LBRAC propertyExpression RBRAC) | expressionPrimitive
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

expressionPrimitive ::= <<fullCompoundParamDeclareCheck>> expressionFriendlyPD | exprParameterUsage
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]}

expressionFriendlyPD ::= joinPropertyDefinition
	    |	multiPropertyDefinition
	    |	overridePropertyDefinition
	    |	ifElsePropertyDefinition
	    |	maxPropertyDefinition
	    |	casePropertyDefinition
	    |	partitionPropertyDefinition
	    |	groupExprPropertyDefinition
	    |	recursivePropertyDefinition
	    |	structCreationPropertyDefinition
	    |	concatPropertyDefinition
	    |	castPropertyDefinition
	    |	sessionPropertyDefinition
	    |	signaturePropertyDefinition
	    |   activeTabPropertyDefinition
	    |	literal
{
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

expressionUnfriendlyPD ::= dataPropertyDefinition
                           |   nativePropertyDefinition
                           |   abstractPropertyDefinition
                           |   formulaPropertyDefinition
                           |   groupPropertyDefinition
                           |   aggrPropertyDefinition
                           |   filterPropertyDefinition
                           |   reflectionPropertyDefinition
{methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses]}

aggrPropertyDefinition ::= AGGR customClassUsage WHERE propertyExpression {
    pin = 1;
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
} 

// для pin
private joinUsagePropertyDefinition ::= propertyUsage LBRAC propertyExpressionList RBRAC { pin = 2 }
private joinExprObjectPropertyDefinition ::= propertyExprObject LBRAC propertyExpressionList RBRAC { pin = 1 }

joinPropertyDefinition ::= JOIN? (joinUsagePropertyDefinition | joinExprObjectPropertyDefinition)
{
    pin = 3
    implements = "com.lsfusion.lang.psi.context.LSFExpression, com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveInferredValueClass resolveParamClasses inferParamClasses getParamList getValueClassNames getValuePropertyNames ]
}

overridePropertyDefinition ::= (OVERRIDE | EXCLUSIVE) nonEmptyPropertyExpressionList
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]}

ifElsePropertyDefinition ::= IF propertyExpression
                                    THEN propertyExpression
                                    (ELSE propertyExpression)?   // check greedy
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

maxPropertyDefinition ::= (MAX | MIN) nonEmptyPropertyExpressionList
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

caseBranchBody ::= WHEN propertyExpression (THEN propertyExpression) {pin(".*") = 1}
casePropertyDefinition ::= CASE (exclusiveOverrideOption)?
                           (caseBranchBody)+
                           (ELSE propertyExpression)?
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

multiPropertyDefinition ::= MULTI (exclusiveOverrideOption)? nonEmptyPropertyExpressionList
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

partitionPropertyBy ::= BY nonEmptyPropertyExpressionList
partitionPropertyDefinition ::= PARTITION
                                (   (SUM | PREV)
                                |   UNGROUP propertyUsage
                                    (   PROPORTION (STRICT)? ROUND LBRAC LEX_UINT_LITERAL RBRAC
                                    |   LIMIT (STRICT)?
                                    )
                                )
                                propertyExpression
                                (ORDER (DESC )? nonEmptyPropertyExpressionList)?
                                (WINDOW EXCEPTLAST)?
                                partitionPropertyBy?
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression, com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveInferredValueClass resolveParamClasses inferParamClasses getParamList getValueClassNames getValuePropertyNames ]
}

recursivePropertyDefinition ::= RECURSION propertyExpression STEP propertyExpression (CYCLES (YES |	NO | IMPOSSIBLE))?
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

structCreationPropertyDefinition ::= STRUCT LBRAC nonEmptyPropertyExpressionList RBRAC
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]
}

castPropertyDefinition ::= builtInClassName LBRAC propertyExpression RBRAC
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]}

concatPropertyDefinition ::= CONCAT stringLiteral COMMA nonEmptyPropertyExpressionList
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]}

sessionPropertyType ::= PREV | CHANGED | SET | DROPPED | SETCHANGED | DROPCHANGED | SETDROPPED 
sessionPropertyDefinition ::= sessionPropertyType LBRAC propertyExpression RBRAC
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]}

signaturePropertyDefinition ::= (CLASS) LBRAC propertyExpression RBRAC
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]}

activeTabPropertyDefinition ::= ACTIVE TAB componentID
{
    implements = "com.lsfusion.lang.psi.context.LSFExpression" 
    methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames]
}

propertyExprObject ::= LSQBR EQUALS (propertyCalcStatement) RSQBR
{ pin = 2 implements="com.lsfusion.lang.psi.context.ExtendParamContext" methods = [ getContextModifier getContextInferrer ] }

noContextPropertyUsage ::= propertyUsage
{implements = "com.lsfusion.lang.psi.context.PropertyUsageContext" methods = [ resolveParamClasses getParamList ]}
noContextActionUsage ::= actionUsage
{implements = "com.lsfusion.lang.psi.context.PropertyUsageContext" methods = [ resolveParamClasses getParamList ]}
noContextActionOrPropertyUsage ::= actionOrPropertyUsage
{implements = "com.lsfusion.lang.psi.context.PropertyUsageContext" methods = [ resolveParamClasses getParamList ]}
noParamsPropertyUsage ::= propertyUsage
{implements = "com.lsfusion.lang.psi.context.PropertyUsageContext" methods = [ resolveParamClasses getParamList ]}
noParamsActionUsage ::= actionUsage
{implements = "com.lsfusion.lang.psi.context.PropertyUsageContext" methods = [ resolveParamClasses getParamList ]}


dataPropertyDefinition ::= DATA (dataPropertySessionModifier)? className (LBRAC classNameList RBRAC)
{
    pin(".*") = 1;
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames getMigrationClassNames ]
}
dataPropertySessionModifier ::= LOCAL nestedLocalModifier

nativePropertyDefinition ::= NATIVE className LBRAC classNameList RBRAC
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
}

abstractPropertyDefinition ::= ABSTRACT ((CASE | MULTI | VALUE) abstractExclusiveOverrideOption?)? 
                               (FULL)? className LBRAC classNameList RBRAC
{
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
}

formulaPropertyDefinition ::= FORMULA (NULL)? (builtInClassName)? formulaPropertySyntaxList
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
}

formulaPropertySyntaxList ::= formulaPropertySyntax (COMMA formulaPropertySyntax)*

formulaPropertySyntax ::= formulaPropertySyntaxType stringLiteral 

formulaPropertySyntaxType ::= (PG | MS)?

groupingType ::= SUM | MAX | MIN | CONCAT | AGGR | EQUAL | LAST | NAGGR
groupPropertyBy ::= BY nonEmptyPropertyExpressionList { pin = 1 }
orderPropertyBy ::= ORDER (DESC)? nonEmptyPropertyExpressionList
groupPropertyBody ::= groupingType
                      nonEmptyPropertyExpressionList
                      (orderPropertyBy)?
                      (WHERE propertyExpression)?
  
private groupByBefore ::= GROUP groupPropertyBody groupPropertyBy
//private groupByAfter ::= GROUP groupPropertyBody groupPropertyBy;
groupPropertyDefinition ::= groupByBefore //| groupByAfter
{
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ getContextModifier getContextInferrer resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ] 
}		

groupExprPropertyDefinition ::= GROUP groupPropertyBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.LSFExpression"
    methods = [ resolveInferredValueClass inferParamClasses getContextModifier getContextInferrer getValueClassNames getValuePropertyNames ] 
}		                    

filterPropertyDefinition ::= (FILTER | ORDER | VIEW) groupObjectID
{
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
}

reflectionPropertyDefinition ::= REFLECTION reflectionPropertyType actionOrPropertyUsage
{
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE" 
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
}

reflectionPropertyType ::= CANONICALNAME

typeIs ::= IS | AS
typePropertyDefinition ::= typeIs className {pin = 1}

private semiPropertyOption ::= IN groupUsage
                           |	persistentSetting
                           |   COMPLEX
                           |   NOHINT
                           |	TABLE tableUsage
                           |	asEditActionSetting
                           |	viewTypeSetting
                           |	fixedCharWidthSetting
                           |	charWidthSetting
                           |	imageSetting
                           |    defaultCompareSetting
                           |	editKeySetting
                           |	autosetSetting
                           |	confirmSetting
                           |	regexpSetting
                           |	loggableSetting
                           |	echoSymbolsSetting
                           |	indexSetting
                           |    aggrSetting
                           |	notNullSetting
                           |	eventIdSetting
                           |   ATSIGN2 simpleName
private nonSemiPropertyOption ::= onEditEventSetting

//((semiPropertyOption | nonSemiPropertyOption)* (semiPropertyOption SEMI | nonSemiPropertyOption)
// recursive-LL might be better because of pins (? naybe it would not be possible to pin 1 rule because of for example } TABLE X (A)), but needs some refactoring
//semiPropertyOption (SEMI | nonEmptyPropertyOptions) | nonSemiPropertyOption nonEmptyPropertyOptions?
nonEmptyPropertyOptions ::= ((nonSemiPropertyOption* semiPropertyOption)+ SEMI | (semiPropertyOption* nonSemiPropertyOption)+)

viewTypeSetting ::= classViewType
persistentSetting ::= MATERIALIZED
charWidthSetting ::= CHARWIDTH intLiteral
fixedCharWidthSetting ::= FIXEDCHARWIDTH intLiteral
imageSetting ::= IMAGE stringLiteral
defaultCompareSetting ::= DEFAULTCOMPARE stringLiteral
editKeySetting ::= CHANGEKEY stringLiteral (SHOW | hideEditKey)?
autosetSetting ::= AUTOSET
confirmSetting ::= CONFIRM
regexpSetting ::= REGEXP stringLiteral (stringLiteral)?
loggableSetting ::= LOGGABLE
echoSymbolsSetting ::= ECHO
indexSetting ::= INDEXED
aggrSetting ::= AGGR
notNullSetting ::= nullOption (DELETE)? baseEvent
onEditEventSetting ::= ON formEventType topActionPropertyDefinitionBody  {pin = 2} // нельзя pin'ить 1 так как после действия ON может идти
asEditActionSetting ::= ASON formEventType noContextActionOrPropertyUsage {pin = 1}
eventIdSetting ::= EVENTID stringLiteral

hideEditKey ::= HIDE

contextMenuEventType ::= CONTEXTMENU (localizedStringLiteral)? { pin = 1 }
keyPressedEventType ::= KEYPRESS stringLiteral  { pin = 1 }
formEventType ::= CHANGE | GROUPCHANGE | CHANGEWYS | EDIT | contextMenuEventType | keyPressedEventType

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// ACTION PROPERTIES ///////////////////////////
////////////////////////////////////////////////////////////////////////////////

abstractActionPropertyDefinition ::= ABSTRACT
                                    (   ((CASE | MULTI) abstractExclusiveOverrideOption?)
                                    |	(LIST abstractCaseAddOption?)
                                    )?
                                    (FULL)?
                                    LBRAC classNameList RBRAC
{
    implements = "com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [ resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames ]
}

private topActionPropertyDefinitionBody ::= listActionPropertyDefinitionBody

// leaf before recursive to match newWhere before new (because first one is deeper) and importForm before import
actionPropertyDefinitionBody ::=    (   leafActionPDB
                                    |   recursiveActionPDB
                                    )                                    
{
    implements = "com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ inferActionParamClasses ]
}

private recursiveActionPDB ::=  recursiveExtendContextActionPDB | recursiveKeepContextActionPDB
private recursiveExtendContextActionPDB ::=  	forActionPropertyDefinitionBody
                                            |   whileActionPropertyDefinitionBody
                                            |	dialogActionPropertyDefinitionBody // mixed, input
                                            |	inputActionPropertyDefinitionBody // mixed, input
                                            |	newActionPropertyDefinitionBody // should be after newWhere

private recursiveKeepContextActionPDB ::=  		listActionPropertyDefinitionBody
                                        |	    confirmActionPropertyDefinitionBody// mixed, input
                                        |	    newSessionActionPropertyDefinitionBody
                                        |	    requestActionPropertyDefinitionBody
                                        |	    tryActionPropertyDefinitionBody // mixed
                                        |	    ifActionPropertyDefinitionBody
                                        |	    caseActionPropertyDefinitionBody
                                        |	    multiActionPropertyDefinitionBody	
                                        |	    applyActionPropertyDefinitionBody
                                        |	    importActionPropertyDefinitionBody // mixed
                                        |       newThreadActionPropertyDefinitionBody // mixed
                                        |	    newExecutorActionPropertyDefinitionBody // mixed, recursive but allways semi

// extendContextActionPDB comes before keepContextActionPDB to check assign action before exec action
private leafActionPDB ::=  (leafExtendContextActionPDB | leafKeepContextActionPDB) SEMI | SEMI { pin(".*") = 1 } // | EMPTY and not emptyActionPropertyDefinitionBody because it would be pinned and expect seni after it everywhere
private leafExtendContextActionPDB ::=          assignActionPropertyDefinitionBody // should be before exec
                                        |	    changeClassActionPropertyDefinitionBody
                                        |	    deleteActionPropertyDefinitionBody
                                        |	    newWhereActionPropertyDefinitionBody // should be before new

private leafKeepContextActionPDB ::=  	        execActionPropertyDefinitionBody // should be after assign	
                                        |	    terminalFlowActionPropertyDefinitionBody
                                      	|  	    cancelActionPropertyDefinitionBody
                                      	|	    formActionPropertyDefinitionBody
                                      	|	    printActionPropertyDefinitionBody
                                      	|	    exportActionPropertyDefinitionBody
                                      	|       exportDataActionPropertyDefinitionBody // should be after export
                                      	|	    messageActionPropertyDefinitionBody
                                      	|	    asyncUpdateActionPropertyDefinitionBody
                                      	|	    seekObjectActionPropertyDefinitionBody
                                      	|	    emailActionPropertyDefinitionBody
                                      	|	    fileActionPropertyDefinitionBody
                                      	|	    evalActionPropertyDefinitionBody
                                      	|	    drillDownActionPropertyDefinitionBody
                                      	|	    readActionPropertyDefinitionBody
                                      	|	    writeActionPropertyDefinitionBody
                                      	|	    importFormActionPropertyDefinitionBody
                                      	|	    activeFormActionPropertyDefinitionBody
                                      	|	    activateActionPropertyDefinitionBody
                                      	|       externalActionPropertyDefinitionBody

private mappedForm ::= ((   (LIST | EDIT) customClassUsage formSingleActionObject)
                        |   (formUsage formActionObjectList?) ) {pin(".*") = 1 }

formSingleActionObject ::= formActionObjectProps
constraintFilter ::= (CONSTRAINTFILTER (EQUALS propertyExpression)?)
objectInProps ::= EQUALS propertyExpression NULL? { pin = 1 }
changeInput ::= (CHANGE (EQUALS propertyExpression)? NOCONSTRAINTFILTER? NOCHANGE?) { pin = 1 }
objectInputProps ::= (INPUT | changeInput) simpleName? NULL? constraintFilter? { pin = 1 } // inputDestination?  
private formActionObjectProps ::= objectInProps? objectInputProps? 
formActionObjectUsage ::= objectUsage formActionObjectProps {
    pin = 1
    implements="com.lsfusion.lang.psi.context.ClassParamDeclareContext,com.lsfusion.lang.psi.declarations.LSFObjectInputParamDeclaration"
    extends="com.lsfusion.lang.psi.declarations.impl.LSFObjectInputParamDeclarationImpl"
    methods = [ resolveClass ensureClass ]
}
formActionPropertyDefinitionBody ::=
	    SHOW
	     mappedForm
		(   
            syncTypeLiteral
		|   windowTypeLiteral

		|   manageSessionClause
		|   noCancelClause
		|   formSessionScopeClause

		|   CHECK
		|   READONLY
		)*
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.FormContext"
    methods = [inferActionParamClasses resolveFormDecl]
}

manageSessionClause ::= MANAGESESSION | NOMANAGESESSION
formSessionScopeClause ::= NEWSESSION | NESTEDSESSION
noCancelClause ::= CANCEL | NOCANCEL 

dialogActionPropertyDefinitionBody ::=
	    DIALOG
	    mappedForm
		(   
            windowTypeLiteral

		|   manageSessionClause
		|   noCancelClause
		|   formSessionScopeClause

		|   CHECK
		|   READONLY
		)*
		doInputBody
{
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.FormContext, com.lsfusion.lang.psi.context.ExtendDoParamContext"
    methods = [inferActionParamClasses resolveFormDecl getDoContextModifier getDoContextInferrer]
}

doInputBody ::= SEMI | (doMainBody (ELSE actionPropertyDefinitionBody)?)

doMainBody ::= DO actionPropertyDefinitionBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext"
    methods = [ getContextModifier getContextInferrer ]
}

//inputDestination ::= TO propertyUsage

syncTypeLiteral ::= WAIT | NOWAIT
windowTypeLiteral ::= FLOAT | DOCKED

staticDestination ::= TO noParamsPropertyUsage

printActionPropertyDefinitionBody ::=
	    PRINT mappedForm
		(   (
		    (   XLSX (SHEET propertyUsage)? (PASSWORD propertyExpression)?
		    |   XLS (SHEET propertyUsage)? (PASSWORD propertyExpression)?
		    |   PDF 
		    |   DOC 
		    |   DOCX
		    ) 
		    staticDestination?
		    ) 
		|
		    (
		        MESSAGE
		        syncTypeLiteral?
		        (TOP intLiteral)?
		    )
		|
		    (
            (PREVIEW | NOPREVIEW)?
		    syncTypeLiteral?
		    (TO propertyExpression)?
		    )
        )		 
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.FormContext"
    methods = [inferActionParamClasses resolveFormDecl]
}
exportActionPropertyDefinitionBody ::=
	    EXPORT mappedForm
        (   XML (HEADERS stringLiteral EQUALS objectUsage (COMMA stringLiteral EQUALS objectUsage)*)?
        |   JSON
        |   CSV (stringLiteral)? (NOHEADER)? (CHARSET stringLiteral)?
        |   (DBF (CHARSET stringLiteral)?)
        )
        staticDestination?
        {
    pin = 2
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.FormContext"
    methods = [inferActionParamClasses resolveFormDecl]
}

propertyExpressionWithOrder ::= propertyExpression (DESC)?

exportDataActionPropertyDefinitionBody ::=
	    EXPORT
        (   XML (LIST|TABLE)? ATTR?
        |   JSON (LIST|TABLE)?
        |   CSV (stringLiteral)? (NOHEADER)? (NOESCAPE)? (CHARSET stringLiteral)?
        |   (DBF (CHARSET stringLiteral)?)
        |   LIST
        |   TABLE
        )?
        FROM nonEmptyAliasedPropertyExpressionList
        (WHERE propertyExpression)?
        (ORDER propertyExpressionWithOrder (COMMA propertyExpressionWithOrder)*)?
        staticDestination?
        {
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.ExtendParamContext"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses]
}

nonEmptyAliasedPropertyExpressionList ::= aliasedPropertyExpression (COMMA aliasedPropertyExpression)* 
        
aliasedPropertyExpression ::= (ID EQUALS)? propertyExpression  

formActionObjectList ::= OBJECTS formActionObjectUsage (COMMA formActionObjectUsage)* {pin(".*") = 1}

customActionPropertyDefinitionBody ::= CUSTOM ((javaClassStringUsage (LBRAC classNameList RBRAC)?)  | codeLiteral) (NULL)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.UnfriendlyPE"
    methods = [resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames]
}

externalActionPropertyDefinitionBody ::= EXTERNAL externalType (PARAMS nonEmptyPropertyExpressionList)? (TO nonEmptyNoParamsPropertyUsageList)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
//    implements="com.lsfusion.lang.psi.context.UnfriendlyPE"
//    methods = [resolveUnfriendValueClass resolveValueParamClasses checkValueParamClasses getValueParamClassNames getValueClassNames getValuePropertyNames]
}

private externalType ::=  SQL propertyExpression EXEC propertyExpression
              |   HTTP propertyExpression
              |   DBF propertyExpression APPEND (CHARSET stringLiteral)?
              |   LSF propertyExpression (EXEC | (EVAL (ACTION)?)) propertyExpression
              |   JAVA propertyExpression
              {pin(".*") = 1}

javaClassStringUsage ::= stringLiteral
{
    mixin="com.lsfusion.lang.psi.references.impl.LSFJavaClassStringReferenceImpl"
    implements="com.lsfusion.lang.psi.references.LSFJavaClassStringReference"
}

private newWhereToClause ::= TO mappedPropertyExprParam { pin = 1 }
private newWhereClause ::= WHERE propertyExpression newWhereToClause? { pin = 1 }

newWhereActionPropertyDefinitionBody ::= NEW customClassUsage newWhereClause                                                                 
{
    pin = 3
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses ]
}

emailActionPropertyDefinitionBody ::=
		EMAIL
		(FROM propertyExpression)?
		SUBJECT propertyExpression
		(emailRecipientTypeLiteral propertyExpression)*
		(   INLINE HTML propertyExpression
		|	INLINE formEmailToObjects
		|	ATTACH emailAttachFormat (NAME propertyExpression)? formEmailToObjects
		|   ATTACH FILE propertyExpression (NAME propertyExpression)?
		)*
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

formEmailToObjects ::= formUsage formActionObjectList?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

confirmActionPropertyDefinitionBody ::= ASK propertyExpression ((paramDeclare EQUALS)? YESNO)? doInputBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression,com.lsfusion.lang.psi.context.ClassParamDeclareContext, com.lsfusion.lang.psi.context.ExtendDoParamContext"
    methods = [inferActionParamClasses resolveClass ensureClass getDoContextModifier getDoContextInferrer]
}

messageActionPropertyDefinitionBody ::= MESSAGE propertyExpression syncTypeLiteral?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

asyncUpdateActionPropertyDefinitionBody ::= ASYNCUPDATE propertyExpression
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

seekObjectActionPropertyDefinitionBody ::= SEEK (FIRST | LAST | NULL)? 
                                            (   (objectID EQUALS propertyExpression) 
                                            |   (groupObjectID (OBJECTS formActionObjectUsage (COMMA formActionObjectUsage)*)?) 
                                            )
{                        
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.FormContext"
    methods = [inferActionParamClasses resolveFormDecl] 
}

fileActionPropertyDefinitionBody ::= OPEN propertyExpression (NAME propertyExpression)? syncTypeLiteral?
{
    pin(".*") = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

changeClassActionPropertyDefinitionBody ::= CHANGECLASS exprParameterUsage TO customClassUsage (WHERE propertyExpression)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses ]
}

deleteActionPropertyDefinitionBody ::= DELETE exprParameterUsage (WHERE propertyExpression)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses ]
}

evalActionPropertyDefinitionBody ::= EVAL (ACTION)? propertyExpression (PARAMS propertyExpressionList)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

readActionPropertyDefinitionBody ::= READ (CLIENT DIALOG?)? propertyExpression (TO noParamsPropertyUsage)? ((MOVE propertyExpression) | (DELETE))?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

writeActionPropertyDefinitionBody ::= WRITE (CLIENT DIALOG?)? propertyExpression FROM propertyExpression APPEND?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

importActionPropertyDefinitionBody ::= IMPORT importActionSourceType? FROM propertyExpression (FIELDS nonEmptyImportFieldDefinitions | TO nonEmptyImportPropertyUsageListWithIds) (WHERE propertyExpression)? doInputBody
{
    pin(".*") = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.ExtendDoParamContext"
    methods = [inferActionParamClasses getDoContextModifier getDoContextInferrer]
}

nonEmptyImportFieldDefinitions ::= importFieldDefinition (COMMA importFieldDefinition)*

importFieldAlias ::= simpleName
importFieldName ::= simpleName | stringLiteral

importFieldDefinition ::= builtInClassName (importFieldAlias EQ)? importFieldName NULL? {
    implements="com.lsfusion.lang.psi.context.ClassParamDeclareContext,com.lsfusion.lang.psi.declarations.LSFImportFieldParamDeclaration"
    extends="com.lsfusion.lang.psi.declarations.impl.LSFImportFieldParamDeclartionImpl"
    methods = [ resolveClass ensureClass ]
}

importPropertyUsage ::= propertyUsage
{
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList]
}

importFormActionPropertyDefinitionBody ::= IMPORT formUsage importFormActionSourceType
{
    pin = 2
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.FormContext"
    methods = [inferActionParamClasses resolveFormDecl]
}

importActionSourceType ::=  XLS (SHEET (propertyExpression | ALL))?
                        |   DBF (MEMO propertyExpression)? (CHARSET stringLiteral)?
                        |   (CSV (stringLiteral)? (NOHEADER)? (CHARSET stringLiteral)?)
                        |   XML (ROOT propertyExpression)? (LIST|TABLE)? (ATTR)?
                        |   JSON (ROOT propertyExpression)? (LIST|TABLE)?
                        |   LIST
                        |   TABLE
                        |   MDB

importFormActionSourceType ::=  DBF (CHARSET stringLiteral)?
                            |   CSV (stringLiteral)? (NOHEADER)? (CHARSET stringLiteral)?
                            |   XML (ROOT propertyExpression)? (ATTR)? (HEADERS stringLiteral EQUALS objectUsage (COMMA stringLiteral EQUALS objectUsage)*)?
                            |   JSON (ROOT propertyExpression)?

newThreadActionPropertyDefinitionBody ::= NEWTHREAD actionPropertyDefinitionBody
                                        (   (   CONNECTION propertyExpression
                                            |   (SCHEDULE (PERIOD propertyExpression)? (DELAY propertyExpression)?)
                                            )
                                            SEMI
                                        )?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

newExecutorActionPropertyDefinitionBody ::= NEWEXECUTOR actionPropertyDefinitionBody THREADS propertyExpression SEMI
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

newSessionActionPropertyDefinitionBody ::= (    NEWSESSION (NEWSQL)? nestedPropertiesSelector? 
                                           |    NESTEDSESSION
                                           )
                                           (SINGLE)?
                                           actionPropertyDefinitionBody
{
    pin(".*") = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

nonEmptyImportPropertyUsageListWithIds ::= importPropertyUsageWithId (COMMA importPropertyUsageWithId)*

importPropertyUsageWithId ::= importPropertyUsage (EQUALS (ID | stringLiteral))? 

drillDownActionPropertyDefinitionBody ::= DRILLDOWN propertyExpression
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

requestActionPropertyDefinitionBody ::= REQUEST actionPropertyDefinitionBody DO actionPropertyDefinitionBody (ELSE actionPropertyDefinitionBody)? 
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

inputActionPropertyDefinitionBody ::= INPUT (((paramDeclare EQUALS)? builtInClassName) | (paramDeclare? EQUALS propertyExpression)) (CHANGE (EQUALS propertyExpression)?)? doInputBody // inputDestination? 
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression, com.lsfusion.lang.psi.context.ClassParamDeclareContext, com.lsfusion.lang.psi.context.ExtendDoParamContext"
    methods = [inferActionParamClasses resolveClass ensureClass getDoContextModifier getDoContextInferrer]
}

activeFormActionPropertyDefinitionBody ::= ACTIVE FORM formUsage
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

emptyActionPropertyDefinitionBody ::= 

activateActionPropertyDefinitionBody ::= ACTIVATE (  FORM formUsage 
                                                   | TAB componentID
                                                   | PROPERTY formPropertyDrawID
                                                   )
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

listActionPropertyDefinitionBody ::=    LBRACE
			                            listActionStatement*
		                                RBRACE
{
    pin = 1
    mixin="com.lsfusion.lang.psi.LSFListActionImpl"
    implements="com.lsfusion.lang.psi.LSFListAction, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses resolveAllParams]
}

private nestedPropertiesSelector ::= NESTED (LOCAL | (LBRAC nonEmptyNoContextPropertyUsageList RBRAC))

private listActionStatement ::= (   actionPropertyDefinitionBody //  !} => ;
                                |   localDataPropertyDefinition SEMI
                                )
{
    pin(".*") = 1
    recoverWhile = "list_action_statement_recover"
}

// some statements are not pinned after the first token, so we need these fake rules to pin incomplete statements (to support recovery assertion) 
// Important ! after recover the rule should mandatory be pinned (matched)
private list_action_statement_recover ::= !(ACTIVATE | NEW | NEWEDIT | APPLY | CANCEL | CHANGE | ASK | ASYNCUPDATE | BREAK | CASE | CHANGECLASS | CONFIRM | CUSTOM | DELETE
                                            | DRILLDOWN | EDIT | EMAIL | EVAL | EXEC | FOR | SHOW | DIALOG | PRINT | EXPORT | TRY | IF | IMPORT | LOCAL | MESSAGE | MULTI | OPEN
                                            | READ | REQUEST | INPUT | RETURN | SEEK | WHILE| WRITE
                                            | NEWEXECUTOR | NEWSESSION | NEWTHREAD | NESTEDSESSION
                                            | EXTERNAL
                                            | ID // pinned with execActionPropertyDefinitionBody
                                            | SEMI
                                            | LBRACE
                                            | RBRACE // would not be pinned (matched) but we will consider it the end of list statement
                                           )

localDataPropertyDefinition ::= LOCAL nestedLocalModifier nonEmptyLocalPropertyDeclarationNameList EQUALS className LBRAC classNameList RBRAC
{
    pin = 1
}

nestedLocalModifier ::= (NESTED manageSessionClause?)?

nonEmptyLocalPropertyDeclarationNameList ::= localPropertyDeclarationName (COMMA localPropertyDeclarationName)*

localPropertyDeclarationName ::= simpleName
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFLocalPropDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFLocalPropDeclaration"
}

//Разбиваем правило, чтобы была возможность запинить по EXEC
execActionPropertyDefinitionBody ::= execActionPropertyDefinitionBody1 | execActionPropertyDefinitionBody2
{
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ resolveParamClasses inferActionParamClasses getParamList ]
}
private execActionPropertyDefinitionBody1 ::= EXEC actionUsage LBRAC propertyExpressionList RBRAC {pin = 1}
//EXEC - последнее правило, которое может начинаться с ID, поэтому спокойно пиним
private execActionPropertyDefinitionBody2 ::= actionUsage LBRAC propertyExpressionList RBRAC {pin = 1}

//Разбиваем правило, чтобы была возможность запинить по ASSIGN
assignActionPropertyDefinitionBody ::= assignActionPropertyDefinitionBody1 | assignActionPropertyDefinitionBody2
{
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses ]
}

private assignActionPropertyDefinitionBody1 ::= CHANGE mappedPropertyExprParam ARROW propertyExpression (WHERE propertyExpression)? {pin = 1}
private assignActionPropertyDefinitionBody2 ::= mappedPropertyExprParam ARROW propertyExpression (WHERE propertyExpression)? {pin = 2}

tryActionPropertyDefinitionBody ::= TRY actionPropertyDefinitionBody (FINALLY actionPropertyDefinitionBody)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression" methods = [inferActionParamClasses]
}

ifActionPropertyDefinitionBody ::= IF propertyExpression THEN actionPropertyDefinitionBody (ELSE actionPropertyDefinitionBody)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression" methods = [inferActionParamClasses]
}

caseActionPropertyDefinitionBody ::= CASE (exclusiveOverrideOption)? (actionCaseBranchBody)+ (ELSE actionPropertyDefinitionBody)?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

actionCaseBranchBody ::= WHEN propertyExpression (THEN actionPropertyDefinitionBody) {pin(".*") = 1}

multiActionPropertyDefinitionBody ::= MULTI (exclusiveOverrideOption)? nonEmptyActionPDBList
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

applyActionPropertyDefinitionBody ::= APPLY nestedPropertiesSelector? SINGLE? SERIALIZABLE? actionPropertyDefinitionBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

cancelActionPropertyDefinitionBody ::= CANCEL nestedPropertiesSelector?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [inferActionParamClasses]
}

forAddObjClause ::= NEW (paramDeclare EQUALS)? customClassUsage AUTOSET?
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ClassParamDeclareContext"
    methods = [ resolveClass ensureClass ]
}

forActionPropertyDefinitionBody ::= forActionPropertyMainBody
		                            (ELSE actionPropertyDefinitionBody)?
{
    implements="com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ inferActionParamClasses ]
}

newActionPropertyDefinitionBody ::= forAddObjClause
                              actionPropertyDefinitionBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses ]
}

forActionPropertyMainBody ::= FOR propertyExpression (ORDER (DESC)? nonEmptyPropertyExpressionList)?
                              inlineOption
                              (forAddObjClause)?
                              DO actionPropertyDefinitionBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext"
    methods = [ getContextModifier getContextInferrer ]
}
                                                       
whileActionPropertyDefinitionBody ::= WHILE (propertyExpression (ORDER (DESC)? nonEmptyPropertyExpressionList)? )?
		                              inlineOption
		                              (forAddObjClause)?
		                              DO actionPropertyDefinitionBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ExtendParamContext, com.lsfusion.lang.psi.context.ActionExpression"
    methods = [ getContextModifier getContextInferrer inferActionParamClasses ]
}

terminalFlowActionPropertyDefinitionBody ::= BREAK | RETURN
{
    implements="com.lsfusion.lang.psi.context.ActionExpression" methods = [inferActionParamClasses]
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// FORM STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

formStatement ::=	(	formDecl
            		|	extendingFormDeclaration
		            )
                    (	formGroupObjectsList
                    |	formTreeGroupObjectList
                    |	formFiltersList
                    |	formPropertiesList
                    |	formHintsList
                    |	formEventsList
                    |	formFilterGroupDeclaration
                    |	formExtendFilterGroupDeclaration
                    |	formOrderByList
                    |	listFormDeclaration
                    |	editFormDeclaration
                    |   reportFilesDeclaration
                    )*
                    SEMI
{
    pin=1
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
    stubClass = "com.lsfusion.lang.psi.stubs.extend.ExtendFormStubElement"
    implements="com.lsfusion.lang.psi.extend.LSFFormExtend, com.lsfusion.lang.psi.context.FormContext"
    mixin="com.lsfusion.lang.psi.extend.impl.LSFFormExtendImpl"
    methods = [resolveFormDecl]
}

listFormDeclaration ::= LIST customClassUsage OBJECT objectUsage {pin = 1}
editFormDeclaration ::= EDIT customClassUsage OBJECT objectUsage {pin = 1}

reportFilesDeclaration ::= REPORTFILES groupObjectReportPath (COMMA groupObjectReportPath)* {pin = 1}
groupObjectReportPath ::= (TOP | groupObjectUsage) formCalcPropertyObject

formDecl ::= FORM simpleNameWithCaption
		            (   IMAGE stringLiteral
		            |   AUTOREFRESH intLiteral
		            )*
{
    pin = 2
    mixin ="com.lsfusion.lang.psi.declarations.impl.LSFFormDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFFormDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.FormStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

extendingFormDeclaration ::= EXTEND FORM formUsageWrapper

formUsageWrapper ::= formUsage // for usages search filter

formGroupObjectsList ::= OBJECTS formGroupObjectDeclaration (COMMA formGroupObjectDeclaration)* {pin = 1}

formTreeGroupObjectList ::= TREE (treeGroupDeclaration)? formTreeGroupObjectDeclaration (COMMA formTreeGroupObjectDeclaration)* formTreeGroupObjectOptions {pin = 1}

treeGroupDeclaration ::= simpleName
{
    implements="com.lsfusion.lang.psi.declarations.LSFTreeGroupDecl"
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFTreeGroupDeclImpl"
}

formGroupObjectDeclaration ::= formCommonGroupObject formGroupObjectOptions
formGroupObjectOptions ::= (    formGroupObjectViewType 
                           |    formGroupObjectInitViewType 
                           |    formGroupObjectPageSize
                           |    formGroupObjectUpdate
                           |    formGroupObjectRelativePosition
                           )*

formTreeGroupObjectOptions ::= (   formGroupObjectRelativePosition
                               )*
                           
formTreeGroupObjectDeclaration ::= formCommonGroupObject (treeGroupParentDeclaration)?
{implements = "com.lsfusion.lang.psi.context.PropertyUsageContext" methods = [ resolveParamClasses getParamList ]}

treeGroupParentDeclaration ::= PARENT (propertyUsage | LBRAC nonEmptyPropertyUsageList RBRAC) { pin = 1 }

formCommonGroupObject ::= formSingleGroupObjectDeclaration | formMultiGroupObjectDeclaration
{mixin="com.lsfusion.lang.psi.declarations.impl.LSFGroupObjectDeclarationImpl" implements="com.lsfusion.lang.psi.declarations.LSFGroupObjectDeclaration"}

formGroupObjectViewType ::= classViewType
formGroupObjectInitViewType ::= INIT | FIXED

classViewType ::= PANEL | GRID | TOOLBAR

formGroupObjectPageSize ::= PAGESIZE intLiteral

formGroupObjectUpdate ::= FIRST | LAST | PREV | NULL

formGroupObjectRelativePositionType ::= AFTER | BEFORE
formGroupObjectRelativePosition ::= formGroupObjectRelativePositionType groupObjectUsage { pin = 1}

formSingleGroupObjectDeclaration ::= formObjectDeclaration

formMultiGroupObjectDeclaration ::= (simpleName EQUALS)?
		                            LBRAC
			                        formObjectDeclaration (COMMA formObjectDeclaration)*
		                            RBRAC

formObjectDeclaration ::= (simpleName EQUALS)?
		                  className (localizedStringLiteral)?
		                  (ON CHANGE formActionPropertyObject)?
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFObjectDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFObjectDeclaration"
}

formPropertyDrawNameDecl ::= (simpleNameOrWithCaption EQUALS)? formPropertyName formPropertyOptionsList
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFPropertyDrawNameDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFPropertyDrawNameDeclaration"
}

formPropertiesNamesDeclList ::=	formPropertyDrawNameDecl (COMMA formPropertyDrawNameDecl)*

formPropertiesList ::=  PROPERTIES (formMappedNamePropertiesList | formPropertyOptionsList formMappedPropertiesList) { pin = 1 }

formMappedNamePropertiesList ::= LBRAC objectUsageList RBRAC formPropertyOptionsList formPropertiesNamesDeclList
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList]
}

formPropertyOptionsList ::= (    CHANGEABLE | READONLY | SELECTOR
                            |    formOptionSession
                            |    HINTNOUPDATE
                            |    HINTTABLE
                            |    OPTIMISTICASYNC
                            |    formOptionForce
                            |    formOptionToDraw
                            |    formOptionEventId
                            |    formOptionColumns
                            |    formOptionsWithCalcPropertyObject
                            |    formOptionsWithFormPropertyDraw
                            |    formOptionsOnEvents
                            )*

formOptionSession ::= NEWSESSION | NESTEDSESSION;
formOptionColumns ::= COLUMNS (stringLiteral)? LBRAC nonEmptyGroupObjectUsageList RBRAC {pin = 1}
formOptionForce ::= FORCE? classViewType
formOptionToDraw ::= TODRAW groupObjectUsage {pin = 1}
formOptionEventId ::= EVENTID stringLiteral {pin = 1}
formOptionsWithCalcPropertyObject ::= (SHOWIF | READONLYIF | BACKGROUND | FOREGROUND | HEADER | FOOTER) formCalcPropertyObject {pin = 1}
formOptionsWithFormPropertyDraw ::= (BEFORE | AFTER | QUICKFILTER) formPropertyDrawUsage {pin = 1}
formOptionsOnEvents ::= ON formEventType formActionPropertyObject
{
    pin = 1
}

designCalcPropertyObject ::= formCalcPropertyObject
formCalcPropertyObject ::= formPropertyObject | formExprDeclaration
formActionPropertyObject ::= formActionObject | formActionDeclaration

formPropertyDrawMappedDecl ::= (((simpleNameOrWithCaption EQUALS)? formPropertyDrawObject)  
                               | (simpleNameOrWithCaption? EQUALS (formExprDeclaration | formActionDeclaration)))
                                formPropertyOptionsList
{
    pin = 1
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFPropertyDrawMappedDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFPropertyDrawMappedDeclaration"
}

formMappedPropertiesList ::= formPropertyDrawMappedDecl (COMMA formPropertyDrawMappedDecl)* {pin = 1}

formFiltersList ::= FILTERS formExprDeclaration (COMMA formExprDeclaration)* {pin(".*") = 1}

formHintsList ::= (HINTNOUPDATE | HINTTABLE) LIST nonEmptyNoContextPropertyUsageList {pin = 1}

formEventsList ::= EVENTS formEventDeclaration (COMMA formEventDeclaration)* {pin = 1}

formEventDeclaration ::= ON
                        (    OK (BEFORE | AFTER)?
                        |    APPLY (BEFORE | AFTER)?
                        |    CLOSE
                        |    INIT
                        |    CANCEL
                        |    DROP
                        |    QUERYOK
                        |    QUERYCLOSE
                        |    CHANGE ID
                        )
                        formActionPropertyObject
{
    pin = 1
}

formFilterGroupDeclaration ::= FILTERGROUP filterGroupName regularFilterDeclaration*
{pin = 1}

filterGroupName ::= simpleName
{
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFFilterGroupDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFFilterGroupDeclaration"
}

formExtendFilterGroupDeclaration ::= EXTEND FILTERGROUP filterGroupUsage regularFilterDeclaration+
{pin(".*") = 1}

filterGroupUsage ::= simpleName
{
    mixin="com.lsfusion.lang.psi.references.impl.LSFFilterGroupReferenceImpl"
    implements="com.lsfusion.lang.psi.references.LSFFilterGroupReference"
}

regularFilterDeclaration ::= FILTER localizedStringLiteral formExprDeclaration (stringLiteral)? (filterSetDefault)?

formExprDeclaration ::= propertyExpression
formActionDeclaration ::= topActionPropertyDefinitionBody
filterSetDefault ::= DEFAULT

formOrderByList ::= ORDER formPropertyDrawWithOrder (COMMA formPropertyDrawWithOrder)* {pin(".*") = 1}

formPropertyDrawWithOrder ::= formPropertyDrawUsage (DESC)?

predefinedAddPropertyName ::=  NEW | NEWEDIT | EDIT

predefinedFormPropertyName ::= VALUE
                           |    predefinedAddPropertyName (LSQBR explicitPropClass RSQBR)?
                           |    DELETE
{
    mixin="com.lsfusion.lang.psi.LSFIdImpl"
    implements="com.lsfusion.lang.psi.LSFId"
}

formPropertyName ::= actionOrPropertyUsage | predefinedFormPropertyName

private actionOrPropertyUsage ::= ACTION actionUsage | propertyElseActionUsage { pin(".*") = 1 }

formPropertyDrawObject ::= formPropertyName LBRAC objectUsageList RBRAC
{
//    pin = 1 // formPropertyObject before propertyExpression
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList ]
}
formPropertyObject ::= propertyUsage LBRAC objectUsageList RBRAC
{
//    pin = 1 // formPropertyObject before propertyExpression
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList ]
}
formActionObject ::= actionUsage LBRAC objectUsageList RBRAC
{
//    pin = 1 // formPropertyObject before propertyExpression
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList ]
}

aliasUsage ::= simpleName

formPropertyDrawPropertyUsage ::= simpleName

formPropertyDrawUsage ::= (<< notSimpleIdAhead >> formPropertyDrawPropertyUsage LBRAC objectUsageList RBRAC) | aliasUsage
{
    implements="com.lsfusion.lang.psi.references.LSFPropertyDrawReference"
    mixin="com.lsfusion.lang.psi.references.impl.LSFPropertyDrawReferenceImpl"
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////OVERRIDE STATEMENT/////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


overrideActionStatement ::= mappedActionClassParamDeclare PLUSEQ
		                (WHEN propertyExpression THEN)?
		                topActionPropertyDefinitionBody		                
{
//    pin = 2;
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

overridePropertyStatement ::= mappedPropertyClassParamDeclare PLUSEQ
		                (WHEN propertyExpression THEN)?
		                propertyExpression SEMI
{
    pin = 2;
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// CONSTRAINT STATEMENT //////////////////////////
////////////////////////////////////////////////////////////////////////////////

constraintStatement ::= CONSTRAINT baseEvent propertyExpression
		                (CHECKED (BY nonEmptyNoContextPropertyUsageList)? )?
		                MESSAGE propertyExpression
		                SEMI
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// FOLLOWS STATEMENT ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

followsStatement ::= mappedPropertyClassParamDeclare FOLLOWS baseEvent
                     propertyExpression (RESOLVE LEFT? RIGHT?)?		             
		             SEMI
{
    pin = 2
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// WRITE STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

writeWhenStatement ::= mappedPropertyClassParamDeclare ARROW propertyExpression WHEN (DO)? propertyExpression SEMI
{
    pin = 2
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// EVENT STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

eventStatement ::= WHEN baseEvent propertyExpression (ORDER (DESC)? nonEmptyPropertyExpressionList)?
		                inlineOption DO actionPropertyDefinitionBody
{
    pin = 1
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

////////////////////////////////////////////////////////////////////////////////
//////////////////////////// GLOBAL EVENT STATEMENT ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

globalEventStatement ::= ON baseEvent (SINGLE)? (SHOWDEP noContextActionOrPropertyUsage)? actionPropertyDefinitionBody
{
    pin=1
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}

baseEvent ::= (GLOBAL | LOCAL)? (FORMS nonEmptyFormUsageList)? (GOAFTER nonEmptyNoContextPropertyUsageList)?

inlineOption ::=   (NOINLINE (LBRAC exprParameterUsageList RBRAC)? )? (INLINE)?

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// SHOWDEP STATEMENT //////////////////////////////
////////////////////////////////////////////////////////////////////////////////

showDepStatement ::= SHOWDEP noContextActionOrPropertyUsage FROM noContextActionOrPropertyUsage SEMI {pin=1 methods = [ getIcon ]}

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// ASPECT STATEMENT //////////////////////////////
////////////////////////////////////////////////////////////////////////////////

aspectStatement ::= (BEFORE | AFTER) mappedActionClassParamDeclare DO actionPropertyDefinitionBody
{
    pin=1
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer getIcon ]
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// TABLE STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

tableStatement ::= TABLE simpleName LBRAC classNameList RBRAC (FULL)? SEMI 
{
    pin = 2
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFTableDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFTableDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.TableStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}


////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// LOGGABLE STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

loggableStatement ::= LOGGABLE nonEmptyNoContextPropertyUsageList SEMI {pin=1 methods = [ getIcon ]}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// INDEX STATEMENT /////////////////////////////
////////////////////////////////////////////////////////////////////////////////

mappedPropertyOrSimpleExprParam ::= mappedPropertyExprParam | exprParameterUsage; // exprParam
nonEmptyMappedPropertyOrSimpleExprParamList ::= mappedPropertyOrSimpleExprParam (COMMA mappedPropertyOrSimpleExprParam)*  { pin(".*") = 1}

indexStatement ::= INDEX nonEmptyMappedPropertyOrSimpleExprParamList SEMI {
    implements="com.lsfusion.lang.psi.context.ModifyParamContext"
    methods = [ getContextModifier getContextInferrer ]
    pin=1 methods = [ getIcon ]
}

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// WINDOW STATEMENT ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

windowStatement ::= windowCreateStatement | windowHideStatement {methods = [ getIcon ]}

windowCreateStatement ::= WINDOW simpleName (localizedStringLiteral)? windowType windowOptions SEMI
{mixin="com.lsfusion.lang.psi.declarations.impl.LSFWindowDeclarationImpl" implements="com.lsfusion.lang.psi.declarations.LSFWindowDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.WindowStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
    pin = 2
}

windowHideStatement ::= HIDE WINDOW windowUsage SEMI {pin=2}

windowType ::= MENU | PANEL | TOOLBAR | TREE

windowOptions ::=   (	HIDETITLE
                    |	DRAWROOT
                    |	HIDESCROLLBARS
                    |	orientation
                    |	dockPosition
                    |	borderPosition
                    |	HALIGN LBRAC alignmentLiteral RBRAC
                    |	VALIGN LBRAC alignmentLiteral RBRAC
                    |	TEXTHALIGN LBRAC alignmentLiteral RBRAC
                    |	TEXTVALIGN LBRAC alignmentLiteral RBRAC
                    )*

borderPosition ::= LEFT	| RIGHT | TOP | BOTTOM
orientation ::= VERTICAL | HORIZONTAL
dockPosition ::= POSITION LBRAC intLiteral COMMA intLiteral COMMA intLiteral COMMA intLiteral RBRAC

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////// NAVIGATOR STATEMENT ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

navigatorStatement ::= NAVIGATOR navigatorElementStatementBody {pin=1 methods = [ getIcon ]}

navigatorElementStatementBody ::=   (   LBRACE
                                        navigatorElementBodyStatement*
                                        RBRACE
                                    ) 
                                    |   emptyStatement

navigatorElementBodyStatement ::= (     moveNavigatorElementStatement
                                  |     setupNavigatorElementStatement
                                  |     newNavigatorElementStatement
                                  |     emptyStatement
                                  |     neStub
                                  )
{
    recoverWhile = "ne_statement_recover"
}

neStub ::= NEW ID SEMI
{
    pin = 1
} 

private ne_statement_recover ::= !(MOVE | NEW | SEMI | RBRACE | ID) 

moveNavigatorElementStatement ::= MOVE navigatorElementSelector (localizedStringLiteral)? navigatorElementOptions navigatorElementStatementBody
{
    pin = 1
}

newNavigatorElementStatement ::= NEW navigatorElementDescription navigatorElementOptions navigatorElementStatementBody
{
    pin = 2
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFNavigatorElementDeclarationImpl"
    implements="com.lsfusion.lang.psi.declarations.LSFNavigatorElementDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.NavigatorElementStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

private folderElementDescription ::= FOLDER simpleName localizedStringLiteral? { pin = 2 }
navigatorElementDescription ::= (   ACTION (simpleName? localizedStringLiteral? EQUALS)? noParamsActionUsage
                                |   FORM (simpleName? localizedStringLiteral? EQUALS)? formUsage
                                |   folderElementDescription
                                |   (simpleName? localizedStringLiteral? EQUALS)? formElseNoParamsActionUsage
                                )
 
setupNavigatorElementStatement ::= navigatorElementSelector (localizedStringLiteral)? navigatorElementOptions navigatorElementStatementBody
{
    pin = 1
}

navigatorElementOptions ::= (	WINDOW windowUsage
                            |	navigatorElementInsertPosition 
                            |	IMAGE stringLiteral
                            )*

navigatorElementInsertPosition ::=	(   insertRelativePositionLiteral navigatorElementSelector
                                    |	FIRST
                                    )

navigatorElementSelector ::= navigatorElementUsage

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// DESIGN STATEMENT ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

designStatement ::=	designHeader componentBody {
    pin = 1
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
    stubClass = "com.lsfusion.lang.psi.stubs.extend.DesignStubElement"
    implements="com.lsfusion.lang.psi.extend.LSFDesign, com.lsfusion.lang.psi.context.FormContext"
    mixin="com.lsfusion.lang.psi.extend.impl.LSFDesignImpl"
    methods = [ getIcon resolveFormDecl]
}

designHeader ::= DESIGN formUsage (localizedStringLiteral)? customFormDesignOption? {pin=2}

customFormDesignOption ::= CUSTOM

componentBody ::= componentBlockStatement | emptyStatement

componentBlockStatement ::= LBRACE componentStatement* RBRACE
{
    pin = 1
}

componentStatement ::=      setObjectPropertyStatement
                        |	setupComponentStatement
                        |	newComponentStatement
                        |   moveComponentStatement
                        |	removeComponentStatement
                        |	emptyStatement
                        |   componentStubStatement
{
    recoverWhile = "component_statement_recover"
}

private component_statement_recover ::= !component_statement_recover_start 
private component_statement_recover_start ::= ID | PARENT | PROPERTY | NEW | MOVE | REMOVE | SEMI | RBRACE | groupObjectTreeSingleSelectorType | globalSingleSelectorType | GROUP | FILTERGROUP 

componentStubStatement ::= NEW ID
{
    pin(".*") = 1
}

setupComponentStatement ::= componentSelector componentBody
{
    pin = 1
}

newComponentStatement ::= NEW componentStubDecl componentInsertPosition componentBody {pin = 2}
moveComponentStatement ::= MOVE componentSelector componentInsertPosition componentBody {pin = 1}

componentInsertPosition ::= (   insertRelativePositionLiteral componentSelector
                            |	FIRST
                            )?
                            
removeComponentStatement ::= REMOVE componentSelector SEMI {pin = 1}

// GROUPOBJECT + TREE
private componentSingleSelectorType ::=  BOX | OBJECTS | PANEL | TOOLBARBOX | TOOLBARLEFT | TOOLBARRIGHT | TOOLBAR
groupObjectTreeSingleSelectorType ::= componentSingleSelectorType | TOOLBARSYSTEM | FILTERGROUPS | USERFILTER | GRIDBOX | CLASSCHOOSER | GRID | SHOWTYPE
globalSingleSelectorType ::= componentSingleSelectorType 

private groupObjectTreeSelector ::= TREE treeGroupSelector | groupObjectSelector { pin(".*") = 1 }
groupSingleSelectorType ::= GROUP
private groupComponentSelector ::= groupSelector? (COMMA groupObjectTreeSelector)? { pin(".*") = 1 }

private pinnedGroupObjectTreeSelector ::= groupObjectTreeSingleSelectorType LBRAC groupObjectTreeSelector RBRAC {pin = 2}

// should match component_statement_recover
componentSelector ::=   PARENT LBRAC componentSelector RBRAC
                	|	PROPERTY LBRAC propertySelector RBRAC
                	|   FILTERGROUP LBRAC filterGroupSelector RBRAC
                	|   groupSingleSelectorType LBRAC groupComponentSelector RBRAC
                	|   pinnedGroupObjectTreeSelector // pinned для нижнего правила
                	|   globalSingleSelectorType
                    |	componentUsage
{
    pin(".*") = 1
}

componentStubDecl ::= componentDecl
{
    implements="com.lsfusion.lang.psi.declarations.LSFComponentStubDeclaration"
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFComponentStubDeclarationImpl"
    stubClass = "com.lsfusion.lang.psi.stubs.ComponentStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

componentDecl ::= simpleName
{
    implements="com.lsfusion.lang.psi.declarations.LSFComponentDeclaration"
    mixin="com.lsfusion.lang.psi.declarations.impl.LSFComponentDeclarationImpl"
}

componentUsage ::= simpleName
{
    implements="com.lsfusion.lang.psi.references.LSFComponentReference"
    mixin="com.lsfusion.lang.psi.references.impl.LSFComponentReferenceImpl"
}

propertySelector ::= formPropertyDrawUsage
groupObjectSelector ::= groupObjectUsage 
treeGroupSelector ::= treeGroupUsage
filterGroupSelector ::= filterGroupUsage 
groupSelector ::= groupUsage

setObjectPropertyStatement ::= ID EQUALS componentPropertyValue SEMI {pin = 2}

componentPropertyValue ::=  colorLiteral
                        |	localizedStringLiteral
                        |	intLiteral
                        |	doubleLiteral
                        |	dimensionLiteral
                        |	booleanLiteral
                        |	boundsIntLiteral
                        |	boundsDoubleLiteral
                        |   containerTypeLiteral
                        |   flexAlignmentLiteral
                        |   designCalcPropertyObject

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////// META STATEMENT //////////////////////////////
////////////////////////////////////////////////////////////////////////////////

metaCodeDeclarationStatement ::= META simpleName LBRAC metaDeclIdList? RBRAC anyTokens END {
    pin=2
    mixin = "com.lsfusion.lang.psi.declarations.impl.LSFMetaDeclarationImpl"
    implements = "com.lsfusion.lang.psi.declarations.LSFMetaDeclaration"
    stubClass = "com.lsfusion.lang.psi.stubs.MetaStubElement"
    elementTypeFactory = "com.lsfusion.lang.psi.stubs.types.LSFStubElementTypeFactory.create"
}

anyTokens ::= (<< readAny >>)*

private metaStatement ::= statement { recoverWhile = "meta_statement_recover" }
private meta_statement_recover ::= !(statement_start | RBRACE)
metaCodeBody ::= metaCodeBodyLeftBrace (metaStatement*) metaCodeBodyRightBrace

metaCodeBodyLeftBrace ::= LBRACE
metaCodeBodyRightBrace ::= RBRACE

metaCodeStatement ::= metaCodeStatementHeader metaCodeBody? metaCodeStatementSemi
{
    pin=2
    mixin="com.lsfusion.lang.psi.references.impl.LSFMetaReferenceImpl"
    implements="com.lsfusion.lang.psi.references.LSFMetaReference"
    methods=[isInline]
}

metaCodeStatementType ::= ATSIGN | ATSIGN2
metaCodeStatementHeader ::= metaCodeStatementType metacodeUsage LBRAC metaCodeIdList RBRAC
metaCodeStatementSemi ::= SEMI

metaDeclId ::=  ID
metaDeclIdList ::= metaDeclId (COMMA metaDeclId)*

metaCodeIdList ::= (metaCodeId (COMMA metaCodeId)*)?

metaCodeId ::= (PRIMITIVE_TYPE | compoundID | metaCodeLiteral)?

metaCodeLiteral ::= LEX_STRING_LITERAL
                | 	LEX_UINT_LITERAL
                |	LEX_UNUMERIC_LITERAL
                |	LEX_UDOUBLE_LITERAL
                |	LEX_ULONG_LITERAL
                |	LEX_LOGICAL_LITERAL
                |	LEX_DATE_LITERAL
                |	LEX_DATETIME_LITERAL
                |	LEX_TIME_LITERAL
                |	LEX_COLOR_LITERAL
                |	NULL

////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// COMMON /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

emptyStatement ::= SEMI;

mappedPropertyClassParamDeclare ::= propertyUsageWrapper LBRAC classParamDeclareList RBRAC // temporary domain logic
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList ]
}
mappedActionClassParamDeclare ::= actionUsageWrapper LBRAC classParamDeclareList RBRAC // temporary domain logic
{
    pin = 1
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList ]
}

propertyUsageWrapper ::= propertyUsage // for usages search filter
actionUsageWrapper ::= actionUsage // for usages search filter

mappedPropertyExprParam ::= propertyUsage LBRAC exprParameterUsageList RBRAC // temporary mixed logic
{
    implements = "com.lsfusion.lang.psi.context.PropertyUsageContext"
    methods = [ resolveParamClasses getParamList]
}

simpleNameWithCaption ::= simpleName (localizedStringLiteral)?
private simpleNameOrWithCaption ::= localizedStringLiteral | (simpleName (localizedStringLiteral)?)

// local

objectUsageList ::= (nonEmptyObjectUsageList)?
nonEmptyObjectUsageList ::= objectUsage (COMMA objectUsage)*

nonEmptyGroupObjectUsageList ::= groupObjectUsage (COMMA groupObjectUsage)*

// global
nonEmptyCustomClassUsageList ::= customClassUsage (COMMA customClassUsage)*  { pin(".*") = 1}

nonEmptyModuleUsageList ::= moduleUsage (COMMA moduleUsage)* { pin(".*") = 1}

nonEmptyNamespaceUsageList ::= namespaceUsage (COMMA namespaceUsage)*  { pin(".*") = 1}

classNameList ::= (nonEmptyClassNameList)?
nonEmptyClassNameList ::= className (COMMA className)* { pin(".*") = 1}

nonEmptyPropertyUsageList ::= propertyUsage (COMMA propertyUsage)*  { pin(".*") = 1}

nonEmptyNoParamsPropertyUsageList ::= noParamsPropertyUsage (COMMA noParamsPropertyUsage)*  { pin(".*") = 1}
nonEmptyNoContextPropertyUsageList ::= noContextPropertyUsage (COMMA noContextPropertyUsage)*  { pin(".*") = 1}
nonEmptyNoContextActionUsageList ::= noContextActionUsage (COMMA noContextActionUsage)*  { pin(".*") = 1}

nonEmptyFormUsageList ::= formUsage (COMMA formUsage)*  { pin(".*") = 1}

exprParameterUsageList ::= (exprParameterUsage (COMMA exprParameterUsage)*)? { pin(".*") = 1}

nonEmptyActionPDBList ::= actionPropertyDefinitionBody (COMMA actionPropertyDefinitionBody)* { pin(".*") = 1}

propertyExpressionList ::= (nonEmptyPropertyExpressionList)?
nonEmptyPropertyExpressionList ::= propertyExpression (COMMA propertyExpression)* { pin(".*") = 1}

literal ::=
        ulongLiteral
	|	uintLiteral
	|	udoubleLiteral
	|	unumericLiteral
	|	localizedStringLiteral
	|	booleanLiteral
	|	dateTimeLiteral
	|	dateLiteral
	|	timeLiteral
	|	nullLiteral
	|	staticObjectID
	|	colorLiteral
{implements = "com.lsfusion.lang.psi.context.LSFExpression" methods = [ resolveInferredValueClass inferParamClasses getValueClassNames getValuePropertyNames ]}

builtInClassName ::= PRIMITIVE_TYPE
{
    mixin="com.lsfusion.lang.psi.LSFIdImpl"
    implements="com.lsfusion.lang.psi.LSFId"
}

className ::= builtInClassName | customClassUsage

// local

// parameterUsage is not needed yet, there is either declaration (mappedPropertyParamDeclare), or exprUsage (exprParameterUsage) 

objectUsage ::= simpleName
{mixin="com.lsfusion.lang.psi.references.impl.LSFObjectReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFObjectReference"}

groupObjectUsage ::= simpleName
{mixin="com.lsfusion.lang.psi.references.impl.LSFGroupObjectReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFGroupObjectReference"}

treeGroupUsage ::= simpleName
{mixin="com.lsfusion.lang.psi.references.impl.LSFTreeGroupReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFTreeGroupReference"}

exprParameterNameUsage ::= classParamDeclare
{mixin="com.lsfusion.lang.psi.references.impl.LSFExprParamReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFExprParamReference"}

// can be used for param and object simultaneously, for use in exprs
exprParameterUsage ::= (DOLLAR)? exprParameterNameUsage

// global

customClassUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFClassReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFClassReference"}

moduleUsage ::= simpleName
{mixin="com.lsfusion.lang.psi.references.impl.LSFModuleReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFModuleReference"}

namespaceUsage ::= simpleName
{mixin="com.lsfusion.lang.psi.references.impl.LSFNamespaceReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFNamespaceReference"}

explicitPropClass ::= className | QUESTION 

nonEmptyExplicitPropClassList ::= explicitPropClass (COMMA explicitPropClass)*
emptyExplicitPropClassList ::= nonEmptyExplicitPropClassList?
explicitPropClassUsage ::= LSQBR emptyExplicitPropClassList RSQBR
propertyUsage ::= compoundID explicitPropClassUsage?
{mixin="com.lsfusion.lang.psi.references.impl.LSFPropReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFPropReference"}

actionUsage ::= compoundID explicitPropClassUsage?
{mixin="com.lsfusion.lang.psi.references.impl.LSFActionReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFActionReference"}

propertyElseActionUsage ::= compoundID explicitPropClassUsage?
{mixin="com.lsfusion.lang.psi.references.impl.LSFPropElseActionReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFPropElseActionReference"}

tableUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFTableReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFTableReference"}

groupUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFGroupReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFGroupReference"}

formUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFFormReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFFormReference"}

formElseNoParamsActionUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFFormElseNoParamsActionReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFFormElseNoParamsActionReference"}

windowUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFWindowReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFWindowReference"}

navigatorElementUsage ::= compoundID
{mixin="com.lsfusion.lang.psi.references.impl.LSFNavigatorElementReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFNavigatorElementReference"}

metacodeUsage ::= compoundID

typeId ::= PRIMITIVE_TYPE | OBJECT

compoundID ::= (<<innerIDStop>> namespaceUsage POINT simpleName) | simpleName

staticObjectID ::= <<fullCompoundParamDeclareStop>> <<innerIDCheck>> customClassUsage POINT simpleName
{mixin="com.lsfusion.lang.psi.references.impl.LSFStaticObjectReferenceImpl" implements="com.lsfusion.lang.psi.references.LSFStaticObjectReference"}

groupObjectID ::= <<innerIDCheck>> formUsage POINT groupObjectUsage
{
    pin = 3
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

objectID ::= <<innerIDCheck>> formUsage POINT objectUsage
{
    pin = 3
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

componentID ::= <<innerIDCheck>> formUsage POINT componentSelector
{
    pin = 3
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

formPropertyDrawID ::= <<innerIDCheck>> formUsage POINT formPropertyDrawUsage
{
    pin = 3
    implements="com.lsfusion.lang.psi.context.FormContext"
    methods = [resolveFormDecl]
}

exclusiveOverrideOption ::= OVERRIDE | EXCLUSIVE

abstractExclusiveOverrideOption ::= (OVERRIDE abstractCaseAddOption? ) | EXCLUSIVE

abstractCaseAddOption ::= FIRST | LAST

colorLiteral ::= LEX_COLOR_LITERAL | (RGB LBRAC uintLiteral COMMA uintLiteral COMMA uintLiteral RBRAC)
stringLiteral ::= LEX_STRING_LITERAL
{
    mixin="com.lsfusion.lang.psi.LSFStringValueLiteralImpl"
    implements="com.lsfusion.lang.psi.LSFStringValueLiteral"
}

localizedStringLiteral ::= LEX_STRING_LITERAL 
{
    mixin="com.lsfusion.lang.psi.LSFLocalizedStringValueLiteralImpl"
    implements="com.lsfusion.lang.psi.LSFLocalizedStringValueLiteral"
}
intLiteral ::= (MINUS)? uintLiteral
doubleLiteral ::= (MINUS)? unumericLiteral
dateLiteral ::= LEX_DATE_LITERAL
dateTimeLiteral ::= LEX_DATETIME_LITERAL
timeLiteral ::= LEX_TIME_LITERAL
booleanLiteral ::= LEX_LOGICAL_LITERAL
udoubleLiteral ::= LEX_UDOUBLE_LITERAL
unumericLiteral ::= LEX_UNUMERIC_LITERAL
uintLiteral ::= LEX_UINT_LITERAL
ulongLiteral ::= LEX_ULONG_LITERAL
nullLiteral ::= NULL
codeLiteral ::= LEX_CODE_LITERAL

nullOption ::= NONULL

equalsSign ::= EQUALS

dimensionLiteral ::= LBRAC intLiteral COMMA intLiteral RBRAC
boundsIntLiteral ::= LBRAC intLiteral COMMA intLiteral COMMA intLiteral COMMA intLiteral RBRAC
boundsDoubleLiteral ::= LBRAC doubleLiteral COMMA doubleLiteral COMMA doubleLiteral COMMA doubleLiteral RBRAC

insertRelativePositionLiteral ::= BEFORE | AFTER

containerTypeLiteral ::=    CONTAINERV
	                    |	CONTAINERH
	                    |	COLUMNS
	                    |	TABBED
	                    |   SCROLL
	                    |	SPLITH
	                    |	SPLITV
	                    
alignmentLiteral ::= START | CENTER | END

flexAlignmentLiteral ::= START | CENTER | END | STRETCH

emailRecipientTypeLiteral ::= TO | CC | BCC

emailAttachFormat ::= PDF | DOCX | HTML | RTF | XLSX

